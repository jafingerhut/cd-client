{:snapshot-time "Sun Jan 27 09:43:37 PST 2013",
 :snapshot-info
 {"clojure.zip/insert-right"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6105,
   :name "insert-right",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6105"},
  "lancet/dependset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3391,
   :name "dependset",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3391"},
  "clojure.core/print-namespace-doc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1589,
   :name "print-namespace-doc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/1589"},
  "clojure.contrib.mock/incorrect-invocation-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5244,
   :name "incorrect-invocation-count",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5244"},
  "clojure.contrib.string/escape"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 88,
     :ns "clojure.contrib.string",
     :updated_at "2012-05-15 10:44:01.0",
     :function "escape",
     :version 1,
     :created_at "2012-05-15 10:44:01.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(clojure.string/escape \"asdf\" {\\a \\b}) \n=> \"bsdf\"\n(clojure.string/escape \"asdf\" {\\a \"b\"}) \n=> \"bsdf\"\n(clojure.string/escape \"asdf\" {\\a \"bb\"}) \n=> \"bbsdf\""}],
   :id 1129,
   :name "escape",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1129"},
  "incanter.excel/write-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2957,
   :name "write-cell",
   :ns "incanter.excel",
   :url "http://clojuredocs.org/v/2957"},
  "clojure.contrib.repl-utils/add-break-thread!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 351,
   :name "add-break-thread!",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/351"},
  "clojure.contrib.pprint/pprint-simple-code-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 972,
   :name "pprint-simple-code-list",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/972"},
  "incanter.processing/begin-raw"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3249,
   :name "begin-raw",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3249"},
  "incanter.processing/CMYK"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3028,
   :name "CMYK",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3028"},
  "clojure.java.javadoc/*feeling-lucky-url*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5899,
   :name "*feeling-lucky-url*",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5899"},
  "clojure.contrib.combinatorics/subsets"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2011-03-02 09:01:20.0",
     :function "subsets",
     :version 1,
     :created_at "2011-03-02 09:01:20.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body "(subsets #{1, 2, 3})"}
    {:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2011-03-02 09:06:18.0",
     :function "subsets",
     :version 1,
     :created_at "2011-03-02 09:06:18.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body "(subsets [\"apple\", \"orange\", \"banana\"])"}],
   :id 5258,
   :name "subsets",
   :ns "clojure.contrib.combinatorics",
   :url "http://clojuredocs.org/v/5258"},
  "clojure.core/defonce"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 17:33:24.0",
     :function "defonce",
     :version 1,
     :created_at "2010-12-29 17:33:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (defonce foo 5)\n#'user/foo\n\nuser> foo\n5\n\n;; defonce does nothing the second time\nuser> (defonce foo 10)\nnil\n\nuser> foo\n5"}],
   :id 5455,
   :name "defonce",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5455"},
  "incanter.charts/area-chart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2838,
   :name "area-chart",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2838"},
  "clojure.contrib.monads/run-cont"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 804,
   :name "run-cont",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/804"},
  "lancet/ear"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3475,
   :name "ear",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3475"},
  "clojure.contrib.dataflow/remove-cells"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 104,
   :name "remove-cells",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/104"},
  "clojure.test/*test-out*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6018,
   :name "*test-out*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6018"},
  "clojure.contrib.error-kit/deferror"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 273,
   :name "deferror",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/273"},
  "incanter.charts/dynamic-scatter-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2797,
   :name "dynamic-scatter-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2797"},
  "clojure.core/*out*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "*in*",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/2045",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "*in*",
     :file nil}],
   :examples [],
   :id 5303,
   :name "*out*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5303"},
  "incanter.processing/num->text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3176,
   :name "num->text",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3176"},
  "clojure.core/rand-nth"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "rand",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1629",
     :line "3811",
     :arglists_comp "[]|[n]",
     :url_friendly_name "rand",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-11-05 23:52:42.0",
     :function "rand-nth",
     :version 4,
     :created_at "2010-08-20 08:46:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def food [:ice-cream :steak :apple])\n#'user/food\n\nuser=> (rand-nth food)\n:apple\nuser=> (rand-nth food)\n:ice-cream\n"}],
   :id 5691,
   :name "rand-nth",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5691"},
  "clojure.contrib.java-utils/read-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 525,
   :name "read-properties",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/525"},
  "clojure.core/macroexpand"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "macroexpand-1",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1808",
     :line "3091",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand-1",
     :file "clojure/core.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "macroexpand-all",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2560",
     :line "127",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand-all",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 02:57:29.0",
     :function "macroexpand",
     :version 1,
     :created_at "2010-10-05 02:57:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; It is useful to combine macroexpand with pprint as the\n;; default output can be hard to read.\nuser=> (clojure.pprint/pprint (macroexpand '(time (print \"timing\"))))\n(let*\n [start__3917__auto__\n  (. java.lang.System (clojure.core/nanoTime))\n  ret__3918__auto__\n  (print \"timing\")]\n (clojure.core/prn\n  (clojure.core/str\n   \"Elapsed time: \"\n   (clojure.core//\n    (clojure.core/double\n     (clojure.core/-\n      (. java.lang.System (clojure.core/nanoTime))\n      start__3917__auto__))\n    1000000.0)\n   \" msecs\"))\n ret__3918__auto__)\n\n;; Even after pretty printing you may benefit from some\n;; manual cleanup.\n\n;; Also worth noting that most of the time macroexpand-1 is\n;; a better alternative to avoid over expanding down too \n;; many levels."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 06:35:08.0",
     :function "macroexpand",
     :version 1,
     :created_at "2012-06-09 06:35:08.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (macroexpand '(-> c (+ 3) (* 2)))    \n(* (clojure.core/-> c (+ 3)) 2)\n"}],
   :id 5596,
   :name "macroexpand",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5596"},
  "clojure.data/diff"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 332,
     :ns "clojure.data",
     :updated_at "2011-11-11 19:55:24.0",
     :function "diff",
     :version 1,
     :created_at "2011-11-11 19:55:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.data)\n(def uno {:same \"same\", :different \"one\"})\n(def dos {:same \"same\", :different \"two\", :onlyhere \"whatever\"})\n(diff uno dos)\n=> ({:different \"one\"} {:onlyhere \"whatever\", :different \"two\"} {:same \"same\"})\n;;  {different in uno} {     different or unique in dos       } {same in both}\n(diff {:a 1} {:a 1 :b 2})\n=> (nil {:b 2} {:a 1})\n;; the first contains nothing unique, but only the second contains :b\n;; and both contain :a"}],
   :id 5859,
   :name "diff",
   :ns "clojure.data",
   :url "http://clojuredocs.org/v/5859"},
  "clojure.core/rationalize"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-06 17:37:23.0",
     :function "rationalize",
     :version 2,
     :created_at "2010-09-06 17:37:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "<pre>\r\nuser=> (rationalize 1.5)\r\n3/2\r\n</pre>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-26 01:58:48.0",
     :function "rationalize",
     :version 1,
     :created_at "2012-04-26 01:58:48.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (rationalize Math/PI)\n3141592653589793/1000000000000000\n\nuser=> (rationalize (Math/sqrt 2))\n14142135623730951/10000000000000000"}],
   :id 5695,
   :name "rationalize",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5695"},
  "clj-ssh.ssh/exec-channel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1464,
   :name "exec-channel",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1464"},
  "swank.core/send-to-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4061,
   :name "send-to-emacs",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4061"},
  "leiningen.deps/get-repository-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3531,
   :name "get-repository-list",
   :ns "leiningen.deps",
   :url "http://clojuredocs.org/v/3531"},
  "clojure.contrib.logging/impl-write!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 648,
   :name "impl-write!",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/648"},
  "clojure.core/num"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "number?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1639",
     :line "2718",
     :arglists_comp "[x]",
     :url_friendly_name "number_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-22 16:49:30.0",
     :function "num",
     :version 4,
     :created_at "2010-09-06 17:34:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (num 2048)\n2048\n\n\n;; Calling a Number http://download.oracle.com/javase/6/docs/api/ method:\n\nuser=> (def x (num 2048))\n#'user/x\n\nuser=> (.floatValue x)\n2048.0\n"}],
   :id 5645,
   :name "num",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5645"},
  "clojure.set/intersection"
  {:comments [],
   :see-alsos
   [{:namespace_id 111,
     :weight 1,
     :name "union",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/2451",
     :line "19",
     :arglists_comp "[]|[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "union",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 2,
     :name "difference",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/2460",
     :line "48",
     :arglists_comp "[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "difference",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 0,
     :name "superset?",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2454",
     :line "150",
     :arglists_comp "[set1 set2]",
     :url_friendly_name "superset_q",
     :file "clojure/set.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-09-26 05:07:08.0",
     :function "intersection",
     :version 3,
     :created_at "2010-07-12 21:15:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (intersection #{1})\n#{1}\nuser=> (intersection #{1 2} #{2 3})\n#{2}\nuser=> (intersection #{1 2} #{2 3} #{3 4})\n#{}\nuser=> (intersection #{1 :a} #{:a 3} #{:a})\n#{:a}\n"}],
   :id 5981,
   :name "intersection",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5981"},
  "clojure.contrib.ns-utils/immigrate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 752,
   :name "immigrate",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/752"},
  "clojure.core/-'"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5318,
   :name "-'",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5318"},
  "clojure.contrib.greatest-least/all-greatest"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 36,
     :ns "clojure.contrib.greatest-least",
     :updated_at "2010-09-08 15:06:03.0",
     :function "all-greatest",
     :version 2,
     :created_at "2010-09-08 15:06:03.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "<pre>\r\nuser=> (use 'clojure.contrib.greatest-least)\r\n\r\nuser=> (all-greatest 3 6 90 35.2 90)\r\n(90 90)\r\n</pre>"}],
   :id 453,
   :name "all-greatest",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/453"},
  "incanter.distributions/poisson-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5081,
   :name "poisson-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5081"},
  "clojure.core/type"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "class",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:45.0",
     :added nil,
     :url "http://clojuredocs.org/v/1791",
     :line "2651",
     :arglists_comp "[x]",
     :url_friendly_name "class",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "supers",
     :updated_at "2011-06-08 04:02:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1937",
     :line "4390",
     :arglists_comp "[class]",
     :url_friendly_name "supers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "instance?",
     :updated_at "2011-08-21 22:07:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1519",
     :line "124",
     :arglists_comp "[c x]",
     :url_friendly_name "instance_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-02 01:06:37.0",
     :function "type",
     :version 4,
     :created_at "2010-09-13 14:10:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Checking numbers\nuser=> (type 10)\njava.lang.Integer\n\nuser=> (type 10.0)\njava.lang.Double\n\n\n;; Checking collections\nuser=> (type [10 20])\nclojure.lang.PersistentVector\n\nuser=> (type '(10 20))\nclojure.lang.PersistentList\n\n\n;; Checking other, but somewhat intuitive, forms\nuser=> (type :a)\nclojure.lang.Keyword\n\nuser=> (type Thread)\njava.lang.Class\n\n\n;; Checking a symbol\nuser=> (type 'whatever)\nclojure.lang.Symbol\n\n;; A surprise attack yields\nuser=> (type clojure.lang.Symbol)\n;; not such a surprising response\njava.lang.Class\n\n\n;; Checking a function\nuser=> (defn foo [] (\"any string\"))\n#'user/foo\nuser=> (type foo)\nuser$foo\n\n\n;; Checking a macro\nuser=> (type fn)\nuser$fn\n\nuser=> (type clojure.core/fn)\njava.lang.Exception: Can't take value of a macro: #'clojure.core/fn (NO_SOURCE_FILE:94)\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-15 18:41:53.0",
     :function "type",
     :version 2,
     :created_at "2011-05-15 18:40:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";This example demonstrates how to add type information to regular clojure maps\n(defn purchase-order [id date amount]\n  ^{:type ::PurchaseOrder} ;metadata\n   {:id id :date date :amount amount})\n\n(def my-order (purchase-order 10 (java.util.Date.) 100.0))\n\n(my-order)\n=> {:id 10, :date #<Date Sun May 15 14:29:19 EDT 2011>, :amount 100.0}\n\n(type my-order)\n=> PurchaseOrder"}],
   :id 5798,
   :name "type",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5798"},
  "leiningen.version/version"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3588,
   :name "version",
   :ns "leiningen.version",
   :url "http://clojuredocs.org/v/3588"},
  "clojure.contrib.pprint/compiled-format1056"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5231,
   :name "compiled-format1056",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5231"},
  "clojure.core/when"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "when-not",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1657",
     :line "425",
     :arglists_comp "[test & body]",
     :url_friendly_name "when-not",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "when-let",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1849",
     :line "1422",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "when-let",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-01-06 02:26:55.0",
     :function "when",
     :version 4,
     :created_at "2010-07-13 18:46:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (when (= 1 1) true)\ntrue\n\nuser=> (when (not= 1 1) true)\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-14 13:16:18.0",
     :function "when",
     :version 3,
     :created_at "2011-07-27 13:21:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def has-value (when true\n                            (println \"Hello World\")\n                            \"Returned Value\"))\nHello World\n#'user/has-value\n\nuser=> has-value\n\"Returned Value\"\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:01:36.0",
     :function "when",
     :version 1,
     :created_at "2012-04-12 22:01:36.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5836,
   :name "when",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5836"},
  "clojure.contrib.generic.math-functions/rint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 422,
   :name "rint",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/422"},
  "clojure.contrib.json/read-json-from"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 597,
   :name "read-json-from",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/597"},
  "clojure.core/*assert*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assert",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1733",
     :line "3726",
     :arglists_comp "[x]",
     :url_friendly_name "assert",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5290,
   :name "*assert*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5290"},
  "incanter.core/dataset"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 145,
     :ns "incanter.core",
     :updated_at "2010-07-30 03:29:38.0",
     :function "dataset",
     :version 2,
     :created_at "2010-07-30 03:29:38.0",
     :library "incanter",
     :lib_version "1.2.3-SNAPSHOT",
     :library_id 5,
     :body
     "<pre>\r\n(dataset [\"x1\" \"x2\" \"x3\"]\r\n         [[1 2 3]\r\n          [4 5 6]\r\n          [7 8 9]])\r\n</pre>"}],
   :id 2891,
   :name "dataset",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2891"},
  "incanter.core/conj-cols"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2799,
   :name "conj-cols",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2799"},
  "clj-swing.example/sr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5202,
   :name "sr",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5202"},
  "incanter.processing/background-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3032,
   :name "background-image",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3032"},
  "clj-swing.frame/*frame-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5206,
   :name "*frame-known-keys*",
   :ns "clj-swing.frame",
   :url "http://clojuredocs.org/v/5206"},
  "clojure.core/*print-length*"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:52:41.0",
     :function "*print-length*",
     :version 3,
     :created_at "2010-07-13 13:46:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Oops! Don't this!!!\nuser=> (iterate inc 0)\n;; Frantically doing C-c C-c :-P\n; Evaluation aborted.\n\nuser=> (set! *print-length* 10)\n10\n\n;; Now it's perfectly fine. Yay!\nuser=> (iterate inc 0)\n(0 1 2 3 4 5 6 7 8 9 ...)\n\n"}],
   :id 5305,
   :name "*print-length*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5305"},
  "clojure.core/mapcat"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "map",
     :updated_at "2010-10-20 05:22:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1734",
     :line "2079",
     :arglists_comp
     "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
     :url_friendly_name "map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "concat",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1691",
     :line "592",
     :arglists_comp "[]|[x]|[x y]|[x y & zs]",
     :url_friendly_name "concat",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:49:33.0",
     :function "mapcat",
     :version 3,
     :created_at "2010-07-13 16:19:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (mapcat reverse [[3 2 1 0] [6 5 4] [9 8 7]])\n(0 1 2 3 4 5 6 7 8 9)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-18 02:28:06.0",
     :function "mapcat",
     :version 1,
     :created_at "2012-05-18 02:28:06.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (mapcat (fn [[k v]] \n                 (for [[k2 v2] v] \n                   (concat [k k2] v2)))\n         '{:a {:x (1 2) :y (3 4)}\n           :b {:x (1 2) :z (5 6)}})\n\n((:a :x 1 2) (:a :y 3 4) (:b :x 1 2) (:b :z 5 6))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-19 02:54:54.0",
     :function "mapcat",
     :version 2,
     :created_at "2012-06-19 02:23:06.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (require '[clojure.string :as cs])\nnil\n\n;; Suppose you have a fn in a `map` that itself returns\n;; multiple values.\nuser=> (map #(cs/split % #\"\\d\") [\"aa1bb\" \"cc2dd\" \"ee3ff\"])\n([\"aa\" \"bb\"] [\"cc\" \"dd\"] [\"ee\" \"ff\"])\n\n;; Now, if you want to concat them all together, you *could*\n;; do this:\nuser=> (apply concat (map #(cs/split % #\"\\d\") [\"aa1bb\" \"cc2dd\" \"ee3ff\"]))\n(\"aa\" \"bb\" \"cc\" \"dd\" \"ee\" \"ff\")\n\n;; But `mapcat` can save you a step:\nuser=> (mapcat #(cs/split % #\"\\d\") [\"aa1bb\" \"cc2dd\" \"ee3ff\"])\n(\"aa\" \"bb\" \"cc\" \"dd\" \"ee\" \"ff\")\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-30 05:21:58.0",
     :function "mapcat",
     :version 1,
     :created_at "2012-07-30 05:21:58.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Suppose you've got a function that takes a value\n;; and returns a list of things from it, for example:\n(defn f1\n  [n]\n  [(- n 1) n (+ n 1)])\n\n(f1 1)\n;=> [0 1 2]\n\n;; Perhaps you'd like to map it onto each item in a collection:\n(map f1 [1 2 3])\n;=> ([0 1 2] [1 2 3] [2 3 4])\n\n;; But suppose you wanted them all concatenated? You could do this:\n(apply concat (map f1 [1 2 3]))\n;=> (0 1 2 1 2 3 2 3 4)\n\n;; Or you could get the same thing with `mapcat`:\n(mapcat f1 [1 2 3])\n;=> (0 1 2 1 2 3 2 3 4)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-09 22:58:58.0",
     :function "mapcat",
     :version 1,
     :created_at "2013-01-09 22:58:58.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Flatten a map, consing keys on to each nested vector \n(mapcat (fn [[k vs]] (map (partial cons k) vs)) {:foo [[1 2] [3 2]] :bar [[3 1]]})\n;=> ((:foo 1 2) (:foo 3 2) (:bar 3 1))\n"}],
   :id 5603,
   :name "mapcat",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5603"},
  "circumspec.for-all/uppercase-ascii"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3661,
   :name "uppercase-ascii",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3661"},
  "clj-swing.panel/*panel-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5201,
   :name "*panel-known-keys*",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5201"},
  "swank.commands/slime-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3970,
   :name "slime-fn",
   :ns "swank.commands",
   :url "http://clojuredocs.org/v/3970"},
  "incanter.core/sin"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2905,
   :name "sin",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2905"},
  "clojure.contrib.generic.math-functions/approx="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 421,
   :name "approx=",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/421"},
  "clojure.contrib.pprint.utilities/unzip-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 829,
   :name "unzip-map",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/829"},
  "clojure.core/denominator"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-16 03:11:49.0",
     :function "denominator",
     :version 1,
     :created_at "2011-08-16 03:11:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; denominator always returns the denominator of the reduced fraction\n;;\nuser=> (denominator (/ 2 3))\n3\nuser=> (denominator (/ 3 6))\n2\nuser=> (map denominator [(/ 3 2) (/ 2 3) (/ 4 5) (/ 4 6)])\n(2 3 5 3)\nuser=>"}],
   :id 5463,
   :name "denominator",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5463"},
  "clojure.core/throw"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "try",
     :updated_at "2010-10-25 01:37:14.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5275",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "try",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "catch",
     :updated_at "2010-10-25 01:36:12.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5281",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "catch",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "finally",
     :updated_at "2010-10-28 03:10:04.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5282",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "finally",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 02:46:55.0",
     :function "throw",
     :version 1,
     :created_at "2010-10-25 02:46:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "=> (throw (Exception. \"my exception message\"))\njava.lang.Exception: my exception message (NO_SOURCE_FILE:0)\n"}],
   :id 6131,
   :name "throw",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6131"},
  "swank.util.class-browse/top-level-class?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4131,
   :name "top-level-class?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4131"},
  "incanter.charts/add-categories*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2814,
   :name "add-categories*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2814"},
  "clojure.contrib.test-is/*testing-vars*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1370,
   :name "*testing-vars*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1370"},
  "clojure.core/partition-by"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-03 22:10:17.0",
     :user_id 620,
     :function "partition-by",
     :version "1.3.0",
     :created_at "2012-06-03 21:08:34.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "It's worth mentioning that `(partition-by identity â€¦)` is equivalent to the `Data.List.group` function in Haskell:\n\n<pre> \n(defn group [coll]\n  (partition-by identity coll))\n</pre>\n\nWhich proves to be an interesting idiom:\n\n<pre>user=&gt; (apply str \n         (for [ch (group \"fffffffuuuuuuuuuuuu\")] \n           (str (first ch) (count ch))))\nâ‡’ \"f7u12\"\n</pre>"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "partition",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1972",
     :line "2354",
     :arglists_comp "[n coll]|[n step coll]|[n step pad coll]",
     :url_friendly_name "partition",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "partition-all",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1897",
     :line "5599",
     :arglists_comp "[n coll]|[n step coll]",
     :url_friendly_name "partition-all",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "group-by",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1940",
     :line "5541",
     :arglists_comp "[f coll]",
     :url_friendly_name "group-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:47:01.0",
     :function "partition-by",
     :version 3,
     :created_at "2010-07-23 18:57:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (partition-by #(= 3 %) [1 2 3 4 5])\n((1 2) (3) (4 5))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:37:49.0",
     :function "partition-by",
     :version 4,
     :created_at "2010-07-23 18:58:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (partition-by odd? [1 1 1 2 2 3 3])\n((1 1 1) (2 2) (3 3))\n\nuser=> (partition-by even? [1 1 1 2 2 3 3])\n((1 1 1) (2 2) (3 3))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-05 00:48:13.0",
     :function "partition-by",
     :version 3,
     :created_at "2011-10-13 10:06:53.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; (this is part of a solution from 4clojure.com/problem 30)\nuser=> (partition-by identity \"Leeeeeerrroyyy\")\n((\\L) (\\e \\e \\e \\e \\e \\e) (\\r \\r \\r) (\\o) (\\y \\y \\y))"}],
   :id 5655,
   :name "partition-by",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5655"},
  "ring.util.servlet/make-service-method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2628,
   :name "make-service-method",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2628"},
  "clojure.contrib.graph/dependency-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 126,
   :name "dependency-list",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/126"},
  "clojure.walk/prewalk-demo"
  {:comments [],
   :see-alsos
   [{:namespace_id 118,
     :weight 0,
     :name "prewalk",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2557",
     :line "62",
     :arglists_comp "[f form]",
     :url_friendly_name "prewalk",
     :file "clojure/walk.clj"}],
   :examples [],
   :id 6080,
   :name "prewalk-demo",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6080"},
  "clojure.xml/attrs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6088,
   :name "attrs",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6088"},
  "clojure.contrib.mock/times"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5259,
   :name "times",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5259"},
  "clojure.test/test-all-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6040,
   :name "test-all-vars",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6040"},
  "clojure.contrib.fcase/in-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 302,
   :name "in-case",
   :ns "clojure.contrib.fcase",
   :url "http://clojuredocs.org/v/302"},
  "clojure.contrib.lazy-xml/startparse-sax"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 619,
   :name "startparse-sax",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/619"},
  "ring.middleware.multipart-params/wrap-multipart-params"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2682,
   :name "wrap-multipart-params",
   :ns "ring.middleware.multipart-params",
   :url "http://clojuredocs.org/v/2682"},
  "clojure.contrib.error-kit/with-handler"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 279,
   :name "with-handler",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/279"},
  "clojure.test.junit/message-el"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6060,
   :name "message-el",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6060"},
  "clojure.core/chunk-append"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5410,
   :name "chunk-append",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5410"},
  "clojure.contrib.java-utils/as-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 528,
   :name "as-str",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/528"},
  "clj-ssh.ssh/*default-session-options*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1480,
   :name "*default-session-options*",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1480"},
  "swank.commands.basic/swank-macroexpand"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4042,
   :name "swank-macroexpand",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4042"},
  "clojure.test/testing-vars-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6045,
   :name "testing-vars-str",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6045"},
  "swank.commands.inspector/action-part"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4224,
   :name "action-part",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4224"},
  "clojure.core/create-struct"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5442,
   :name "create-struct",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5442"},
  "lancet/define-all-ant-tasks"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3477,
   :name "define-all-ant-tasks",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3477"},
  "clojure.test/run-all-tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6036,
   :name "run-all-tests",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6036"},
  "clojure.core/unchecked-divide-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5805,
   :name "unchecked-divide-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5805"},
  "clojure.contrib.duck-streams/write-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 263,
   :name "write-lines",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/263"},
  "clj-swing.combo-box/seq-ref-combobox-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5169,
   :name "seq-ref-combobox-model",
   :ns "clj-swing.combo-box",
   :url "http://clojuredocs.org/v/5169"},
  "clojure.string/replace"
  {:comments
   [{:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2012-10-24 19:35:41.0",
     :user_id 765,
     :function "replace",
     :version "1.3.0",
     :created_at "2012-10-24 19:35:41.0",
     :library "Clojure Core",
     :library_id 15,
     :body "How can i replace \".\" with #\"\\s\""}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "subs",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1913",
     :line "3940",
     :arglists_comp "[s start]|[s start end]",
     :url_friendly_name "subs",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "split",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2471",
     :line "169",
     :arglists_comp "[s re]|[s re limit]",
     :url_friendly_name "split",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 0,
     :name "replace-first",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2485",
     :line "103",
     :arglists_comp "[s match replacement]",
     :url_friendly_name "replace-first",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2012-03-28 08:48:11.0",
     :function "replace",
     :version 4,
     :created_at "2010-09-12 20:18:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.string/replace \"The color is red\" #\"red\" \"blue\")\n\"The color is blue\""}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2011-09-07 05:28:12.0",
     :function "replace",
     :version 2,
     :created_at "2011-01-15 03:53:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.string/replace \"The color is red.\" #\"[aeiou]\"  #(str %1 %1))\n\"Thee cooloor iis reed.\"\n"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2011-12-31 23:00:13.0",
     :function "replace",
     :version 2,
     :created_at "2011-12-20 22:48:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Note: When replace-first or replace have a regex pattern as their\n;; match argument, dollar sign ($) and backslash (\\) characters in\n;; the replacement string are treated specially.\n\n;; Example: first substring that the pattern matches is \"fodder\", with\n;; (o+) matching \"o\" and (\\S+) matching \"dder\".  Replacement string\n;; says to replace the entire match \"fodder\" with $2, the string\n;; matched by the second parenthesized group, \"dder\", followed by $1,\n;; \"o\".\nuser=> (str/replace \"fabulous fodder foo food\" #\"f(o+)(\\S+)\" \"$2$1\")\n\"fabulous ddero oo doo\"\n\n;; To avoid this special treatment of $ and \\, you must escape them with\n;; \\.  Because it is in a Clojure string, to get one \\ we must escape\n;; *that* with its own \\.\nuser=> (str/replace \"fabulous fodder foo food\" #\"f(o+)(\\S+)\" \"\\\\$2\\\\$1\")\n\"fabulous $2$1 $2$1 $2$1\"\n\n;; To ensure the replacement is treated literally, call\n;; java.util.regex.Matcher/quoteReplacement on it.  A shorter name\n;; like re-qr can be handy.\nuser=> (import '(java.util.regex Matcher))\njava.util.regex.Matcher\n\nuser=> (defn re-qr [replacement]\n         (Matcher/quoteReplacement replacement))\n#'user/re-qr\n\nuser=> (str/replace \"fabulous fodder foo food\" #\"f(o+)(\\S+)\" (re-qr \"$2$1\"))\n\"fabulous $2$1 $2$1 $2$1\"\n"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2012-08-11 19:57:03.0",
     :function "replace",
     :version 1,
     :created_at "2012-08-11 19:57:03.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; replaces all a's with 1 and all b's with 2\nuser=>(clojure.string/replace \"a b a\" #\"a|b\" {\"a\" \"1\" \"b\" \"2\"})\n\"1 2 1\""}],
   :id 6002,
   :name "replace",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6002"},
  "clojure.core/defmethod"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "defmulti",
     :updated_at "2011-08-12 18:02:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1989",
     :line "1310",
     :arglists_comp
     "[name docstring? attr-map? dispatch-fn & options]",
     :url_friendly_name "defmulti",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-method",
     :updated_at "2011-08-21 02:30:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1528",
     :line "1364",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "remove-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-all-methods",
     :updated_at "2011-08-21 02:46:57.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1882",
     :line "1358",
     :arglists_comp "[multifn]",
     :url_friendly_name "remove-all-methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prefers",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1836",
     :line "1388",
     :arglists_comp "[multifn]",
     :url_friendly_name "prefers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-22 21:22:10.0",
     :function "defmethod",
     :version 1,
     :created_at "2010-11-22 21:22:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defmulti service-charge (fn [acct] [(account-level acct) (:tag acct)]))\n(defmethod service-charge [::acc/Basic ::acc/Checking]   [_] 25)\n(defmethod service-charge [::acc/Basic ::acc/Savings]    [_] 10)\n(defmethod service-charge [::acc/Premium ::acc/Account] [_] 0)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-22 22:14:33.0",
     :function "defmethod",
     :version 1,
     :created_at "2010-11-22 22:14:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";this example illustrates that the dispatch type\n;does not have to be a symbol, but can be anything (in this case, it's a string)\n\n(defmulti greeting\n  (fn[x] (x \"language\")))\n\n;params is not used, so we could have used [_]\n(defmethod greeting \"English\" [params]\n \"Hello!\")\n\n(defmethod greeting \"French\" [params]\n \"Bonjour!\")\n\n;then can use this like this:\n(def english-map {\"id\" \"1\", \"language\" \"English\"})\n(def  french-map {\"id\" \"2\", \"language\" \"French\"})\n\n=>(greeting english-map)\n\"Hello!\"\n=>(greeting french-map)\n\"Bounjour!\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-15 23:19:10.0",
     :function "defmethod",
     :version 1,
     :created_at "2011-06-15 23:19:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Methods can be given a name.  Very useful in stack traces.\n(defmethod foo \"a\" name-of-method [params] \"was a\")\n"}],
   :id 5451,
   :name "defmethod",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5451"},
  "incanter.processing/norm"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3158,
   :name "norm",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3158"},
  "net.licenser.sandbox.tester/blacklist"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5144,
   :name "blacklist",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5144"},
  "ring.handler.dump/handle-dump"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2636,
   :name "handle-dump",
   :ns "ring.handler.dump",
   :url "http://clojuredocs.org/v/2636"},
  "incanter.processing/no-stroke"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3114,
   :name "no-stroke",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3114"},
  "clojure.zip/insert-child"
  {:comments [],
   :see-alsos
   [{:namespace_id 120,
     :weight 1,
     :name "zipper",
     :updated_at "2010-10-24 13:03:31.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2584",
     :line "18",
     :arglists_comp "[branch? children make-node root]",
     :url_friendly_name "zipper",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "append-child",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2583",
     :line "223",
     :arglists_comp "[loc item]",
     :url_friendly_name "append-child",
     :file "clojure/zip.clj"}],
   :examples
   [{:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2012-02-16 14:51:25.0",
     :function "insert-child",
     :version 1,
     :created_at "2012-02-16 14:51:25.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.zip) ;;warnings OK\n\n(def zp (zipper vector? seq (fn [_ c] c) [[1 2 3] [4 [5 6] 7] [8 9]]) )\n\n(root (insert-child (-> zp down right) 42))\n=>([1 2 3] (42 4 [5 6] 7) [8 9])\n\n\n(def zp2 (zipper vector? seq (fn [_ c] c) [74 75])\n\n(root (insert-right (-> zp down right) zp2))\n=>([1 2 3] [4 [5 6] 7] [[74 75] nil] [8 9])\n\n(root (insert-left (-> zp down right) zp2))\n=>([1 2 3] [[74 75] nil] [4 [5 6] 7] [8 9])\n\n\n\n"}],
   :id 6103,
   :name "insert-child",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6103"},
  "clojure.contrib.math/gcd"
  {:comments [],
   :see-alsos
   [{:namespace_id 55,
     :weight 1,
     :name "lcm",
     :updated_at "2012-11-01 18:16:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:54:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/703",
     :line "169",
     :arglists_comp "[a b]",
     :url_friendly_name "lcm",
     :file "clojure/contrib/math.clj"}],
   :examples [],
   :id 702,
   :name "gcd",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/702"},
  "circumspec.context/expand-subcontext-forms"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3630,
   :name "expand-subcontext-forms",
   :ns "circumspec.context",
   :url "http://clojuredocs.org/v/3630"},
  "clojure.string/capitalize"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "upper-case",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/2473",
     :line "157",
     :arglists_comp "[s]",
     :url_friendly_name "upper-case",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "lower-case",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2470",
     :line "163",
     :arglists_comp "[s]",
     :url_friendly_name "lower-case",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-09-26 00:54:52.0",
     :function "capitalize",
     :version 4,
     :created_at "2010-08-20 10:18:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (require 'clojure.string)\nnil\n\nuser=> (clojure.string/capitalize \"MiXeD cAsE\")\n\"Mixed case\"\n\nuser=> (clojure.string/capitalize \"mIxEd CaSe\")\n\"Mixed case\"\n"}],
   :id 5998,
   :name "capitalize",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/5998"},
  "net.licenser.sandbox.safe-fns/output-functions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5111,
   :name "output-functions",
   :ns "net.licenser.sandbox.safe-fns",
   :url "http://clojuredocs.org/v/5111"},
  "incanter.core/pow"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2761,
   :name "pow",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2761"},
  "clojure.contrib.jmx/map->attribute-infos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 570,
   :name "map->attribute-infos",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/570"},
  "clojure.core/make-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "int-array",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1730",
     :line "4191",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "int-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "double-array",
     :updated_at "2011-08-20 23:07:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/1738",
     :line "4176",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "double-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "float-array",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1709",
     :line "4136",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "float-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "short-array",
     :updated_at "2011-08-20 23:37:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1559",
     :line "4168",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "short-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "long-array",
     :updated_at "2011-08-20 23:10:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1550",
     :line "4199",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "long-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "char-array",
     :updated_at "2010-12-29 18:12:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1563",
     :line "4160",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "char-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "byte-array",
     :updated_at "2011-08-21 13:51:48.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1993",
     :line "4152",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "byte-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "boolean-array",
     :updated_at "2011-08-20 23:29:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1544",
     :line "4144",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "boolean-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "object-array",
     :updated_at "2011-08-21 14:24:50.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/1504",
     :line "4184",
     :arglists_comp "[size-or-seq]",
     :url_friendly_name "object-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "to-array",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2063",
     :line "295",
     :arglists_comp "[coll]",
     :url_friendly_name "to-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "to-array-2d",
     :updated_at "2011-06-10 14:12:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1782",
     :line "3077",
     :arglists_comp "[coll]",
     :url_friendly_name "to-array-2d",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "into-array",
     :updated_at "2011-01-07 02:15:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1643",
     :line "2635",
     :arglists_comp "[aseq]|[type aseq]",
     :url_friendly_name "into-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aget",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2016",
     :line "2987",
     :arglists_comp "[array idx]|[array idx & idxs]",
     :url_friendly_name "aget",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aset",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1804",
     :line "2998",
     :arglists_comp "[array idx val]|[array idx idx2 & idxv]",
     :url_friendly_name "aset",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "alength",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/2059",
     :line "2973",
     :arglists_comp "[array]",
     :url_friendly_name "alength",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "amap",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1871",
     :line "4108",
     :arglists_comp "[a idx ret expr]",
     :url_friendly_name "amap",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "areduce",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/2052",
     :line "4124",
     :arglists_comp "[a idx ret init expr]",
     :url_friendly_name "areduce",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-09 15:26:42.0",
     :function "make-array",
     :version 1,
     :created_at "2011-03-09 15:26:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "(make-array Integer/TYPE 3)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-11 16:59:09.0",
     :function "make-array",
     :version 2,
     :created_at "2011-03-09 15:26:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (pprint (make-array Double/TYPE 3))\n[0.0, 0.0, 0.0]\n\nuser=> (pprint (make-array Integer/TYPE 2 3))\n[[0, 0, 0], [0, 0, 0]]\n\n\n;; Create an array of Threads, then show content and type\nuser=> (def ar (make-array Thread 3))\n#'user/ar\n\nuser=> (pprint ar)\n[nil, nil, nil]\n\nuser=> (type ar)\n[Ljava.lang.Thread;\n"}],
   :id 5598,
   :name "make-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5598"},
  "circumspec.test/make-test-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3727,
   :name "make-test-name",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3727"},
  "circumspec.report.nested/indent-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3717,
   :name "indent-lines",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3717"},
  "incanter.stats/cdf-beta"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3298,
   :name "cdf-beta",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3298"},
  "swank.util.concurrent.mbox/*mailboxes*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4323,
   :name "*mailboxes*",
   :ns "swank.util.concurrent.mbox",
   :url "http://clojuredocs.org/v/4323"},
  "clojure.core/sort-by"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "sort",
     :updated_at "2011-05-25 04:16:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2090",
     :line "2329",
     :arglists_comp "[coll]|[comp coll]",
     :url_friendly_name "sort",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:48:59.0",
     :function "sort-by",
     :version 3,
     :created_at "2010-08-11 11:52:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (sort-by count [\"aaa\" \"bb\" \"c\"])\n(\"c\" \"bb\" \"aaa\")\n\nuser=> (sort-by first [[1 2] [2 2] [2 3]])   \n([1 2] [2 2] [2 3])\n\n<pre>user=> (sort-by first > [[1 2] [2 2] [2 3]])   \n([2 2] [2 3] [1 2])"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:49:22.0",
     :function "sort-by",
     :version 3,
     :created_at "2010-08-11 12:15:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (sort-by :rank [{:rank 2} {:rank 3} {:rank 1}])\n({:rank 1} {:rank 2} {:rank 3})"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-16 21:09:31.0",
     :function "sort-by",
     :version 3,
     :created_at "2011-05-13 20:04:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(def x [{:foo 2 :bar 11}\n        {:bar 99 :foo 1}\n        {:bar 55 :foo 2}\n        {:foo 1 :bar 77}])\n\n;sort by :foo, and where :foo is equal, sort by :bar?\n(sort-by (juxt :foo :bar) x)\n;=>({:foo 1, :bar 77} {:bar 99, :foo 1} {:foo 2, :bar 11} {:bar 55, :foo 2})"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-16 03:07:54.0",
     :function "sort-by",
     :version 1,
     :created_at "2011-08-16 03:07:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(def x [{:foo 2 :bar 11}\n {:bar 99 :foo 1}\n {:bar 55 :foo 2}\n {:foo 1 :bar 77}])\n; sort-by given key order (:bar)\n(def order [55 77 99 11])\n(sort-by \n  #((into {} (map-indexed (fn [i e] [e i]) order)) (:bar %)) \n  x)\n;=> ({:bar 55, :foo 2} {:foo 1, :bar 77} {:bar 99, :foo 1} {:foo 2, :bar 11})"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-28 04:04:46.0",
     :function "sort-by",
     :version 2,
     :created_at "2012-01-28 04:03:57.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";sort entries in a map by value\nuser=> (sort-by val > {:foo 7, :bar 3, :baz 5})\n([:foo 7] [:baz 5] [:bar 3])"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-27 00:34:58.0",
     :function "sort-by",
     :version 2,
     :created_at "2012-03-14 17:38:34.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Warning: You can sort a Java array and get back a sorted immutable Clojure\n;; data structure, but it will also change the input Java array, by sorting it.\n;; Copy the array before sorting if you want to avoid this.\n\nuser=> (def x (to-array [32 -5 4 11]))\n#'user/x\n\nuser=> (seq x)\n(32 -5 4 11)\n\nuser=> (def y (sort-by - x))\n#'user/y\n\n;; Return sorted sequence\nuser=> y\n(32 11 4 -5)\n\n;; but also modifies x, because it used the array to do the sorting.\nuser=> (seq x)\n(32 11 4 -5)\n\n;; One way to avoid this is copying the array before sorting:\nuser=> (def y (sort-by - (aclone x)))\n#'user/y"}],
   :id 5762,
   :name "sort-by",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5762"},
  "clojure.contrib.datalog.softstrat/build-soft-strat-work-plan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 181,
   :name "build-soft-strat-work-plan",
   :ns "clojure.contrib.datalog.softstrat",
   :url "http://clojuredocs.org/v/181"},
  "swank.core/*debug-abort-exception*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4028,
   :name "*debug-abort-exception*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4028"},
  "swank.core.connection/read-from-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4195,
   :name "read-from-connection",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4195"},
  "lancet/deftarget"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3476,
   :name "deftarget",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3476"},
  "clojure.core/unchecked-remainder"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unchecked-add",
     :updated_at "2010-11-08 03:25:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1700",
     :line "955",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-add",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-dec",
     :updated_at "2010-11-08 03:52:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1540",
     :line "941",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-dec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-inc",
     :updated_at "2010-11-08 03:53:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1632",
     :line "934",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-inc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "unchecked-negate",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1645",
     :line "948",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-negate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-divide",
     :updated_at "2011-08-20 23:49:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2111",
     :line "976",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-divide",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-subtract",
     :updated_at "2010-11-08 03:42:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1768",
     :line "962",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-subtract",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-multiply",
     :updated_at "2011-08-21 00:16:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1533",
     :line "969",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-multiply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-remainder",
     :updated_at "2010-11-08 03:47:39.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2023",
     :line "983",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-remainder",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 17:56:20.0",
     :function "unchecked-remainder",
     :version 2,
     :created_at "2010-11-08 03:47:39.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (unchecked-remainder 0 0)\njava.lang.ArithmeticException: / by zero (NO_SOURCE_FILE:0)\n\nuser=> (unchecked-remainder Integer/MAX_VALUE Integer/MIN_VALUE)\n2147483647\n\nuser=> (unchecked-remainder 0 Integer/MAX_VALUE)\n0\n\nuser=> (unchecked-remainder 1 Integer/MAX_VALUE)\n1\n\nuser=> (unchecked-remainder Integer/MAX_VALUE Integer/MAX_VALUE)\n0\n\nuser=> (unchecked-remainder Integer/MIN_VALUE Integer/MAX_VALUE)\n-1\n\nuser=> (unchecked-remainder -20  90)\n-20\n\nuser=> (unchecked-remainder Integer/MAX_VALUE Long/MIN_VALUE)\njava.lang.IllegalArgumentException: No matching method found: unchecked_remainder (NO_SOURCE_FILE:0)"}],
   :id 2023,
   :name "unchecked-remainder",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/2023"},
  "incanter.processing/TRIANGLE_FAN"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3154,
   :name "TRIANGLE_FAN",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3154"},
  "clojure.contrib.probabilities.finite-distributions/select"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1075,
   :name "select",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1075"},
  "clojure.contrib.pprint/pprint-vector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1032,
   :name "pprint-vector",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1032"},
  "incanter.stats/product-marginal-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3308,
   :name "product-marginal-test",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3308"},
  "clojure.core/extend"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "satisfies?",
     :updated_at "2011-01-12 22:33:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2086",
     :line "457",
     :arglists_comp "[protocol x]",
     :url_friendly_name "satisfies_q",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "extends?",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1714",
     :line "444",
     :arglists_comp "[protocol atype]",
     :url_friendly_name "extends_q",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "extenders",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1807",
     :line "451",
     :arglists_comp "[protocol]",
     :url_friendly_name "extenders",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-02 19:54:56.0",
     :function "extend",
     :version 2,
     :created_at "2011-02-02 19:35:03.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; From Sean Devlin's talk on protocols at Clojure Conj\n(defprotocol Dateable\n  (to-ms [t]))\n\n(extend java.lang.Number\n  Dateable\n  {:to-ms identity})\n\n(extend java.util.Date\n  Dateable\n  {:to-ms #(.getTime %)})\n\n(extend java.util.Calendar\n  Dateable\n  {:to-ms #(to-ms (.getTime %))})"}],
   :id 5496,
   :name "extend",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5496"},
  "clojure.contrib.pprint.utilities/tuple-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 995,
   :name "tuple-map",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/995"},
  "clojure.contrib.datalog.database/remove-tuple"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 179,
   :name "remove-tuple",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/179"},
  "swank.commands.xref/all-vars-who-call"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4245,
   :name "all-vars-who-call",
   :ns "swank.commands.xref",
   :url "http://clojuredocs.org/v/4245"},
  "clojure.contrib.pprint/get-pretty-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 868,
   :name "get-pretty-writer",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/868"},
  "incanter.processing/create-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3182,
   :name "create-writer",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3182"},
  "clojure.core/set-validator!"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-29 18:37:28.0",
     :user_id 61,
     :function "set-validator!",
     :version "1.3.0",
     :created_at "2012-02-29 18:37:28.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "If you want your validator to throw an exception with a useful message, make sure it is a RuntimeException (or subclass), otherwise ARef#validate will throw an IllegalStateException with a generic message."}],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-22 14:11:47.0",
     :function "set-validator!",
     :version 3,
     :created_at "2012-01-18 00:07:02.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def atm (atom [2])\n#'user/atm\n\nuser=> (set-validator! atm #(every? even? %))\nnil\n\nuser=> (swap! atm into [5])\n#<CompilerException java.lang.IllegalStateException: Invalid reference state (NO_SOURCE_FILE:0)>\n\nuser=> (set-validator! atm nil)\nnil\n\nuser=> (swap! atm into [5]))\n[2 5]"}],
   :id 5751,
   :name "set-validator!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5751"},
  "clojure.contrib.generic.arithmetic//"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 386,
   :name "/",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/386"},
  "clojure.core/cycle"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-19 15:16:14.0",
     :function "cycle",
     :version 4,
     :created_at "2010-07-14 19:17:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (take 5 (cycle [\"a\" \"b\"]))\n(\"a\" \"b\" \"a\" \"b\" \"a\")\n\nuser=> (take 10 (cycle (range 0 3)))\n(0 1 2 0 1 2 0 1 2 0)\n\n"}],
   :id 5443,
   :name "cycle",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5443"},
  "swank.loader/swank-source-files"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4300,
   :name "swank-source-files",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4300"},
  "clojure.contrib.probabilities.finite-distributions/bernoulli"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1087,
   :name "bernoulli",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1087"},
  "lancet/javadoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3471,
   :name "javadoc",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3471"},
  "clojure.contrib.repl-utils/*feeling-lucky*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 352,
   :name "*feeling-lucky*",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/352"},
  "clojure.contrib.generic.math-functions/log"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 416,
   :name "log",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/416"},
  "clojure.contrib.str-utils2/replace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1276,
   :name "replace",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1276"},
  "clj-swing.tree/toString"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5213,
   :name "toString",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5213"},
  "leiningen.classpath/find-lib-jars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3502,
   :name "find-lib-jars",
   :ns "leiningen.classpath",
   :url "http://clojuredocs.org/v/3502"},
  "clojure.contrib.datalog.literals/literal-predicate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 207,
   :name "literal-predicate",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/207"},
  "clojure.contrib.str-utils2/rtrim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1272,
   :name "rtrim",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1272"},
  "incanter.processing/copy-pixels"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3256,
   :name "copy-pixels",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3256"},
  "clojure.xml/*state*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6087,
   :name "*state*",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6087"},
  "circumspec.runner/exit-code"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3734,
   :name "exit-code",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3734"},
  "clojure.core/unchecked-long"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5811,
   :name "unchecked-long",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5811"},
  "incanter.processing/lights"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3245,
   :name "lights",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3245"},
  "lancet/delete"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3419,
   :name "delete",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3419"},
  "clojure.core/sync"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-01 01:39:32.0",
     :user_id 41,
     :function "sync",
     :version "1.2.0",
     :created_at "2010-10-01 01:39:32.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Same as dosync but allows for extra options (which are not currently supported).  Probably best to use dosync instead at the moment."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "dosync",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1564",
     :line "3993",
     :arglists_comp "[& exprs]",
     :url_friendly_name "dosync",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5783,
   :name "sync",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5783"},
  "clojure.core/*ns*"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-12 04:28:05.0",
     :user_id 41,
     :function "*ns*",
     :version "1.2.0",
     :created_at "2011-07-12 04:28:05.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "A trap I fell into was that *ns* seems to get assigned to clojure.core when run as a \"gen-class\" compiled class."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:39:23.0",
     :function "*ns*",
     :version 1,
     :created_at "2010-11-06 03:39:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> *ns*\n#<Namespace user>"}],
   :id 5302,
   :name "*ns*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5302"},
  "clojure.core/var"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "meta",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/2110",
     :line "178",
     :arglists_comp "[obj]",
     :url_friendly_name "meta",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "symbol",
     :updated_at "2010-11-08 06:20:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1624",
     :line "476",
     :arglists_comp "[name]|[ns name]",
     :url_friendly_name "symbol",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "symbol?",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1606",
     :line "466",
     :arglists_comp "[x]",
     :url_friendly_name "symbol_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "var?",
     :updated_at "2010-11-08 03:07:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1787",
     :line "3935",
     :arglists_comp "[v]",
     :url_friendly_name "var_q",
     :file "clojure/core.clj"}
    {:namespace_id 62,
     :weight 1,
     :name "vars",
     :updated_at "2010-11-08 02:59:27.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:54:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/728",
     :line "71",
     :arglists_comp "[nsname]",
     :url_friendly_name "vars",
     :file "clojure/contrib/ns_utils.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "binding",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/2093",
     :line "1468",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "binding",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 3,
     :name "with-redefs",
     :updated_at "2012-11-09 06:25:12.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5850",
     :line "6487",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "with-redefs",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 2,
     :name "with-redefs-fn",
     :updated_at "2012-11-08 09:09:54.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:41.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5851",
     :line "6467",
     :arglists_comp "[binding-map func]",
     :url_friendly_name "with-redefs-fn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "set!",
     :updated_at "2011-06-03 14:48:47.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5280",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "set!",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 02:40:48.0",
     :function "var",
     :version 1,
     :created_at "2010-11-08 02:40:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";;getting meta-data for a defined symbol (as opposed to what it's pointing to.\n\nuser=> meta\n#<core$meta clojure.core$meta@2e257f1b>\n\nuser=> (var meta)\n#'clojure.core/meta\n\nuser=> (meta (var meta))\n{:ns #<Namespace clojure.core>, :name meta, :file \"clojure/core.clj\", :line 178, :arglists ([obj]), :doc \"Returns the metadata of obj, returns nil if there is no metadata.\", :added \"1.0\"}\n"}],
   :id 6129,
   :name "var",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6129"},
  "clojure.contrib.server-socket/create-repl-server"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 78,
     :ns "clojure.contrib.server-socket",
     :updated_at "2010-09-26 03:21:07.0",
     :function "create-repl-server",
     :version 3,
     :created_at "2010-07-29 17:10:11.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; Add a socket-based REPL to a web application.\n\n;; First, generate a `ServletContextListener` implementation:\n\n(use '[clojure.contrib.server-socket :only [create-repl-server]])\n\n(gen-class \n    :name \"org.project.ReplServer\" \n    :implements [javax.servlet.ServletContextListener])\n\n(defn -contextInitialized [this e]\n\t(.start (Thread. (partial create-repl-server 11111))))\n\t\n(defn -contextDestroyed [this e] )\n\n\n;; Then, add this class to `web.xml`: org.project.ReplServer\n\n;; Once the web application is deployed connect to the REPL socket with \n;; this command: `telnet yourserver 11111`"}],
   :id 1191,
   :name "create-repl-server",
   :ns "clojure.contrib.server-socket",
   :url "http://clojuredocs.org/v/1191"},
  "clojure.contrib.datalog.database/merge-relations"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 148,
   :name "merge-relations",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/148"},
  "swank.core/*sldb-stepping-p*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4112,
   :name "*sldb-stepping-p*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4112"},
  "swank.commands.inspector/inspector-reinspect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4220,
   :name "inspector-reinspect",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4220"},
  "clojure.contrib.repl-utils/find-javadoc-url"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 365,
   :name "find-javadoc-url",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/365"},
  "clojure.core/interleave"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "interpose",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1978",
     :line "4084",
     :arglists_comp "[sep coll]",
     :url_friendly_name "interpose",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "zipmap",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1579",
     :line "2296",
     :arglists_comp "[keys vals]",
     :url_friendly_name "zipmap",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 05:02:33.0",
     :function "interleave",
     :version 5,
     :created_at "2010-07-10 03:01:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This example takes a list of keys and a separate list of values and \n;; inserts them into a map.\nuser=> (apply assoc {} \n         (interleave [:fruit :color :temp] \n                     [\"grape\" \"red\" \"hot\"]))\n\n{:temp \"hot\", :color \"red\", :fruit \"grape\"}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 05:02:43.0",
     :function "interleave",
     :version 4,
     :created_at "2010-07-13 06:06:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Simple example:\nuser=> (interleave [:a :b :c] [1 2 3])\n(:a 1 :b 2 :c 3)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 05:02:52.0",
     :function "interleave",
     :version 3,
     :created_at "2010-07-13 06:08:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The shortest input stops interleave:\n\nuser=> (interleave [:a :b] (iterate inc 1))\n(:a 1 :b 2)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-19 18:58:28.0",
     :function "interleave",
     :version 1,
     :created_at "2012-04-19 18:58:28.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def s1 [[:000-00-0000 \"TYPE 1\" \"JACKSON\" \"FRED\"]\n         [:000-00-0001 \"TYPE 2\" \"SIMPSON\" \"HOMER\"]\n         [:000-00-0002 \"TYPE 4\" \"SMITH\" \"SUSAN\"]])\n\n(interleave (map #(nth % 0 nil) s1) (map #(nth % 1 nil) s1))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-19 18:59:32.0",
     :function "interleave",
     :version 1,
     :created_at "2012-04-19 18:59:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def s1 [[:000-00-0000 \"TYPE 1\" \"JACKSON\" \"FRED\"]\n         [:000-00-0001 \"TYPE 2\" \"SIMPSON\" \"HOMER\"]\n         [:000-00-0002 \"TYPE 4\" \"SMITH\" \"SUSAN\"]])\n\n(def cols [0 2 3])\n\n(defn f1 \n  [s1 col] \n  (map #(get-in s1 [% col] nil) (range (count s1))))\n\n(apply interleave (map (partial f1 s1) cols))\n(:000-00-0000 \"JACKSON\" \"FRED\" :000-00-0001 \"SIMPSON\" \"HOMER\" :000-00-0002 \"SMITH\" \"SUSAN\")"}],
   :id 5560,
   :name "interleave",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5560"},
  "incanter.stats/mahalanobis-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3295,
   :name "mahalanobis-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3295"},
  "ring.util.response/response"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2632,
   :name "response",
   :ns "ring.util.response",
   :url "http://clojuredocs.org/v/2632"},
  "clojure.core/*e"
  {:comments [],
   :see-alsos
   [{:namespace_id 342,
     :weight 0,
     :name "pst",
     :updated_at "2011-09-26 06:37:43.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:15:16.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5972",
     :line "242",
     :arglists_comp "[]|[e-or-depth]|[e depth]",
     :url_friendly_name "pst",
     :file "clojure/repl.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:56:08.0",
     :function "*e",
     :version 3,
     :created_at "2010-08-10 10:40:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (ns-refers) ;;Oops! we missed a namespace (ns-refers 'user)\n; Evaluation aborted.\n\nuser=> *e\n#&lt;CompilerException java.lang.IllegalArgumentException: Wrong number of args passed to: core$ns-refers (NO_SOURCE_FILE:0)&gt;\n"}],
   :id 5295,
   :name "*e",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5295"},
  "clojure.contrib.types/defadt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 380,
   :name "defadt",
   :ns "clojure.contrib.types",
   :url "http://clojuredocs.org/v/380"},
  "clojure.core/ns-unmap"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "remove-ns",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1687",
     :line "3189",
     :arglists_comp "[sym]",
     :url_friendly_name "remove-ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-map",
     :updated_at "2010-10-25 23:35:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1997",
     :line "3216",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-23 22:05:41.0",
     :function "ns-unmap",
     :version 2,
     :created_at "2010-11-19 16:37:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def foo 1)\n#'user/foo\n\nuser=> foo\n1\n\nuser=> (ns-unmap 'user 'foo) ; explicit\nnil\n\nuser=> (ns-unmap *ns* 'foo) ; convenient\nnil\n\nuser=> foo\n\"Unable to resolve symbol: foo in this context\"\n"}],
   :id 5641,
   :name "ns-unmap",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5641"},
  "incanter.stats/hamming-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3343,
   :name "hamming-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3343"},
  "clojure.core/*in*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "*out*",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1721",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "*out*",
     :file nil}],
   :examples [],
   :id 5300,
   :name "*in*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5300"},
  "clojure.core/*print-meta*"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-24 18:30:51.0",
     :user_id 755,
     :function "*print-meta*",
     :version "1.3.0",
     :created_at "2012-10-24 18:30:51.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "\"printing an object\" means via **pr** not print or println"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "pr",
     :updated_at "2011-09-07 03:48:35.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/2017",
     :line "2815",
     :arglists_comp "[]|[x]|[x & more]",
     :url_friendly_name "pr",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-24 18:00:06.0",
     :function "*print-meta*",
     :version 3,
     :created_at "2012-10-24 17:55:56.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (binding [*print-meta* true] \n         (pr (var defmacro)) )\n;;^{:macro true, :ns #<Namespace clojure.core>, :name defmacro, :arglists ^{:line 424, :column 15} ([name doc-string? attr-map? [params*] body] [name doc-string? attr-map? ^{:line 425, :column 46} ([params*] body) + attr-map?]), :column 1, :added \"1.0\", :doc \"Like defn, but the resulting function name is declared as a\\n  macro and will be used as a macro by the compiler when it is\\n  called.\", :line 419, :file \"clojure/core.clj\"} #'clojure.core/defmacro\nnil\n"}],
   :id 5307,
   :name "*print-meta*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5307"},
  "clojure.contrib.pprint/pprint-code-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1004,
   :name "pprint-code-list",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1004"},
  "clojure.contrib.pprint.column-writer/set-max-column"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 890,
   :name "set-max-column",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/890"},
  "leiningen.help/tasks"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3540,
   :name "tasks",
   :ns "leiningen.help",
   :url "http://clojuredocs.org/v/3540"},
  "lancet/sleep"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3479,
   :name "sleep",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3479"},
  "incanter.processing/save-frame"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3240,
   :name "save-frame",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3240"},
  "clojure.contrib.pprint.column-writer/get-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 830,
   :name "get-writer",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/830"},
  "clojure.core/areduce"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "amap",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1871",
     :line "4108",
     :arglists_comp "[a idx ret expr]",
     :url_friendly_name "amap",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:52:10.0",
     :function "areduce",
     :version 3,
     :created_at "2010-08-12 05:47:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This should be about as quick as summing up a array of floats in java.\n\nuser=> (defn asum [#^floats xs]\n         (areduce xs i ret (float 0)\n                  (+ ret (aget xs i))))\n\nuser=> (asum (float-array [1 2 3]))\n6.0\n"}],
   :id 5354,
   :name "areduce",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5354"},
  "incanter.processing/DIFFERENCE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3161,
   :name "DIFFERENCE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3161"},
  "clojure.contrib.profile/print-summary"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1117,
   :name "print-summary",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1117"},
  "clojure.contrib.pprint.pretty-writer/emit-nl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 922,
   :name "emit-nl",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/922"},
  "circumspec.test/pending?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3732,
   :name "pending?",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3732"},
  "clojure.reflect/typename"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5965,
   :name "typename",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5965"},
  "incanter.optimize/derivative"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2984,
   :name "derivative",
   :ns "incanter.optimize",
   :url "http://clojuredocs.org/v/2984"},
  "clojure.contrib.miglayout.internal/parse-component-constraint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 719,
   :name "parse-component-constraint",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/719"},
  "incanter.internal/transform-with"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2921,
   :name "transform-with",
   :ns "incanter.internal",
   :url "http://clojuredocs.org/v/2921"},
  "incanter.stats/sample-wishart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3366,
   :name "sample-wishart",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3366"},
  "incanter.processing/with-rotation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3061,
   :name "with-rotation",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3061"},
  "net.cgrand.enlive-html/but"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3908,
   :name "but",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3908"},
  "clojure.core/symbol?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:49:59.0",
     :function "symbol?",
     :version 4,
     :created_at "2010-07-13 19:40:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (symbol? 'a)\ntrue\nuser=> (symbol? 1)\nfalse\nuser=> (symbol? :a)\nfalse"}],
   :id 5782,
   :name "symbol?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5782"},
  "clojure.core/repeat"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "repeatedly",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2069",
     :line "4058",
     :arglists_comp "[f]|[n f]",
     :url_friendly_name "repeatedly",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "cycle",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1863",
     :line "2211",
     :arglists_comp "[coll]",
     :url_friendly_name "cycle",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "constantly",
     :updated_at "2011-07-16 14:10:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1856",
     :line "1112",
     :arglists_comp "[x]",
     :url_friendly_name "constantly",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dotimes",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1587",
     :line "2508",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "dotimes",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-24 14:23:58.0",
     :function "repeat",
     :version 4,
     :created_at "2010-07-14 00:33:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (take 5 (repeat \"x\"))\n(\"x\" \"x\" \"x\" \"x\" \"x\")\n\n;; which is the same as:\nuser=> (repeat 5 \"x\")\n(\"x\" \"x\" \"x\" \"x\" \"x\")\n\n;; It should be noted that repeat simply repeats the value n number of times.\n;; If you wish to execute a function to calculate the value each time you \n;; probably want the repeatedly function.\n\n"}],
   :id 5723,
   :name "repeat",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5723"},
  "clojure.core/await1"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5373,
   :name "await1",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5373"},
  "clojure.contrib.macro-utils/deftemplate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 663,
   :name "deftemplate",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/663"},
  "lancet/ant-import"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3394,
   :name "ant-import",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3394"},
  "clj-swing.panel/stack"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5208,
   :name "stack",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5208"},
  "swank.core/*debug-swank-clojure*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4110,
   :name "*debug-swank-clojure*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4110"},
  "net.cgrand.enlive-html/text-pred"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3852,
   :name "text-pred",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3852"},
  "clojure.contrib.duck-streams/slurp*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "slurp",
     :updated_at "2011-08-25 12:50:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1753",
     :line "5365",
     :arglists_comp "[f & opts]",
     :url_friendly_name "slurp",
     :file "clojure/core.clj"}
    {:namespace_id 21,
     :weight 1,
     :name "spit",
     :updated_at "2012-04-17 19:15:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:48:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/253",
     :line "258",
     :arglists_comp "[f content]",
     :url_friendly_name "spit",
     :file "clojure/contrib/duck_streams.clj"}],
   :examples [],
   :id 257,
   :name "slurp*",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/257"},
  "incanter.charts/heat-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2784,
   :name "heat-map",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2784"},
  "lancet/buildnumber"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3444,
   :name "buildnumber",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3444"},
  "midje.semi-sweet/call-faker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4337,
   :name "call-faker",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4337"},
  "clojure.contrib.stream-utils/pick-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1297,
   :name "pick-all",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1297"},
  "leiningen.pom/parse-github-url"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3567,
   :name "parse-github-url",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3567"},
  "clojure.reflect/reflect"
  {:comments [],
   :see-alsos
   [{:namespace_id 340,
     :weight 2,
     :name "print-table",
     :updated_at "2012-02-21 21:43:47.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:14:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5943",
     :line "11",
     :arglists_comp "[ks rows]|[rows]",
     :url_friendly_name "print-table",
     :file "clojure/pprint/print_table.clj"}],
   :examples
   [{:namespace_id 341,
     :ns "clojure.reflect",
     :updated_at "2012-02-23 01:30:05.0",
     :function "reflect",
     :version 1,
     :created_at "2012-02-23 01:30:05.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use 'clojure.reflect 'clojure.pprint)\nnil\nuser=> (def r (reflect *in*))\n#'user/r\nuser=> (count (:members r))\n9\nuser=> (pprint (map class (:members r)))\n(clojure.reflect.Constructor\n clojure.reflect.Method\n clojure.reflect.Field\n clojure.reflect.Field\n clojure.reflect.Method\n clojure.reflect.Method\n clojure.reflect.Method\n clojure.reflect.Method\n clojure.reflect.Field)\nnil\nuser=> (pprint r)\n{:bases #{java.io.PushbackReader},\n :flags #{:public},\n :members\n #{{:name clojure.lang.LineNumberingPushbackReader,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :parameter-types [java.io.Reader],\n    :exception-types [],\n    :flags #{:public}}\n   {:name read,\n    :return-type int,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :parameter-types [],\n    :exception-types [java.io.IOException],\n    :flags #{:public}}\n   {:name _atLineStart,\n    :type boolean,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :flags #{:private}}\n   {:name newline,\n    :type int,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :flags #{:private :static :final}}\n   {:name unread,\n    :return-type void,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :parameter-types [int],\n    :exception-types [java.io.IOException],\n    :flags #{:public}}\n   {:name readLine,\n    :return-type java.lang.String,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :parameter-types [],\n    :exception-types [java.io.IOException],\n    :flags #{:public}}\n   {:name atLineStart,\n    :return-type boolean,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :parameter-types [],\n    :exception-types [],\n    :flags #{:public}}\n   {:name getLineNumber,\n    :return-type int,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :parameter-types [],\n    :exception-types [],\n    :flags #{:public}}\n   {:name _prev,\n    :type boolean,\n    :declaring-class clojure.lang.LineNumberingPushbackReader,\n    :flags #{:private}}}}\nnil\n"}],
   :id 5962,
   :name "reflect",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5962"},
  "clojure.contrib.probabilities.monte-carlo/reject"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1108,
   :name "reject",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1108"},
  "clojure.contrib.accumulators/empty-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 33,
   :name "empty-list",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/33"},
  "clojure.contrib.string/map-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1320,
   :name "map-str",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1320"},
  "clojure.set/join"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-10-24 12:08:09.0",
     :function "join",
     :version 8,
     :created_at "2010-07-10 22:23:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This simple example shows each element of the first relation joined\n;; with each element of the second (because they have no columns in common):\n\nuser=> (def first-relation #{ {:a 1} {:a 2} })\nuser=> (def second-relation #{ {:b 1} {:b 2} })\nuser=> (join first-relation second-relation)\n#{{:b 1, :a 1} \n  {:b 2, :a 1} \n  {:b 1, :a 2} \n  {:b 2, :a 2}}\n\n\n;; Here's a larger example, in which a relation mainly about animal ownership\n;; is joined with a relation about animal personality. The join is used to \n;; produce a relation joining information about an animal's personality to \n;; that animal.\n\nuser=> (def animals #{{:name \"betsy\" :owner \"brian\" :kind \"cow\"}\n                      {:name \"jake\"  :owner \"brian\" :kind \"horse\"}\n                      {:name \"josie\" :owner \"dawn\"  :kind \"cow\"}})\n\nuser=> (def personalities #{{:kind \"cow\" :personality \"stoic\"}\n                            {:kind \"horse\" :personality \"skittish\"}})\n#'user/personalities\nuser=> (join animals personalities)\n\n#{{:owner \"dawn\",  :name \"josie\", :kind \"cow\",   :personality \"stoic\"}\n  {:owner \"brian\", :name \"betsy\", :kind \"cow\",   :personality \"stoic\"}\n  {:owner \"brian\", :name \"jake\",  :kind \"horse\", :personality \"skittish\"}}\n\n\n;; (If cows had two personalities, instead of one, each cow would have \n;; two rows in the output.)\n\n;; Suppose `personalities` used `:species` instead of `:kind`:\n\nuser=>  (def personalities #{{:species \"cow\" :personality \"stoic\"}\n                             {:species \"horse\" :personality \"skittish\"}})\n\n\n;; A simple join would produce results like this:\n\nuser=> (join animals personalities)\n#{{:kind \"horse\", :owner \"brian\", :name \"jake\", :species \"cow\", :personality \"stoic\"}\n  {:kind \"cow\", :owner \"dawn\", :name \"josie\", :species \"cow\", :personality \"stoic\"}\n  {:kind \"horse\", :owner \"brian\", :name \"jake\", :species \"horse\", :personality \"skittish\"}\n  {:kind \"cow\", :owner \"brian\", :name \"betsy\", :species \"cow\", :personality \"stoic\"}\n  {:kind \"cow\", :owner \"dawn\", :name \"josie\", :species \"horse\", :personality \"skittish\"}\n  {:kind \"cow\", :owner \"brian\", :name \"betsy\", :species \"horse\", :personality \"skittish\"}}\n\n\n;; Notice that \"Jake\" is both a horse and a cow in the first line. That's \n;; likely not what you want. You can tell `join` to only produce output \n;; where the `:kind` value is the same as the `:species` value like this:\n\nuser=> (join animals personalities {:kind :species})\n#{{:kind \"cow\", :owner \"dawn\", :name \"josie\", :species \"cow\", :personality \"stoic\"}\n  {:kind \"horse\", :owner \"brian\", :name \"jake\", :species \"horse\", :personality \"skittish\"}\n  {:kind \"cow\", :owner \"brian\", :name \"betsy\", :species \"cow\", :personality \"stoic\"}}\n\n\n;; Notice that the `:kind` and `:species` keys both appear in each output map.\n\n"}],
   :id 5982,
   :name "join",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5982"},
  "clojure.core/merge-with"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "merge",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/2101",
     :line "2268",
     :arglists_comp "[& maps]",
     :url_friendly_name "merge",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:55:52.0",
     :function "merge-with",
     :version 4,
     :created_at "2010-07-13 13:25:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (merge-with concat\n\t\t  {\"Lisp\" [\"Common Lisp\" \"Clojure\"]\n\t\t   \"ML\" [\"Caml\" \"Objective Caml\"]}\n\t\t  {\"Lisp\" [\"Scheme\"]\n\t\t   \"ML\" [\"Standard ML\"]})\n{\"Lisp\" (\"Common Lisp\" \"Clojure\" \"Scheme\"), \"ML\" (\"Caml\" \"Objective Caml\" \"Standard ML\")}\n\nuser=> (clojure.pprint/pp)\n{\"Lisp\" (\"Common Lisp\" \"Clojure\" \"Scheme\"), \"ML\" (\"Caml\" \"Objective Caml\" \"Standard ML\")}\nnil\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:56:36.0",
     :function "merge-with",
     :version 3,
     :created_at "2010-07-13 15:08:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; merge two maps using the addition function\n\nuser=> (merge-with + \n                   {:a 1  :b 2}\n                   {:a 9  :b 98 :c 0})\n    \n{:c 0, :a 10, :b 100}"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:57:29.0",
     :function "merge-with",
     :version 7,
     :created_at "2010-07-13 15:12:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; 'merge-with' works with an arbitrary number of maps:\n\nuser=> (merge-with + \n                   {:a 1  :b 2}\n                   {:a 9  :b 98  :c 0}\n                   {:a 10 :b 100 :c 10}\n                   {:a 5}\n                   {:c 5  :d 42})\n    \n{:d 42, :c 15, :a 25, :b 200}"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-03 22:25:19.0",
     :function "merge-with",
     :version 2,
     :created_at "2012-01-06 12:35:51.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Use union to merge sets of elements\nuser=> (use 'clojure.set)\nuser=> (merge-with union\n                   {:a #{1 2 3},   :b #{4 5 6}}\n                   {:a #{2 3 7 8}, :c #{1 2 3}})\n\n{:c #{1 2 3}, :a #{1 2 3 7 8}, :b #{4 5 6}}"}],
   :id 5609,
   :name "merge-with",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5609"},
  "clojure.core/restart-agent"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "agent-error",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1671",
     :line "1638",
     :arglists_comp "[a]",
     :url_friendly_name "agent-error",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5732,
   :name "restart-agent",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5732"},
  "clojure.zip/append-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6097,
   :name "append-child",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6097"},
  "clojure.pprint/pprint-logical-block"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5939,
   :name "pprint-logical-block",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5939"},
  "swank.util.net.sockets/close-socket!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4278,
   :name "close-socket!",
   :ns "swank.util.net.sockets",
   :url "http://clojuredocs.org/v/4278"},
  "clojure.contrib.datalog.util/is-var?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 202,
   :name "is-var?",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/202"},
  "net.cgrand.enlive-html/pred"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3804,
   :name "pred",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3804"},
  "clojure.contrib.swing-utils/make-menubar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1349,
   :name "make-menubar",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1349"},
  "clojure.core/alength"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 20:24:31.0",
     :function "alength",
     :version 1,
     :created_at "2010-10-07 20:24:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def my-array (into-array Integer/TYPE [1 2 3]))\n#'user/my-array\n\nuser=> (alength my-array)\n3"}],
   :id 5344,
   :name "alength",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5344"},
  "leiningen.core/abort"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3530,
   :name "abort",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3530"},
  "clojure.core/use"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-06 01:44:18.0",
     :user_id 41,
     :function "use",
     :version "1.2.0",
     :created_at "2010-12-06 01:44:18.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Good description of use/require/import here:\n\nhttp://blog.8thlight.com/articles/2010/12/6/clojure-libs-and-namespaces-require-use-import-and-ns"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-10-17 09:15:30.0",
     :user_id 407,
     :function "use",
     :version "1.2.0",
     :created_at "2011-10-17 09:15:30.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "refer",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1963",
     :line "3257",
     :arglists_comp "[ns-sym & filters]",
     :url_friendly_name "refer",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "require",
     :updated_at "2011-09-02 12:18:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1928",
     :line "4809",
     :arglists_comp "[& args]",
     :url_friendly_name "require",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 7,
     :name "ns",
     :updated_at "2011-02-13 23:57:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1794",
     :line "4594",
     :arglists_comp "[name docstring? attr-map? references*]",
     :url_friendly_name "ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "import",
     :updated_at "2011-01-02 17:43:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1621",
     :line "2617",
     :arglists_comp "[& import-symbols-or-lists]",
     :url_friendly_name "import",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:43:02.0",
     :function "use",
     :version 3,
     :created_at "2010-07-14 19:14:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Use the namespace clojure.java.io:\nuser=> (use '(clojure.java io))\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-05 05:23:29.0",
     :function "use",
     :version 4,
     :created_at "2010-07-19 20:21:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Imports only the split function from clojure.string.\nuser=> (use '[clojure.string :only (split)])\nnil\n\n;; split is now available without a namespace qualification.\nuser=> (split \"hello world\" #\" \")\n[\"hello\" \"world\"]\n\n;; You can also add the :as keyword to import the rest of clojure.string\n;; with a namespace qualification.\nuser=> (use '[clojure.string :as s :only (split)])\nnil\n\n;; Now we can access any function in clojure.string using s.\nuser=> (s/replace \"foobar\" \"foo\" \"squirrel\")\n\"squirrelbar\"\n\n;; And we can still call split with or without the s qualification.\nuser=> (split \"hello world\" #\" \")\n[\"hello\" \"world\"]\nuser=> (s/split \"hello world\" #\" \")\n[\"hello\" \"world\"]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-05-30 17:40:18.0",
     :function "use",
     :version 2,
     :created_at "2010-11-29 01:07:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns some.namespace\n  (:require [clojure.contrib.json :as json])\n  (:use [clojure.string :only [trim lower-case split]]\n        [clojure.contrib.shell-out]\n        [clojure.pprint]\n        [clojure.test]))\n"}],
   :id 5825,
   :name "use",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5825"},
  "clojure.core/zipmap"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "interleave",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1869",
     :line "3328",
     :arglists_comp "[c1 c2]|[c1 c2 & colls]",
     :url_friendly_name "interleave",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:21:55.0",
     :function "zipmap",
     :version 3,
     :created_at "2010-07-17 10:35:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (zipmap [:a :b :c :d :e] [1 2 3 4 5])\n{:e 5, :d 4, :c 3, :b 2, :a 1}\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-24 22:30:21.0",
     :function "zipmap",
     :version 1,
     :created_at "2012-04-24 22:30:21.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; 4 is not included in the result\nuser=> (zipmap [:a :b :c] [1 2 3 4])\n{:c 3, :b 2, :a 1}\n\n"}],
   :id 5854,
   :name "zipmap",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5854"},
  "incanter.processing/stroke-cap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3165,
   :name "stroke-cap",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3165"},
  "incanter.stats/square-devs-from-mean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3304,
   :name "square-devs-from-mean",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3304"},
  "clojure.test/get-possibly-unbound-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6031,
   :name "get-possibly-unbound-var",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6031"},
  "incanter.processing/pop-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3171,
   :name "pop-matrix",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3171"},
  "clojure.test/are"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "is",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2497",
     :line "533",
     :arglists_comp "[form]|[form msg]",
     :url_friendly_name "is",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 2,
     :name "deftest",
     :updated_at "2010-11-08 23:37:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2495",
     :line "593",
     :arglists_comp "[name & body]",
     :url_friendly_name "deftest",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 115,
     :ns "clojure.test",
     :updated_at "2010-09-26 02:51:03.0",
     :function "are",
     :version 3,
     :created_at "2010-08-15 00:17:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; An alternate to the example in the documentation is \n\nuser=> (are [result arg-map] (= result (+ (:x arg-map) (:y arg-map)))\n             5      {:x 2 :y 3},\n             10     {:x 6 :y 4})\n\n\n"}],
   :id 6021,
   :name "are",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6021"},
  "net.licenser.sandbox/secure-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5142,
   :name "secure-tester",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5142"},
  "clojure.set/superset?"
  {:comments [],
   :see-alsos
   [{:namespace_id 111,
     :weight 1,
     :name "subset?",
     :updated_at "2010-12-29 18:04:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2456",
     :line "142",
     :arglists_comp "[set1 set2]",
     :url_friendly_name "subset_q",
     :file "clojure/set.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "set",
     :updated_at "2010-11-15 00:53:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1848",
     :line "3163",
     :arglists_comp "[coll]",
     :url_friendly_name "set",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 343,
     :ns "clojure.set",
     :updated_at "2012-05-26 13:37:27.0",
     :function "superset?",
     :version 1,
     :created_at "2012-05-26 13:37:27.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use '[clojure.set :only [superset?]])\n\nuser=> (superset? #{0} #{0})\ntrue\n\nuser=> (superset? #{0 1} #{0})\ntrue\n\nuser=> (superset? #{0} #{0 1}) \nfalse\n"}],
   :id 5989,
   :name "superset?",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5989"},
  "clojure.contrib.except/throw-if-not"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 296,
   :name "throw-if-not",
   :ns "clojure.contrib.except",
   :url "http://clojuredocs.org/v/296"},
  "clojure.contrib.datalog.rules/empty-rules-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 170,
   :name "empty-rules-set",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/170"},
  "clojure.core/amap"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "areduce",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/2052",
     :line "4124",
     :arglists_comp "[a idx ret init expr]",
     :url_friendly_name "areduce",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "map",
     :updated_at "2010-10-20 05:22:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1734",
     :line "2079",
     :arglists_comp
     "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
     :url_friendly_name "map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:59:31.0",
     :function "amap",
     :version 3,
     :created_at "2010-08-06 00:00:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(def an-array (int-array 25000 (int 0)))\n\nuser=> (time (amap ^ints an-array \n                   idx \n                   ret \n                   (+ (int 1) \n                      (aget ^ints an-array idx))))\n\n\"Elapsed time: 14.708653 msecs\"\n\n;; Note: without type hinting the performance of would not be good."}],
   :id 5350,
   :name "amap",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5350"},
  "clojure.contrib.types/deconstruct"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1413,
   :name "deconstruct",
   :ns "clojure.contrib.types",
   :url "http://clojuredocs.org/v/1413"},
  "clojure.core/peek"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-10 10:06:54.0",
     :user_id 751,
     :function "peek",
     :version "1.3.0",
     :created_at "2012-10-10 08:58:38.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Small reminder:\n\n<br>\nDo not work for arbitrary seq but just for persistent types implementing clojure.lang.IPersistentStack (like clojure.lang.Persistent*).\n\n<br>\nExample:\n<pre>user&gt; (peek (cons 1 '()))\n; Evaluation aborted.\n</pre>\ndo not work because type is clojure.lang.Cons but\n\n<pre>user&gt; (peek (conj '() 1))\n1\n</pre>\nworks because type is clojure.lang.PersistentList."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:47:36.0",
     :function "peek",
     :version 3,
     :created_at "2010-08-20 09:17:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def large-vec (vec (range 0 10000)))\n#'user/large-vec\n\nuser=> (time (last large-vec))\n\"Elapsed time: 1.279841 msecs\"\n9999\n\nuser=> (time (peek large-vec))\n\"Elapsed time: 0.049238 msecs\"\n9999\n"}],
   :id 5657,
   :name "peek",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5657"},
  "swank.commands.basic/compile-file-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4016,
   :name "compile-file-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4016"},
  "clojure.contrib.datalog.softstrat/soft-strat-work-plan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 178,
   :name "soft-strat-work-plan",
   :ns "clojure.contrib.datalog.softstrat",
   :url "http://clojuredocs.org/v/178"},
  "incanter.processing/SQUARE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3241,
   :name "SQUARE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3241"},
  "swank.commands.inspector/inspect-nth-part"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4221,
   :name "inspect-nth-part",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4221"},
  "circumspec.context/*context*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3634,
   :name "*context*",
   :ns "circumspec.context",
   :url "http://clojuredocs.org/v/3634"},
  "incanter.processing/year"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3173,
   :name "year",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3173"},
  "clojure.contrib.datalog.rules/rules-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 169,
   :name "rules-set",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/169"},
  "clojure.contrib.string/trim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1314,
   :name "trim",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1314"},
  "midje.semi-sweet/truthy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4343,
   :name "truthy",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4343"},
  "incanter.processing/HALF_PI"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3254,
   :name "HALF_PI",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3254"},
  "net.licenser.sandbox/tree-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5117,
   :name "tree-map",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5117"},
  "clojure.core/unchecked-remainder-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5816,
   :name "unchecked-remainder-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5816"},
  "clojure.contrib.pprint/*print-lines*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1011,
   :name "*print-lines*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1011"},
  "clojure.zip/edit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6101,
   :name "edit",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6101"},
  "clojure.core/with-redefs"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 2,
     :name "with-redefs-fn",
     :updated_at "2012-11-08 09:09:54.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:41.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5851",
     :line "6467",
     :arglists_comp "[binding-map func]",
     :url_friendly_name "with-redefs-fn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "alter-var-root",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/2100",
     :line "4347",
     :arglists_comp "[v f & args]",
     :url_friendly_name "alter-var-root",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-27 22:38:06.0",
     :function "with-redefs",
     :version 1,
     :created_at "2012-04-27 22:38:06.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> [(type []) (class [])]\n[clojure.lang.PersistentVector clojure.lang.PersistentVector]\n\nuser=> (with-redefs [type (constantly java.lang.String)\n                     class (constantly 10)]\n         [(type [])\n          (class [])])\n[java.lang.String 10]"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-11 23:43:25.0",
     :function "with-redefs",
     :version 2,
     :created_at "2012-10-11 23:42:34.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(ns http)\n\n(defn post [url]\n  {:body \"Hello world\"})\n\n(ns app\n  (:require [clojure.test :refer [run-tests]]))\n\n(deftest is-a-macro\n  (with-redefs [http/post (fn [url] {:body \"Goodbye world\"})]\n    (is (= {:body \"Goodbye world\"} (http/post \"http://service.com/greet\")))))\n\n(run-tests) ;; test is passing"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-09 06:25:12.0",
     :function "with-redefs",
     :version 1,
     :created_at "2012-11-09 06:25:12.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; be careful, with-redefs can permanently change a var if applied concurrently:\n\nuser> (defn ten [] 10)\n#'user/ten\nuser> (doall (pmap #(with-redefs [ten (fn [] %)] (ten)) (range 20 100)))\n...\nuser> (ten)\n79"}],
   :id 5850,
   :name "with-redefs",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5850"},
  "clojure.core/take-nth"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:09:19.0",
     :function "take-nth",
     :version 3,
     :created_at "2010-08-02 12:14:03.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (take-nth 2 (range 10))\n(0 2 4 6 8)\n"}],
   :id 5786,
   :name "take-nth",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5786"},
  "clojure.contrib.java-utils/relative-path-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 539,
   :name "relative-path-string",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/539"},
  "clojure.contrib.def/defhinted"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 91,
   :name "defhinted",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/91"},
  "clojure.core/->VecSeq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5324,
   :name "->VecSeq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5324"},
  "clojure.contrib.datalog.rules/apply-rules-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 185,
   :name "apply-rules-set",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/185"},
  "clojure.inspector/old-table-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5873,
   :name "old-table-model",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5873"},
  "clojure.contrib.pprint/execute-format"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 848,
   :name "execute-format",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/848"},
  "clj-ssh.ssh/default-session-options"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1478,
   :name "default-session-options",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1478"},
  "clojure.contrib.test-is/apply-template"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1378,
   :name "apply-template",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1378"},
  "clojure.contrib.pprint.column-writer/get-line"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 931,
   :name "get-line",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/931"},
  "clj-swing.example/lm"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5212,
   :name "lm",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5212"},
  "incanter.processing/exit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3250,
   :name "exit",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3250"},
  "net.cgrand.enlive-html/*self-closing-tags*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3923,
   :name "*self-closing-tags*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3923"},
  "clojure.core/long"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "int",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/2001",
     :line "733",
     :arglists_comp "[x]",
     :url_friendly_name "int",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "longs",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1514",
     :line "4242",
     :arglists_comp "[xs]",
     :url_friendly_name "longs",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "long-array",
     :updated_at "2011-08-20 23:10:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1550",
     :line "4199",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "long-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:50:38.0",
     :function "long",
     :version 3,
     :created_at "2010-08-05 11:08:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [num (* 1234567890 21)] [num (int num) (long num)])\n[25925925690 156121914 25925925690]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:00:38.0",
     :function "long",
     :version 3,
     :created_at "2010-08-05 11:08:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (= 21 (long 21))\ntrue \n\n;; but\nuser=> (.equals 21 (long 21))\nfalse \n\n;; and thus\nuser=> (get {21 :twenty-one} (long 21))\nnil \n"}],
   :id 5592,
   :name "long",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5592"},
  "clojure.contrib.mock/between"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5226,
   :name "between",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5226"},
  "clojure.core/ref-set"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ref",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1760",
     :line "1723",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "ref",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:06:03.0",
     :function "ref-set",
     :version 3,
     :created_at "2010-08-02 12:27:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def foo (ref {}))\n#'user/foo\n\nuser=> (dosync\n         (ref-set foo {:foo \"bar\"}))\n{:foo \"bar\"}\n\nuser=> @foo\n{:foo \"bar\"}\n"}],
   :id 5712,
   :name "ref-set",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5712"},
  "clojure.core/boolean"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:49:18.0",
     :function "boolean",
     :version 3,
     :created_at "2010-07-13 16:31:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Everything except `false' and `nil' is true in boolean context.\nuser=> (into {} (map #(vector % (boolean %)) [true false nil [] {} '() #{} \"\"]))\n{true true, false false, nil false, [] true, {} true, #{} true, \"\" true}\n\nuser=> (clojure.pprint/pp)\n{true true,\n false false,\n nil false,\n [] true,\n {} true,\n #{} true,\n \"\" true}\nnil\n"}],
   :id 5391,
   :name "boolean",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5391"},
  "clojure.contrib.graph/lazy-walk"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 442,
   :name "lazy-walk",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/442"},
  "clojure.contrib.str-utils2/drop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1290,
   :name "drop",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1290"},
  "lancet/dirname"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3417,
   :name "dirname",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3417"},
  "ring.middleware.multipart-params/ring.middleware.multipart_params.proxy$java.lang.Object$RequestContext$50781c75"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2681,
   :name
   "ring.middleware.multipart_params.proxy$java.lang.Object$RequestContext$50781c75",
   :ns "ring.middleware.multipart-params",
   :url "http://clojuredocs.org/v/2681"},
  "clojure.core/+'"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5316,
   :name "+'",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5316"},
  "incanter.core/categorical-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2885,
   :name "categorical-var",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2885"},
  "lancet/copydir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3436,
   :name "copydir",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3436"},
  "leiningen.clean/clean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3505,
   :name "clean",
   :ns "leiningen.clean",
   :url "http://clojuredocs.org/v/3505"},
  "clojure.core/*print-readably*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5308,
   :name "*print-readably*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5308"},
  "clojure.contrib.io/output-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 488,
   :name "output-stream",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/488"},
  "circumspec.runner/success-result"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3718,
   :name "success-result",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3718"},
  "incanter.core/sel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2902,
   :name "sel",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2902"},
  "clojure.core/short-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "shorts",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1517",
     :line "4222",
     :arglists_comp "[xs]",
     :url_friendly_name "shorts",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 14:43:02.0",
     :function "short-array",
     :version 2,
     :created_at "2011-08-20 23:37:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of shorts using short-array\n;; and demonstrate how it can be used with the java Arrays functions\n;; (note the needed coercions)\n\nuser=> (def ss (short-array (map short (range 3 10))))\n#'user/ss\nuser=> (type ss)\n[S\nuser=> (vec ss)\n[3 4 5 6 7 8 9]\nuser=> (java.util.Arrays/binarySearch ss (short 6))\n3\nuser=> (java.util.Arrays/fill ss (short 99))\nnil\nuser=> (vec ss)\n[99 99 99 99 99 99 99]\nuser=>"}],
   :id 5754,
   :name "short-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5754"},
  "clojure.contrib.io/relative-path-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 522,
   :name "relative-path-string",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/522"},
  "swank.commands.contrib.swank-arglists/arglist-for-echo-area"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4158,
   :name "arglist-for-echo-area",
   :ns "swank.commands.contrib.swank-arglists",
   :url "http://clojuredocs.org/v/4158"},
  "incanter.core/to-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2896,
   :name "to-map",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2896"},
  "fogus.me.trammel/defconstrainedfn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5041,
   :name "defconstrainedfn",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5041"},
  "clojure.contrib.datalog.literals/literal-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 220,
   :name "literal-vars",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/220"},
  "clojure.core/dissoc!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc!",
     :updated_at "2011-06-10 13:56:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1640",
     :line "2561",
     :arglists_comp "[coll key val]|[coll key val & kvs]",
     :url_friendly_name "assoc!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-22 19:56:58.0",
     :function "dissoc!",
     :version 3,
     :created_at "2010-12-30 09:00:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; dissoc! works on a transient map\n\n;; WARNING: Below is an example of what is called \"bashing in place\" of\n;; a transient, and is _NOT_ the correct way to use transients.  See assoc!\n;; examples for some discussion of the reason.\n\n(let [my-map (transient {:x 1 :y 2 :z 3})]\n  (dissoc! my-map :x)   ; mistake is to use my-map below, not dissoc! return val\n  (persistent! my-map)) ; returns persistent map {:y 2 :z 3}\n\n\n;; Here is a correct way to do the operation described above:\n\n(let [my-map (transient {:x 1 :y 2 :z 3})\n      x (dissoc! my-map :x)]    ; after this, don't use my-map again, only x\n  (persistent! x))    ; returns persistent map {:y 2 :z 3}"}],
   :id 5471,
   :name "dissoc!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5471"},
  "clojure.contrib.dataflow/get-cells"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 109,
   :name "get-cells",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/109"},
  "clojure.contrib.http.agent/string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 466,
   :name "string",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/466"},
  "net.cgrand.enlive-html/root"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3892,
   :name "root",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3892"},
  "clojure.contrib.generic.comparison/min"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 407,
   :name "min",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/407"},
  "clojure.contrib.macros/with-direct-linking"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 685,
   :name "with-direct-linking",
   :ns "clojure.contrib.macros",
   :url "http://clojuredocs.org/v/685"},
  "clojure.contrib.pprint/*print-base*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1010,
   :name "*print-base*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1010"},
  "lancet/antstructure"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3472,
   :name "antstructure",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3472"},
  "clojure.pprint/*print-pprint-dispatch*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5925,
   :name "*print-pprint-dispatch*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5925"},
  "incanter.distributions/gamma-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5087,
   :name "gamma-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5087"},
  "clojure.contrib.datalog.literals/delta-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 206,
   :name "delta-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/206"},
  "clojure.contrib.ns-utils/docs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 749,
   :name "docs",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/749"},
  "clojure.core/array-map"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 21:40:06.0",
     :user_id 93,
     :function "array-map",
     :version "1.2.0",
     :created_at "2010-07-26 21:40:06.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The definition is kind of short, IMO. More descriptively, `array-map` creates a mapping with arrays being the keys and the values. It doesn't seem like `array-map` cares whether or not the keys/values are arrays, although it doesn't seem to like sequences."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-04-22 18:57:58.0",
     :user_id 106,
     :function "array-map",
     :version "1.2.0",
     :created_at "2011-04-22 18:57:58.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "An <code>array-map</code> maintains the insertion order of the keys. Look up is linear, which is not a problem for small maps (say less than 10 keys). If your map is large, you should use <code>hash-map</code> instead. \n\nWhen you <code>assoc</code> onto an existing array-map, the result is a new array-map with the new key as the first key.  The rest of the keys are in the same order as the original. Functions such as <code>seq</code> and <code>keys</code> will respect the key order. \n\nNote that <code>assoc</code> will decide to return a hash-map if the result is too big to be efficient.</p>\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1702",
     :line "161",
     :arglists_comp "[map key val]|[map key val & kvs]",
     :url_friendly_name "assoc",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:51:18.0",
     :function "array-map",
     :version 3,
     :created_at "2010-07-26 21:36:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (array-map [1 2] [3 4 5])\n{[1 2] [3 4 5]}"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:08:26.0",
     :function "array-map",
     :version 6,
     :created_at "2010-09-04 18:20:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (array-map :a 10)\n{:a 10}\n\nuser=> (array-map :a 10 :b 20)\n{:a 10 :b 20}\n\nuser=> (apply array-map [:a 10 :b 20 :c 30])\n{:a 10 :b 20 :c 30}\n\nuser=> (apply assoc {} [:a 10 :b 20 :c 30]) ;same result using assoc\n{:a 10 :b 20 :c 30}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-04-22 19:01:17.0",
     :function "array-map",
     :version 1,
     :created_at "2011-04-22 19:01:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (keys (assoc (array-map :foo 10 :bar 20) :baz 30))\n(:baz :foo :bar)\n; baz is first; :foo and :bar follow the order given to array-map"}],
   :id 5355,
   :name "array-map",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5355"},
  "incanter.stats/kurtosis"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3364,
   :name "kurtosis",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3364"},
  "clojure.core/distinct"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-23 11:34:19.0",
     :user_id 173,
     :function "distinct",
     :version "1.2.0",
     :created_at "2010-09-23 11:34:19.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "If you do not need the lazyness of distinct, set can be faster. Like: (count (set some-coll))."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:52:03.0",
     :function "distinct",
     :version 4,
     :created_at "2010-07-28 12:05:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (distinct [1 2 1 3 1 4 1 5])\n(1 2 3 4 5)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:22:12.0",
     :function "distinct",
     :version 3,
     :created_at "2010-07-28 12:06:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def fractions \n         (for [n (range 1 100) d (range (inc n) 100)] \n           (let [gcd (clojure.contrib.math/gcd n d)] \n             (/ (/ n gcd) (/ d gcd)))))\n;; all irreducible fractions with denominator < 100\n;; (1/2 1/3 ... 1/99 2/3 1/2 2/5 1/3 ...)\n\nuser=> (count fractions)\n4851\n\nuser=> (count (distinct fractions))\n3003\n"}],
   :id 5472,
   :name "distinct",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5472"},
  "net.cgrand.enlive-html/id="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3922,
   :name "id=",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3922"},
  "net.cgrand.enlive-html/text-node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3815,
   :name "text-node",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3815"},
  "clojure.zip/leftmost"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6107,
   :name "leftmost",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6107"},
  "clojure.contrib.mmap/load-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 724,
   :name "load-file",
   :ns "clojure.contrib.mmap",
   :url "http://clojuredocs.org/v/724"},
  "clojure.core/aclone"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-20 02:58:27.0",
     :function "aclone",
     :version 1,
     :created_at "2011-08-20 02:58:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an Java integer array, then clone it\n;; note that when you modify b, a remains the same\n;; showing that b is not just a reference to a\n\nuser=> (def a (int-array [1 2 3 4]))\n#'user/a\nuser=> (def b (aclone a))\n#'user/b\nuser=> (aset b 0 23)\n23\nuser=> (vec b)\n[23 2 3 4]\nuser=> (vec a)\n[1 2 3 4]"}],
   :id 5337,
   :name "aclone",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5337"},
  "clojure.contrib.jmx/composite-data->map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 568,
   :name "composite-data->map",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/568"},
  "clojure.contrib.base64/*base64-alphabet*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 38,
   :name "*base64-alphabet*",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/38"},
  "swank.commands.basic/listener-eval"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4019,
   :name "listener-eval",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4019"},
  "incanter.stats/sample-exp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3316,
   :name "sample-exp",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3316"},
  "leiningen.repl/repl-server"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3576,
   :name "repl-server",
   :ns "leiningen.repl",
   :url "http://clojuredocs.org/v/3576"},
  "clojure.reflect/ClassResolver"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5954,
   :name "ClassResolver",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5954"},
  "clojure.java.javadoc/*feeling-lucky*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5898,
   :name "*feeling-lucky*",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5898"},
  "clojure.core/aset-long"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:26:13.0",
     :function "aset-long",
     :version 1,
     :created_at "2011-08-21 01:26:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 longs and set one of the values to 31415\n\nuser=> (def ls (long-array 10))\n#'user/ls\nuser=> (vec ls)\n[0 0 0 0 0 0 0 0 0 0]\nuser=> (aset-long ls 3 31415)\n31415\nuser=> (vec ls)\n[0 0 0 31415 0 0 0 0 0 0]\nuser=>"}],
   :id 5363,
   :name "aset-long",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5363"},
  "clojure.set/project"
  {:comments
   [{:namespace_id 343,
     :ns "clojure.set",
     :updated_at "2011-11-03 15:18:33.0",
     :user_id 202,
     :function "project",
     :version "1.3.0",
     :created_at "2011-11-03 15:18:33.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "is there a function that is like project, but returns a set of hash-maps with with all the keys but the ones project was given?"}
    {:namespace_id 343,
     :ns "clojure.set",
     :updated_at "2012-10-06 06:32:56.0",
     :user_id 746,
     :function "project",
     :version "1.3.0",
     :created_at "2012-10-06 06:32:56.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "This doesn't exist in clojure.set, but I think it would be what you wanted.\n\n<pre>\n(defn project-not [xrel ks]\n  ;; convert the given key sequence into a hash-set\n  ;; This represents keys that you don't want included\n  (let [ks-set (into #{} ks)]\n    ;; Do a projection on the keys that are not in ks\n    (clojure.set/project xrel\n                         ;; Assumes xrel is a set of maps\n                         ;; Grab the first map and extract the keys\n                         ;; Then remove any keys that are in ks-set\n                         ;; This will leave the remaining keys for\n                         ;; projection\n                         (remove #(ks-set %) (keys (first xrel))))))\n\nuser> (project-not cows [:id])\n#{{:name \"panda\" {:name \"betsy\"}}\n</pre>"}],
   :see-alsos [],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-09-26 05:05:25.0",
     :function "project",
     :version 3,
     :created_at "2010-07-12 21:32:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; `project` strips out unwanted key/value pairs from a set of maps. \n;; Suppose you have these descriptions of cows:\n\nuser=> (def cows #{  {:name \"betsy\" :id 33} {:name \"panda\" :id 34} })\n#'user/cows\n\n;; You care only about the names. So you can get them like this:\n\nuser=> (project cows [:name])\n#{{:name \"panda\"} {:name \"betsy\"}}\n"}],
   :id 5984,
   :name "project",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5984"},
  "clojure.repl/doc"
  {:comments
   [{:namespace_id 342,
     :ns "clojure.repl",
     :updated_at "2012-10-13 03:57:47.0",
     :user_id 524,
     :function "doc",
     :version "1.3.0",
     :created_at "2012-10-13 03:57:47.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Note that the clojure.repl namespace which contains doc is not loaded by default in Emacs' SLIME mode, because SLIME provides its own doc function via C-c C-d d."}],
   :see-alsos
   [{:namespace_id 110,
     :weight 1,
     :name "source",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/2445",
     :line "43",
     :arglists_comp "[n]",
     :url_friendly_name "source",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "dir",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/2447",
     :line "70",
     :arglists_comp "[nsname]",
     :url_friendly_name "dir",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "apropos",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/2446",
     :line "52",
     :arglists_comp "[str-or-pattern]",
     :url_friendly_name "apropos",
     :file "clojure/repl.clj"}],
   :examples
   [{:namespace_id 342,
     :ns "clojure.repl",
     :updated_at "2012-07-18 12:19:24.0",
     :function "doc",
     :version 1,
     :created_at "2012-07-18 12:19:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "=> (doc map)\n;; prints in console:\n-------------------------\nclojure.core/map\n([f coll] [f c1 c2] [f c1 c2 c3] [f c1 c2 c3 & colls])\n  Returns a lazy sequence consisting of the result of applying f to the\n  set of first items of each coll, followed by applying f to the set\n  of second items in each coll, until any one of the colls is\n  exhausted.  Any remaining items in other colls are ignored. Function\n  f should accept number-of-colls arguments."}],
   :id 5970,
   :name "doc",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5970"},
  "clojure.core/char-name-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5406,
   :name "char-name-string",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5406"},
  "clojure.core/eval"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-24 20:46:13.0",
     :user_id 106,
     :function "eval",
     :version "1.2.0",
     :created_at "2011-06-24 20:46:13.0",
     :library "Clojure Core",
     :library_id 3,
     :body "In normal code, `eval` is rarely used."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "read-string",
     :updated_at "2012-08-20 22:21:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1707",
     :line "2894",
     :arglists_comp "[s]",
     :url_friendly_name "read-string",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:52:42.0",
     :function "eval",
     :version 3,
     :created_at "2010-07-30 20:38:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def *foo* \"(println [1 2 3])\")\n#'user/*foo*\n\nuser=> *foo*\n\"(println [1 2 3])\"\n\nuser=> (eval *foo*)   ; Notice eval'ing a string does not work.\n\"(println [1 2 3])\"\n\nuser=> (eval (read-string *foo*))\n[1 2 3]\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-24 20:42:22.0",
     :function "eval",
     :version 1,
     :created_at "2011-06-24 20:42:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (eval '(let [a 10] (+ 3 4 a)))\n17\n"}],
   :id 5492,
   :name "eval",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5492"},
  "swank.util/position"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4018,
   :name "position",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4018"},
  "circumspec.watch/enabled?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3787,
   :name "enabled?",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3787"},
  "clojure.contrib.greatest-least/all-least"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 449,
   :name "all-least",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/449"},
  "clojure.contrib.condition/*condition-object*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 62,
   :name "*condition-object*",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/62"},
  "clojure.contrib.swing-utils/do-swing*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1359,
   :name "do-swing*",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1359"},
  "clojure.core/aset-boolean"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:09:27.0",
     :function "aset-boolean",
     :version 1,
     :created_at "2011-08-21 01:09:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 booleans and set one value to true\n;; using aset-boolean\n\nuser=> (def bs (boolean-array 10))\n#'user/bs\nuser=> (vec bs)\n[false false false false false false false false false false]\nuser=> (aset-boolean bs 2 true)\ntrue\nuser=> (vec bs)\n[false false true false false false false false false false]\nuser=>"}],
   :id 5357,
   :name "aset-boolean",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5357"},
  "clojure.contrib.monads/m-fmap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 783,
   :name "m-fmap",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/783"},
  "incanter.stats/sample-normal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2744,
   :name "sample-normal",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2744"},
  "clojure.contrib.find-namespaces/comment?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 306,
   :name "comment?",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/306"},
  "incanter.processing/width"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3101,
   :name "width",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3101"},
  "clojure.core/float-array"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:53:11.0",
     :function "float-array",
     :version 3,
     :created_at "2010-08-12 05:50:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (float-array [1 2 3])\n#<float[] [F@4d8dfa76>"}],
   :id 5514,
   :name "float-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5514"},
  "clj-swing.tree/clj_swing.tree.proxy$java.lang.Object$TreeModel$fd84fd03"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5214,
   :name "clj_swing.tree.proxy$java.lang.Object$TreeModel$fd84fd03",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5214"},
  "clojure.pprint/formatter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5932,
   :name "formatter",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5932"},
  "clojure.core/get-in"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc-in",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1757",
     :line "4939",
     :arglists_comp "[m [k & ks] v]",
     :url_friendly_name "assoc-in",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "update-in",
     :updated_at "2011-05-10 02:16:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1692",
     :line "4949",
     :arglists_comp "[m [k & ks] f & args]",
     :url_friendly_name "update-in",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:33:04.0",
     :function "get-in",
     :version 5,
     :created_at "2010-07-23 23:32:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; We can use get-in for reaching into nested maps:\nuser=> (def m {:username \"sally\"\n               :profile {:name \"Sally Clojurian\"\n                         :address {:city \"Austin\" :state \"TX\"}}})\n#'user/m\n\nuser=> (get-in m [:profile :name])\n\"Sally Clojurian\"\nuser=> (get-in m [:profile :address :city])\n\"Austin\"\nuser=> (get-in m [:profile :address :zip-code])\nnil\nuser=> (get-in m [:profile :address :zip-code] \"no zip code!\")\n\"no zip code!\"\n\n\n;; Vectors are also associative:\nuser=> (def v [[1 2 3]\n               [4 5 6]\n               [7 8 9]])\n#'user/v\nuser=> (get-in v [0 2])\n3\nuser=> (get-in v [2 1])\n8\n\n\n;; We can mix associative types:\nuser=> (def mv {:username \"jimmy\"\n                :pets [{:name \"Rex\"\n                        :type :dog}\n                       {:name \"Sniffles\"\n                        :type :hamster}]})\n#'user/mv\nuser=> (get-in mv [:pets 1 :type])\n:hamster\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-19 19:09:23.0",
     :function "get-in",
     :version 1,
     :created_at "2012-04-19 19:09:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def s1 [[:000-00-0000 \"TYPE 1\" \"JACKSON\" \"FRED\"]\n         [:000-00-0001 \"TYPE 2\" \"SIMPSON\" \"HOMER\"]\n         [:000-00-0002 \"TYPE 4\" \"SMITH\" \"SUSAN\"]])\n\n(def cols [0 2 3])\n\n(defn f1 \n  [s1 col] \n  (map #(get-in s1 [% col] nil) (range (count s1))))\n\n(apply interleave (map (partial f1 s1) cols))\n\n(:000-00-0000 \"JACKSON\" \"FRED\" :000-00-0001 \"SIMPSON\" \"HOMER\" :000-00-0002 \"SMITH\" \"SUSAN\")"}],
   :id 5536,
   :name "get-in",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5536"},
  "clojure.contrib.seq/indexed"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 244,
   :name "indexed",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/244"},
  "clojure.contrib.greatest-least/all-least-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 448,
   :name "all-least-by",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/448"},
  "incanter.charts/histogram"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2820,
   :name "histogram",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2820"},
  "clojure.core/disj"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "dissoc",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2091",
     :line "1164",
     :arglists_comp "[map]|[map key]|[map key & ks]",
     :url_friendly_name "dissoc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "disj!",
     :updated_at "2011-06-10 14:01:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2109",
     :line "2593",
     :arglists_comp "[set]|[set key]|[set key & ks]",
     :url_friendly_name "disj!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:53:39.0",
     :function "disj",
     :version 4,
     :created_at "2010-07-28 11:05:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (disj #{1 2 3}) ; disjoin nothing \n#{1 2 3} \n\nuser=> (disj #{1 2 3} 2) ; disjoin 2\n#{1 3} \n\nuser=> (disj #{1 2 3} 4) ; disjoin not existed item\n#{1 2 3} \n\nuser=> (disj #{1 2 3} 1 3) ; disjoin several items at once\n#{2}"}],
   :id 5468,
   :name "disj",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5468"},
  "clojure.core/delay?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "delay",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1986",
     :line "619",
     :arglists_comp "[& body]",
     :url_friendly_name "delay",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-20 21:04:26.0",
     :function "delay?",
     :version 2,
     :created_at "2011-06-20 21:02:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def v (delay (do (println \"start sleeping\") \n                         (Thread/sleep 1000) \n                         10)))\n#'user/v\nuser=> (delay? v)\ntrue\nuser=> (force v)\nstart sleeping\n10\nuser=> (delay? v)\ntrue\nuser=> (force v)\n10\nuser=> "}],
   :id 5461,
   :name "delay?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5461"},
  "clojure.contrib.def/defvar-"
  {:comments [],
   :see-alsos
   [{:namespace_id 20,
     :weight 0,
     :name "defvar",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/31",
     :line "23",
     :arglists_comp "[name]|[name init]|[name init doc]",
     :url_friendly_name "defvar",
     :file "clojure/contrib/def.clj"}],
   :examples [],
   :id 25,
   :name "defvar-",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/25"},
  "clojure.core/read-string"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-10 08:54:15.0",
     :user_id 202,
     :function "read-string",
     :version "1.2.0",
     :created_at "2010-11-10 08:54:15.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "read-string is useful for running clojure code from a script or translator."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "pr-str",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1859",
     :line "3694",
     :arglists_comp "[& xs]",
     :url_friendly_name "pr-str",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "str",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1878",
     :line "449",
     :arglists_comp "[]|[x]|[x & ys]",
     :url_friendly_name "str",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "read",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1635",
     :line "2872",
     :arglists_comp
     "[]|[stream]|[stream eof-error? eof-value]|[stream eof-error? eof-value recursive?]",
     :url_friendly_name "read",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "load-string",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/1939",
     :line "3154",
     :arglists_comp "[s]",
     :url_friendly_name "load-string",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "*read-eval*",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1648",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "*read-eval*",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:46:10.0",
     :function "read-string",
     :version 3,
     :created_at "2010-08-24 00:26:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (read-string \"1.1\")          \n1.1\n\nuser=> (read-string \"1.1.1 (+ 1 1)\")\njava.lang.RuntimeException: java.lang.NumberFormatException: Invalid number: 1.1.1 (NO_SOURCE_FILE:0)\n\nuser=> (read-string \"(+ 1 1)\")\n(+ 1 1)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-13 20:50:30.0",
     :function "read-string",
     :version 2,
     :created_at "2010-11-10 08:53:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (eval (read-string \"(+ 1 1)\"))\n2\n\nuser=> (read-string (prn-str (+ 1 1)))\n2\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-01 15:32:37.0",
     :function "read-string",
     :version 1,
     :created_at "2010-12-01 15:32:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (+ 11 (read-string \"23\"))\n34\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-26 01:55:53.0",
     :function "read-string",
     :version 2,
     :created_at "2012-04-26 01:52:47.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (read-string \"; foo\\n5\")\n5\n\nuser=> (read-string \"#^String x\")\nx\n\nuser=> (read-string \"(1)\")\n(1)\n\nuser=> (read-string \"(+ 1 2) (- 3 2)\")\n(+ 1 2)\n\nuser=> (read-string \"@a\")\n(clojure.core/deref a)\n\nuser=> (read-string \"(+ 1 2))))))\")\n(+ 1 2)\n\nuser=> (read-string \"::whatever-namespace-you-are-in\")\n:user/whatever-namespace-you-are-in"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-08-20 22:23:20.0",
     :function "read-string",
     :version 2,
     :created_at "2012-08-20 22:21:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";convert a string representing a sequence,\n;to the sequence that the string represents\nuser=> (read-string \"(\\\\( \\\\x \\\\y \\\\) \\\\z)\")\n(\\( \\x \\y \\) \\z)\n\n;then you can convert to the string that the string-sequence represents\nuser=> (apply str (read-string \"(\\\\( \\\\x \\\\y \\\\) \\\\z)\"))\n\"(xy)z\"\n\n;which is the inverse of\nuser=> (str (first (list (seq \"(xy)z\"))))\n\"(\\\\( \\\\x \\\\y \\\\) \\\\z)\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-05 04:19:54.0",
     :function "read-string",
     :version 1,
     :created_at "2012-09-05 04:19:54.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; you can think of read-string as the inverse of pr-str\n;; turn string into symbols\nuser=> (read-string \"(a b foo :bar)\")\n(a b foo :bar)\n\n;;turn symbols into a string\nuser=> (pr-str '(a b foo :bar))\n\"(a b foo :bar)\""}],
   :id 5704,
   :name "read-string",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5704"},
  "ring.handler.dump/req-pair"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2633,
   :name "req-pair",
   :ns "ring.handler.dump",
   :url "http://clojuredocs.org/v/2633"},
  "clojure.core/future-call"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-08 21:33:38.0",
     :function "future-call",
     :version 1,
     :created_at "2012-05-08 21:33:38.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; future-call is used to implement 'future'.  See examples for 'future'\n;; for discussion of an undesirable 1-minute wait that can occur before\n;; your standalone Clojure program exits if you do not use shutdown-agents."}],
   :id 5527,
   :name "future-call",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5527"},
  "clojure.contrib.dataflow/get-value"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 141,
   :name "get-value",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/141"},
  "incanter.processing/shininess"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3100,
   :name "shininess",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3100"},
  "incanter.charts/bar-chart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2781,
   :name "bar-chart",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2781"},
  "clojure.contrib.ns-utils/print-docs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 738,
   :name "print-docs",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/738"},
  "clojure.core/false?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:54:04.0",
     :function "false?",
     :version 3,
     :created_at "2010-07-09 22:12:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(false? false) ;=> true\n(false? true) ;=> false\n(false? nil) ;=> false\n(false? \"foo\") ;=> false"}],
   :id 5501,
   :name "false?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5501"},
  "incanter.core/$order"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2874,
   :name "$order",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2874"},
  "swank.commands.inspector/inspect-object"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4219,
   :name "inspect-object",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4219"},
  "clojure.contrib.monads/fetch-val"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 805,
   :name "fetch-val",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/805"},
  "clojure.contrib.pprint.column-writer/*default-page-width*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 879,
   :name "*default-page-width*",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/879"},
  "clojure.contrib.mock/make-mock"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5249,
   :name "make-mock",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5249"},
  "swank.core/break"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4003,
   :name "break",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4003"},
  "incanter.processing/POSTERIZE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3106,
   :name "POSTERIZE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3106"},
  "clojure.contrib.generic.math-functions/sqrt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 411,
   :name "sqrt",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/411"},
  "clojure.contrib.stream-utils/stream-flatten"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1304,
   :name "stream-flatten",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1304"},
  "swank.commands.basic/set-default-directory"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4052,
   :name "set-default-directory",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4052"},
  "clojure.test/assert-predicate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6024,
   :name "assert-predicate",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6024"},
  "clojure.contrib.io/append-output-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 514,
   :name "append-output-stream",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/514"},
  "clojure.core/numerator"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "denominator",
     :updated_at "2011-08-16 03:11:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1865",
     :line "2755",
     :arglists_comp "[r]",
     :url_friendly_name "denominator",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-22 00:59:15.0",
     :function "numerator",
     :version 1,
     :created_at "2011-08-22 00:59:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; note that the function always returns the numerator of the reduced fraction\n\nuser=> (map numerator [(/ 2 4) (/ 4 6) (/ 6 8)])\n(1 2 3)\n"}],
   :id 5647,
   :name "numerator",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5647"},
  "clojure.contrib.types/deftype-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1296,
   :name "deftype-",
   :ns "clojure.contrib.types",
   :url "http://clojuredocs.org/v/1296"},
  "clojure.contrib.monads/monad"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 786,
   :name "monad",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/786"},
  "clojure.contrib.generic.collection/conj"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 17:00:57.0",
     :function "conj",
     :version 3,
     :created_at "2011-11-29 16:47:42.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Adds a single element to a vector (note with vectors, item is added to the end)\n\n(conj [:a :b :c] :d)\n\n=> [:a :b :c :d]"}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 17:01:11.0",
     :function "conj",
     :version 2,
     :created_at "2011-11-29 16:52:43.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Adds a variable number of elements to a vector ('& xs' in the function definition means to accept a variable number of parameters).  Note with vectors, item is added to the end\n\n(conj [:a :b :c] :d :e :f :g)\n\n=> [:a :b :c :d :e :f :g]"}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 17:26:04.0",
     :function "conj",
     :version 2,
     :created_at "2011-11-29 17:02:21.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Adds items to a list.  Note items are added to front of list and end up in reverse order because each individual item is added to the front of the list sequentially\n(conj '(1 2 3) :a :b :c)\n\n=> (:c :b :a 1 2 3)"}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 17:25:14.0",
     :function "conj",
     :version 1,
     :created_at "2011-11-29 17:25:14.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Add a list to an empty list.  Note the list remains intact and becomes a list within a list\n(conj () '(1 2 3 4))\n\n=> ((1 2 3 4))"}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 17:27:23.0",
     :function "conj",
     :version 1,
     :created_at "2011-11-29 17:27:23.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Adds a list to a vector.  Note list remains intact and is added at the end of the vector as a list within the vector.\n(conj [:a :b :c] '(1 2 3 4))\n\n=> [:a :b :c (1 2 3 4)]"}],
   :id 392,
   :name "conj",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/392"},
  "clojure.pprint/print-length-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5942,
   :name "print-length-loop",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5942"},
  "clojure.contrib.str-utils2/codepoints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1274,
   :name "codepoints",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1274"},
  "circumspec.watch/watch-agent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3785,
   :name "watch-agent",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3785"},
  "net.licenser.sandbox.tester/new-object-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5105,
   :name "new-object-tester",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5105"},
  "net.cgrand.enlive-html/tag="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3886,
   :name "tag=",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3886"},
  "clojure.core/if"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "cond",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1553",
     :line "491",
     :arglists_comp "[& clauses]",
     :url_friendly_name "cond",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "when",
     :updated_at "2011-07-27 13:21:24.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2050",
     :line "419",
     :arglists_comp "[test & body]",
     :url_friendly_name "when",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "if-let",
     :updated_at "2011-05-19 15:27:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1953",
     :line "1403",
     :arglists_comp "[bindings then]|[bindings then else & oldform]",
     :url_friendly_name "if-let",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "if-not",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1537",
     :line "638",
     :arglists_comp "[test then]|[test then else]",
     :url_friendly_name "if-not",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-04 04:47:09.0",
     :function "if",
     :version 2,
     :created_at "2010-10-27 16:30:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn is-small? [number]\n  (if (< number 100) \"yes\" \"no\"))\n\nuser=> (is-small? 50)\n\"yes\"\n\nuser=> (is-small? 500)\n\"no\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-13 22:18:22.0",
     :function "if",
     :version 4,
     :created_at "2012-04-12 22:00:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Be aware that the only two values considered \"logical false\" in Clojure\n;; are nil and false, where Clojure's \"false\" is the Java value Boolean/FALSE\n;; under the hood.  Everything else is \"logical true\".  Particularly surprising\n;; may be that the Java Object with class Boolean and value (Boolean. false) is\n;; considered logical true.\n\n;; This notion of logical true and logical false holds for at least the following\n;; conditional statements in Clojure: if, cond, when, if-let, when-let.\n;; It also applies to functions like filter, remove, and others that use\n;; these conditional statements in their implementation.\n\n;; nil and false are logical false\nuser=> (if nil \"logical true\" \"logical false\")\n\"logical false\"\nuser=> (if false \"logical true\" \"logical false\")\n\"logical false\"\n;; Boolean/FALSE is how Clojure's \"false\" is represented internally.\nuser=> (if Boolean/FALSE \"logical true\" \"logical false\")\n\"logical false\"\n\n;; Everything else that is the value of the condition, including numbers,\n;; characters, strings, vectors, maps, _and_ a freshly constructed Boolean class\n;; object (Boolean. false), is logical true.\n\nuser=> (if 1 \"logical true\" \"logical false\")\n\"logical true\"\n;; A vector containing nil is not the same as nil.\nuser=> (if [nil] \"logical true\" \"logical false\")\n\"logical true\"\nuser=> (if (first [nil]) \"logical true\" \"logical false\")\n\"logical false\"\n\n;; Bad idea even in Java.  See below for more details.\nuser=> (if (Boolean. false) \"logical true\" \"logical false\")\n\"logical true\"\n\n;; Java documentation itself warns:\n;; Note: It is rarely appropriate to use this constructor. Unless a new instance\n;; is required, the static factory valueOf(boolean) is generally a better choice.\n;; It is likely to yield significantly better space and time performance.\n\n;; (boolean x) converts a value to a primitive boolean.  It converts nil, false,\n;; and (Boolean. false) to primitive false.\nuser=> (if (boolean (Boolean. false)) \"logical true\" \"logical false\")\n\"logical false\"\n\n;; (Boolean/valueOf <val>) is similar:\nuser=> (if (Boolean/valueOf (Boolean. false)) \"logical true\" \"logical false\")\n\"logical false\"\n"}],
   :id 6126,
   :name "if",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6126"},
  "clojure.contrib.command-line/with-command-line"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 6,
     :ns "clojure.contrib.command-line",
     :updated_at "2010-09-26 02:07:36.0",
     :function "with-command-line",
     :version 4,
     :created_at "2010-09-04 16:44:38.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; with-command-line takes:\n\n;; * args â€“ the list of incoming args we want to process, such as from a main()\n;;          call\n;; * desc â€“ the usage description to print with â€“help\n;; * cmdspec â€“ a list of options and for each a help description and default value\n;; * body â€“ the body to execute in the context of the command-line values\n\n;; Here's a simple example:\n\n(defn -main [& args]\n  (with-command-line\n    args\n    \"Usage: wc [-l|-w|-c] [-out out.txt] ...\"\n    [[lines? l? \"Count lines\" false]\n     [words? w? \"Count words\" false]\n     [chars? c? \"Count chars\" false]\n     [out \"The output file\"]\n     files]\n    ...implementation...   ))\n\n\n;; Here, lines?, words?, chars? specify boolean options.  l?, w?, and c? are \n;; alternate short forms for them.  The string is a help description and the last\n;; value is the default.  out is a text option.  file is a seq of additional\n;; strings read at the end of the command-line.  \n\n;; All of the named cmdspec options (lines?, l?, out, etc) are given the value\n;; specified by reading from the command-line, so you can see this kind of like\n;; a let form."}],
   :id 45,
   :name "with-command-line",
   :ns "clojure.contrib.command-line",
   :url "http://clojuredocs.org/v/45"},
  "net.cgrand.enlive-html/cacheable?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3888,
   :name "cacheable?",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3888"},
  "incanter.processing/curve-tangent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3166,
   :name "curve-tangent",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3166"},
  "clojure.core/*'"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5284,
   :name "*'",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5284"},
  "swank.swank/start-repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4315,
   :name "start-repl",
   :ns "swank.swank",
   :url "http://clojuredocs.org/v/4315"},
  "swank.commands.inspector/*inspectee-parts*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4222,
   :name "*inspectee-parts*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4222"},
  "incanter.som/som-batch-train"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3269,
   :name "som-batch-train",
   :ns "incanter.som",
   :url "http://clojuredocs.org/v/3269"},
  "clojure.inspector/get-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5865,
   :name "get-child",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5865"},
  "clojure.core/assoc-in"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1702",
     :line "161",
     :arglists_comp "[map key val]|[map key val & kvs]",
     :url_friendly_name "assoc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "update-in",
     :updated_at "2011-05-10 02:16:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1692",
     :line "4949",
     :arglists_comp "[m [k & ks] f & args]",
     :url_friendly_name "update-in",
     :file "clojure/core.clj"}
    {:namespace_id 11,
     :weight 1,
     :name "dissoc-in",
     :updated_at "2011-09-02 11:27:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/99",
     :line "57",
     :arglists_comp "[m [k & ks :as keys]]",
     :url_friendly_name "dissoc-in",
     :file "clojure/contrib/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-in",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1581",
     :line "4921",
     :arglists_comp "[m ks]|[m ks not-found]",
     :url_friendly_name "get-in",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 05:22:12.0",
     :function "assoc-in",
     :version 3,
     :created_at "2010-07-12 09:58:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def users [{:name \"James\" :age 26}  {:name \"John\" :age 43}])\n \nuser=> (assoc-in users [1 :age] 44)\n[{:name \"James\", :age 26} {:name \"John\", :age 44}]\n\nuser=> (assoc-in users [1 :password] \"nhoJ\")\n[{:name \"James\", :age 26} {:password \"nhoJ\", :name \"John\", :age 43}]\n\n;; Also (assoc m 2 {...}) or (conj m {...})\nuser=> (assoc-in users [2] {:name \"Jack\" :age 19})  \n[{:name \"James\", :age 26} {:name \"John\", :age 43} {:name \"Jack\", :age 19}]\n\n\n\n\n;; From http://clojure-examples.appspot.com/clojure.core/assoc-in"}],
   :id 5368,
   :name "assoc-in",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5368"},
  "clojure.contrib.mock.test-adapter/more-than"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 727,
   :name "more-than",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/727"},
  "clojure.contrib.zip-filter.xml/seq-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1444,
   :name "seq-test",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1444"},
  "clojure.core/lazy-cat"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "lazy-seq",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2044",
     :line "557",
     :arglists_comp "[& body]",
     :url_friendly_name "lazy-seq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "concat",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1691",
     :line "592",
     :arglists_comp "[]|[x]|[x y]|[x y & zs]",
     :url_friendly_name "concat",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-17 14:43:49.0",
     :function "lazy-cat",
     :version 1,
     :created_at "2011-01-17 14:43:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (lazy-cat [1 2 3] [4 5 6])\n(1 2 3 4 5 6)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-11 16:26:20.0",
     :function "lazy-cat",
     :version 3,
     :created_at "2012-03-26 09:01:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; N.B. this example holds onto the head of a lazy seq which should generally be avoided\n(def fib-seq\n     (lazy-cat [0 1] (map + (rest fib-seq) fib-seq)))\n\n(take 10 fib-seq)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-14 14:55:23.0",
     :function "lazy-cat",
     :version 3,
     :created_at "2012-12-14 14:25:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; When the producer function produces a collection, not an element,\n;; lazy-cat is usable.\nuser=> (defn n-repeat [n] (lazy-cat (repeat n n) (n-repeat (inc n))))\n#'user/n-repeat\n\nuser=> (take 6 (j 1))\n(1 2 2 3 3 3)\n\nuser=> (take 12 (j 1))\n(1 2 2 3 3 3 4 4 4 4 5 5)\n"}],
   :id 5578,
   :name "lazy-cat",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5578"},
  "swank.core/dispatch-event"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4109,
   :name "dispatch-event",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4109"},
  "clojure.contrib.core/new-by-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 92,
   :name "new-by-name",
   :ns "clojure.contrib.core",
   :url "http://clojuredocs.org/v/92"},
  "incanter.processing/bezier"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3123,
   :name "bezier",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3123"},
  "clojure.contrib.mock.test-adapter/unexpected-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 741,
   :name "unexpected-args",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/741"},
  "clj-swing.document/add-str-ref-doc-listener"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5177,
   :name "add-str-ref-doc-listener",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5177"},
  "clojure.contrib.pprint/*print-circle*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1025,
   :name "*print-circle*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1025"},
  "incanter.processing/reset-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3053,
   :name "reset-matrix",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3053"},
  "clojure.core/double-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "doubles",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1710",
     :line "4237",
     :arglists_comp "[xs]",
     :url_friendly_name "doubles",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aget",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2016",
     :line "2987",
     :arglists_comp "[array idx]|[array idx & idxs]",
     :url_friendly_name "aget",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aset",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1804",
     :line "2998",
     :arglists_comp "[array idx val]|[array idx idx2 & idxv]",
     :url_friendly_name "aset",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aset-double",
     :updated_at "2011-08-21 01:17:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1892",
     :line "3041",
     :arglists_comp "[array idx val]|[array idx idx2 & idxv]",
     :url_friendly_name "aset-double",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-20 23:07:12.0",
     :function "double-array",
     :version 1,
     :created_at "2011-08-20 23:07:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a double array using double-array\n;; and show it can be used with the standard Java functions\n;; binarySearch and fill\n\nuser=> (def ds (double-array (range 3 20)))\n#'user/ds\nuser=> (type ds)\n[D\nuser=> (vec ds)\n[3.0 4.0 5.0 6.0 7.0 8.0 9.0 10.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19.0]\nuser=> (java.util.Arrays/binarySearch ds 10.0)\n7\nuser=> (java.util.Arrays/fill ds 3 8 99.0)\nnil\nuser=> (vec ds)\n[3.0 4.0 5.0 99.0 99.0 99.0 99.0 99.0 11.0 12.0 13.0 14.0 15.0 16.0 17.0 18.0 19\n.0]\nuser=>"}],
   :id 5481,
   :name "double-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5481"},
  "clojure.contrib.http.agent/status"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 460,
   :name "status",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/460"},
  "swank.commands.basic/eval-string-in-frame"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4107,
   :name "eval-string-in-frame",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4107"},
  "clojure.contrib.monads/with-state-field"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 803,
   :name "with-state-field",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/803"},
  "clojure.contrib.ns-utils/get-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 748,
   :name "get-ns",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/748"},
  "incanter.processing/degrees"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3041,
   :name "degrees",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3041"},
  "clj-ssh.ssh/add-identity"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1485,
   :name "add-identity",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1485"},
  "clojure.core/parents"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "descendants",
     :updated_at "2011-08-21 16:07:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1641",
     :line "4450",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "descendants",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "ancestors",
     :updated_at "2011-08-21 16:22:26.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1968",
     :line "4434",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "ancestors",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "derive",
     :updated_at "2011-08-10 13:56:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1595",
     :line "4462",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "derive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "underive",
     :updated_at "2011-08-21 14:30:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1964",
     :line "4498",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "underive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "make-hierarchy",
     :updated_at "2011-08-20 20:11:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1637",
     :line "4367",
     :arglists_comp "[]",
     :url_friendly_name "make-hierarchy",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "isa?",
     :updated_at "2011-08-10 13:56:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1711",
     :line "4400",
     :arglists_comp "[child parent]|[h child parent]",
     :url_friendly_name "isa_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 16:03:33.0",
     :function "parents",
     :version 1,
     :created_at "2011-08-21 16:03:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; simple example showing single parented derivation\n;; then adding another parent\n\nuser=> (derive ::toy_poodle ::poodle)\nnil\nuser=> (parents ::toy_poodle)\n#{:user/poodle}\nuser=> (derive ::toy_poodle ::toy_dogs)\nnil\nuser=> (parents ::toy_poodle)\n#{:user/poodle :user/toy_dogs}\nuser=>"}],
   :id 5651,
   :name "parents",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5651"},
  "clj-swing.list/add-list-selection-listener"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5225,
   :name "add-list-selection-listener",
   :ns "clj-swing.list",
   :url "http://clojuredocs.org/v/5225"},
  "clojure.contrib.datalog.literals/get-adorned-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 209,
   :name "get-adorned-bindings",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/209"},
  "clojure.contrib.monads/call-cc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 785,
   :name "call-cc",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/785"},
  "incanter.core/decomp-cholesky"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2746,
   :name "decomp-cholesky",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2746"},
  "circumspec.watch/load-test-namespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3770,
   :name "load-test-namespace",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3770"},
  "net.cgrand.enlive-html/fragment-selector?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3915,
   :name "fragment-selector?",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3915"},
  "clojure.string/replace-first"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 2,
     :name "replace",
     :updated_at "2011-01-15 03:53:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2480",
     :line "63",
     :arglists_comp "[s match replacement]",
     :url_friendly_name "replace",
     :file "clojure/string.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-pattern",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1496",
     :line "3745",
     :arglists_comp "[s]",
     :url_friendly_name "re-pattern",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2011-12-14 19:37:54.0",
     :function "replace-first",
     :version 3,
     :created_at "2011-12-14 19:31:57.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use '[clojure.string :only (replace-first)])\n\n;; Only replace the first match.\nuser=> (replace-first \"A good day to you, sir.  Good day.\" #\"day\" \"night\")\n\"A good night to you, sir.  Good day.\"\n\n;; If there are no matches, return the original string.\nuser=> (replace-first \"A good day to you, sir.\" #\"madam\" \"master\")\n\"A good day to you, sir.\"\n\n;; (?i) at the beginning of a pattern makes the entire thing match\n;; case-insensitively, at least for US ASCII characters.  (?u) does\n;; the corresponding thing for Unicode.\nuser=> (replace-first \"Day need not be SHOUTED.\" #\"(?i)day\" \"night\")\n\"night need not be SHOUTED.\"\n\n;; See here for many details on regex patterns:\n;; http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html\n;; Also the book \"Mastering Regular Expressions\" by Jeffrey Friedl.\n"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2011-12-14 19:32:14.0",
     :function "replace-first",
     :version 1,
     :created_at "2011-12-14 19:32:14.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use '[clojure.string :only (replace-first)])\n\n;; Pattern matches from beginning of string (signified by ^) up to the\n;; last occurrence of /, because by default * is greedy, i.e. it\n;; matches as much as possible.\nuser=> (replace-first \"/path/to/file/name\" #\"^.*/\" \"\")\n\"name\"\n\n;; Use *? to match as little as possible.\nuser=> (replace-first \"/path/to/file/name\" #\"^.*?/\" \"\")\n\"path/to/file/name\"\n"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2011-12-31 22:58:01.0",
     :function "replace-first",
     :version 2,
     :created_at "2011-12-20 22:45:16.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Note: When replace-first or replace have a regex pattern as their\n;; match argument, dollar sign ($) and backslash (\\) characters in\n;; the replacement string are treated specially.\n\n;; Example: pattern matches string \"fodder\", with (o+) matching \"o\"\n;; and (\\S+) matching \"dder\".  Replacement string says to replace the\n;; entire match \"fodder\" with $2, the string matched by the second\n;; parenthesized group, \"dder\", followed by $1, \"o\".\nuser=> (str/replace-first \"fabulous fodder foo food\" #\"f(o+)(\\S+)\" \"$2$1\")\n\"fabulous ddero foo food\"\n\n;; To avoid this special treatment of $ and \\, you must escape them with\n;; \\.  Because it is in a Clojure string, to get one \\ we must escape\n;; *that* with its own \\.\nuser=> (str/replace-first \"fabulous fodder foo food\" #\"f(o+)(\\S+)\" \"\\\\$2\\\\$1\")\n\"fabulous $2$1 foo food\"\n\n;; To ensure the replacement is treated literally, call\n;; java.util.regex.Matcher/quoteReplacement on it.  A shorter name\n;; like re-qr can be handy.\nuser=> (import '(java.util.regex Matcher))\njava.util.regex.Matcher\n\nuser=> (defn re-qr [replacement]\n         (Matcher/quoteReplacement replacement))\n#'user/re-qr\n\nuser=> (str/replace-first \"fabulous fodder foo food\" #\"f(o+)(\\S+)\" (re-qr \"$2$1\"))\n\"fabulous $2$1 foo food\"\n"}],
   :id 6003,
   :name "replace-first",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6003"},
  "clojure.zip/insert-left"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6104,
   :name "insert-left",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6104"},
  "clj-swing.panel/shelf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5196,
   :name "shelf",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5196"},
  "clojure.contrib.core/-?>>"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 90,
   :name "-?>>",
   :ns "clojure.contrib.core",
   :url "http://clojuredocs.org/v/90"},
  "incanter.processing/no-tint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3246,
   :name "no-tint",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3246"},
  "leiningen.help/help-summary-for"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3538,
   :name "help-summary-for",
   :ns "leiningen.help",
   :url "http://clojuredocs.org/v/3538"},
  "net.cgrand.enlive-html/any-node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3860,
   :name "any-node",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3860"},
  "clojure.core/xml-seq"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-10 22:47:38.0",
     :function "xml-seq",
     :version 1,
     :created_at "2013-01-10 22:47:38.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; data.xml from https://github.com/clojure/data.xml/\n(use '[clojure.data.xml :only [parse-str]])\n\nuser=> (let [xml-text \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n                      <foo key=\\\"val\\\">1<bar>2</bar>3</foo>\"]\n         (let [root (parse-str xml-text)]\n           (xml-seq root)))\n\n({:tag :foo,                                                   \n  :attrs {:key \"val\"},                                         \n  :content (\"1\" {:tag :bar, :attrs {}, :content (\"2\")} \"3\")}   \n \"1\"                                                           \n {:tag :bar, :attrs {}, :content (\"2\")}                        \n \"2\"                                                           \n \"3\")                                                          \n"}],
   :id 5852,
   :name "xml-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5852"},
  "clojure.contrib.str-utils2/tail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1293,
   :name "tail",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1293"},
  "clojure.contrib.server-socket/create-server"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 78,
     :ns "clojure.contrib.server-socket",
     :updated_at "2010-10-03 07:15:38.0",
     :function "create-server",
     :version 4,
     :created_at "2010-10-03 05:00:27.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; A Simple server that dumps the input stream to the output stream.\n;; In this example, the create-server function is called with two\n;; arguments, a port number and an anonymous function. The input\n;; and output stream arguments passed to the anonymous function are\n;; bound to the standard input and output respectively.\n\n(use 'clojure.contrib.server-socket)\n(import  '(java.io BufferedReader InputStreamReader PrintWriter))\n\nuser=> (create-server\n         8080\n         (fn [in out]\n           (binding\n             [*in* (BufferedReader. (InputStreamReader. in))\n              *out* (PrintWriter. out)]\n             (loop []\n               (println (read-line))\n               (recur)))))\n\n{:server-socket #&lt;ServerSocket ServerSocket[addr=0.0.0.0/0.0.0.0,port=0,localport=8080]&gt;, :connections #&lt;Ref@73f17a73: #{}&gt;}"}],
   :id 1193,
   :name "create-server",
   :ns "clojure.contrib.server-socket",
   :url "http://clojuredocs.org/v/1193"},
  "clojure.core/set?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "set",
     :updated_at "2010-11-15 00:53:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1848",
     :line "3163",
     :arglists_comp "[coll]",
     :url_friendly_name "set",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 18:03:07.0",
     :function "set?",
     :version 1,
     :created_at "2010-12-29 18:03:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (set? #{1 2 3})\ntrue\n\nuser> (set? [1 2 3])\nfalse\n\nuser> (set? {:a 1 :b 2})\nfalse"}],
   :id 5752,
   :name "set?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5752"},
  "clojure.core/for"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-23 22:21:14.0",
     :user_id 93,
     :function "for",
     :version "1.2.0",
     :created_at "2010-07-23 22:21:14.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "My English parser was choking on the description of this function.\n\n[This SO question](http://stackoverflow.com/questions/3322552/how-do-i-multiply-all-elements-in-one-collection-with-all-the-elements-in-another) has helped clarify how this function works."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-23 22:39:24.0",
     :user_id 96,
     :function "for",
     :version "1.2.0",
     :created_at "2010-07-23 22:39:24.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Example 1 can be rewritten without using the for macro. Pure functional should be preferred if possible:\n<pre>\n(filter even? (map (partial * 3)  [0 1 2 3 4 5]))\n</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 18:07:27.0",
     :user_id 342,
     :function "for",
     :version "1.2.0",
     :created_at "2011-08-21 17:43:04.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "On juergenhoetzel's comment:\n\nAll the examples could be re-written in some combination of map and filter, but they are still valid examples of using the for comprehension, AFAIK:\n\nExamples:\n<pre>user=&gt; (mapcat (fn [e] (map (fn [x] (* x e)) [1 2 3])) [1 2 3])\n(1 2 3 2 4 6 3 6 9)\nuser=&gt; (mapcat (fn [e] (map (fn [x] [e x]) [1 2 3])) ['a 'b 'c])\n([a 1] [a 2] [a 3] [b 1] [b 2] [b 3] [c 1] [c 2] [c 3])\nuser=&gt; (map (fn [e] [e (* e e)(* e e e)]) (range 1 6))\n([1 1 1] [2 4 8] [3 9 27] [4 16 64] [5 25 125])\nuser=&gt; (map (fn [e] (* e e)) (range 3 7))\n(9 16 25 36)\nuser=&gt; (map first (filter (fn [[x y]] (= y 0)) '([:a 1] [:b 2] [:c 0])))\n(:c)\nuser=&gt;\n</pre>\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-26 12:28:12.0",
     :user_id 799,
     :function "for",
     :version "1.3.0",
     :created_at "2012-12-26 12:25:40.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Take careful note of the description's wording:\n\n    binding-form/collection-expr pairs, \n    each followed by zero or more modifiers\n\nA consequence is that the binding list may *not* begin with a modifier, i.e a `:let`, `:when` or `:while`!\n\nThe following example is **illegal** syntax:\n\n    (for [:let [a 1] b (range 5)] \n      {a b})\n\nWhile it might sometimes be convenient to start a `for` with a `:let` to reduce code clutter, the \"correct\" procedure is to nest the `for` in a \"proper\" `let`, like this:\n\n    (let [a 1]\n      (for [b (range 5)] \n        {a b}))\n\nSimilarly, a `:when` is better represented by nesting in an `if`.\n\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 5,
     :name "doseq",
     :updated_at "2011-02-15 19:43:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1534",
     :line "2384",
     :arglists_comp "[seq-exprs & body]",
     :url_friendly_name "doseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "doall",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1806",
     :line "2456",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "doall",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 01:05:38.0",
     :function "for",
     :version 3,
     :created_at "2010-07-17 10:40:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (for [x [0 1 2 3 4 5]\n             :let [y (* x 3)]\n             :when (even? y)]\n         y)\n(0 6 12)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:55:11.0",
     :function "for",
     :version 4,
     :created_at "2010-07-23 21:54:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def digits (seq [1 2 3]))\nuser=> (for [x1 digits x2 digits] (* x1 x2))\n(1 2 3 2 4 6 3 6 9)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:55:29.0",
     :function "for",
     :version 3,
     :created_at "2010-09-05 12:01:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (for [x ['a 'b 'c] \n             y [1 2 3]] \n          [x y])\n\n([a 1] [a 2] [a 3] [b 1] [b 2] [b 3] [c 1] [c 2] [c 3])"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:36:45.0",
     :function "for",
     :version 5,
     :created_at "2010-09-05 12:06:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (for [x (range 1 6) \n             :let [y (* x x) \n                   z (* x x x)]] \n         [x y z])\n\n([1 1 1] [2 4 8] [3 9 27] [4 16 64] [5 25 125])\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-14 21:29:16.0",
     :function "for",
     :version 2,
     :created_at "2010-12-11 13:13:08.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "(for [x (range 3 7)] \n    (* x x))\n\n(9 16 25 36)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-10 18:07:55.0",
     :function "for",
     :version 1,
     :created_at "2011-05-10 18:07:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (for [[x y] '([:a 1] [:b 2] [:c 0]) :when (= y 0)] x)\n(:c)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-29 10:40:41.0",
     :function "for",
     :version 1,
     :created_at "2012-05-29 10:40:41.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Demonstrating difference between :when and :while\n\nuser=> (time (dorun (for [x (range 1000) y (range 10000) :when (> x y)] [x y])))\n\"Elapsed time: 2898.908 msecs\"\nnil\n\nuser=> (time (dorun (for [x (range 1000) y (range 10000) :while (> x y)] [x y])))\n\"Elapsed time: 293.677 msecs\"\nnil"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-20 23:41:52.0",
     :function "for",
     :version 1,
     :created_at "2012-06-20 23:41:52.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Demonstrating difference between :when and :while\nuser=> (for [x (range 3) y (range 3) :when (not= x y)] [x y])\n([0 1] [0 2] [1 0] [1 2] [2 0] [2 1])\nuser=> (for [x (range 3) y (range 3) :while (not= x y)] [x y])\n([1 0] [2 0] [2 1])"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-23 15:24:32.0",
     :function "for",
     :version 1,
     :created_at "2012-08-23 15:24:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; More examples illustrating the difference between :when and :while\n\n;; Simple but inefficient method of checking whether a number is\n;; prime.\nuser=> (defn prime? [n]\n         (not-any? zero? (map #(rem n %) (range 2 n))))\n#'user/prime?\n\nuser=> (range 3 33 2)\n(3 5 7 9 11 13 15 17 19 21 23 25 27 29 31)\n\n;; :when continues through the collection even if some have the\n;; condition evaluate to false, like filter\nuser=> (for [x (range 3 33 2) :when (prime? x)]\n         x)\n(3 5 7 11 13 17 19 23 29 31)\n\n;; :while stops at the first collection element that evaluates to\n;; false, like take-while\nuser=> (for [x (range 3 33 2) :while (prime? x)]\n         x)\n(3 5 7)\n\n;; The examples above can easily be rewritten with filter or\n;; take-while.  When you have a for with multiple binding forms, so\n;; that the iteration occurs in a nested fashion, it becomes possible\n;; to write something briefly with 'for' that would be more verbose or\n;; unwieldy with nested filter or take-while expressions.\n\nuser=> (for [x (range 3 17 2) :when (prime? x)\n             y (range 3 17 2) :when (prime? y)]\n         [x y])\n([ 3 3] [ 3 5] [ 3 7] [ 3 11] [ 3 13]\n [ 5 3] [ 5 5] [ 5 7] [ 5 11] [ 5 13]\n [ 7 3] [ 7 5] [ 7 7] [ 7 11] [ 7 13]\n [11 3] [11 5] [11 7] [11 11] [11 13]\n [13 3] [13 5] [13 7] [13 11] [13 13])\n\nuser=> (for [x (range 3 17 2) :while (prime? x)\n             y (range 3 17 2) :while (prime? y)]\n         [x y])\n([3 3] [3 5] [3 7]\n [5 3] [5 5] [5 7]\n [7 3] [7 5] [7 7])\n\n;; This example only gives a finite result because of the :while\n;; expressions.\nuser=> (for [x (range) :while (< x 10) \n             y (range) :while (<= y x)]\n         [x y])\n\n([0 0]\n [1 0] [1 1]\n [2 0] [2 1] [2 2]\n [3 0] [3 1] [3 2] [3 3]\n [4 0] [4 1] [4 2] [4 3] [4 4]\n [5 0] [5 1] [5 2] [5 3] [5 4] [5 5]\n [6 0] [6 1] [6 2] [6 3] [6 4] [6 5] [6 6]\n [7 0] [7 1] [7 2] [7 3] [7 4] [7 5] [7 6] [7 7]\n [8 0] [8 1] [8 2] [8 3] [8 4] [8 5] [8 6] [8 7] [8 8]\n [9 0] [9 1] [9 2] [9 3] [9 4] [9 5] [9 6] [9 7] [9 8] [9 9])\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-23 15:24:58.0",
     :function "for",
     :version 1,
     :created_at "2012-08-23 15:24:58.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Here are a couple of examples where the only difference is where\n;; the :while is placed, but it makes a significant difference in the\n;; behavior.\n\n;; When x=2 y=1 is reached, :while (<= x y) evaluates false, so all\n;; further items in the y collection are skipped.  When x=3 y=1 is\n;; reached, the same thing happens.\n\nuser=> (for [x [1 2 3]\n             y [1 2 3]\n             :while (<= x y)\n             z [1 2 3]]\n         [x y z])\n([1 1 1] [1 1 2] [1 1 3]\n [1 2 1] [1 2 2] [1 2 3]\n [1 3 1] [1 3 2] [1 3 3])\n\n;; This is different.  When x=2 y=1 z=1 is reached, :while (<= x y)\n;; evaluates false, but since the :while is after the binding for z,\n;; all further items in the z collection are skipped.  Then x=2 y=2\n;; z=1 is tried, where the while expresssion evaluates true.\n\nuser=> (for [x [1 2 3]\n             y [1 2 3]\n             z [1 2 3]\n             :while (<= x y)]\n         [x y z])\n([1 1 1] [1 1 2] [1 1 3]\n [1 2 1] [1 2 2] [1 2 3]\n [1 3 1] [1 3 2] [1 3 3]\n [2 2 1] [2 2 2] [2 2 3]\n [2 3 1] [2 3 2] [2 3 3]\n [3 3 1] [3 3 2] [3 3 3])\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-27 15:34:52.0",
     :function "for",
     :version 1,
     :created_at "2012-12-27 15:34:52.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn all-files-present?\n\"Takes a list of real file names, and returns a map of files present 1\nand not present 0.\"\n[file-seq]\n(for [fnam file-seq\n :let [stat-map {(keyword fnam) (look-for fnam \"f\")}]]\n  stat-map))\n\n(into {}  (all-files-present? '(\"Makefile\" \"build.sh\" \"real-estate.csv\")))\n\n{:Makefile 1, :build.sh 1, :real-estate.csv 0}"}],
   :id 5522,
   :name "for",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5522"},
  "incanter.core/data-table"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2908,
   :name "data-table",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2908"},
  "clojure.contrib.datalog.literals/project-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 212,
   :name "project-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/212"},
  "swank.core/build-backtrace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4119,
   :name "build-backtrace",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4119"},
  "clojure.core/keyword"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "name",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/1800",
     :line "1240",
     :arglists_comp "[x]",
     :url_friendly_name "name",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "keyword?",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1497",
     :line "471",
     :arglists_comp "[x]",
     :url_friendly_name "keyword_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "namespace",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1858",
     :line "1247",
     :arglists_comp "[x]",
     :url_friendly_name "namespace",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 0,
     :name "find-keyword",
     :updated_at "2011-09-26 06:28:00.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:05:46.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5506",
     :line "560",
     :arglists_comp "[name]|[ns name]",
     :url_friendly_name "find-keyword",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "symbol",
     :updated_at "2010-11-08 06:20:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1624",
     :line "476",
     :arglists_comp "[name]|[ns name]",
     :url_friendly_name "symbol",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-13 06:45:43.0",
     :function "keyword",
     :version 5,
     :created_at "2010-07-30 20:21:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Returns a keyword with the given namespace and name.  Do not use :\n;; in the keyword strings, it will be added automatically.\n;; \n;; (keyword name): name can be string, symbol, or keyword.\n;; \n;; (keyword ns name): ns and name must both be string.\n;; \n;; A keyword string, like a symbol, begins with a non-numeric\n;; character and can contain alphanumeric characters and *, +, !, -,\n;; _, and ?.  (see http://clojure.org/reader for details).\n;; \n;; keyword does not validate input strings for ns and name, and may\n;; return improper keywords with undefined behavior for non-conformant\n;; ns and name.\n\nuser=> (keyword 'foo)\n:foo\n\nuser=> (keyword \"foo\")       \n:foo\n\nuser=> (keyword \"user\" \"foo\")\n:user/foo\n\n;; keyword in current namespace\nuser=> (keyword (str *ns*) \"foo\")\n:user/foo"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-13 16:14:48.0",
     :function "keyword",
     :version 1,
     :created_at "2012-03-13 16:14:48.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; some gotchas to be aware of:\n\nuser=> (keyword \"user\" 'abc)\nClassCastException clojure.lang.Symbol cannot be cast to java.lang.String  clojure.core/keyword (core.clj:558)\nuser=> (keyword *ns* \"abc\")\nClassCastException clojure.lang.Namespace cannot be cast to java.lang.String  clojure.core/keyword (core.clj:558)\nuser=> (keyword 'user \"abc\")\nClassCastException clojure.lang.Symbol cannot be cast to java.lang.String  clojure.core/keyword (core.clj:558)\n\n\n;; Warning - the following generated keywords are non-conformant and may wreak\n;; serious havoc in the near/far future when least expected...\n\nuser=> (keyword \"abc def\")\n:abc def\nuser=> (keyword \"123def\")\n:123def\nuser=> (keyword \"/abc/def/ghi\")\n:/abc/def/ghi\n"}],
   :id 5575,
   :name "keyword",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5575"},
  "swank.util.java/static-fields"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4140,
   :name "static-fields",
   :ns "swank.util.java",
   :url "http://clojuredocs.org/v/4140"},
  "clojure.contrib.graph/add-loops"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 433,
   :name "add-loops",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/433"},
  "clojure.pprint/formatter-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5933,
   :name "formatter-out",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5933"},
  "leiningen.help/get-arglists"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3539,
   :name "get-arglists",
   :ns "leiningen.help",
   :url "http://clojuredocs.org/v/3539"},
  "leiningen.core/defproject"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3520,
   :name "defproject",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3520"},
  "leiningen.pom/read-git-ref"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3568,
   :name "read-git-ref",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3568"},
  "clojure.contrib.pprint/pprint-simple-default"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 935,
   :name "pprint-simple-default",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/935"},
  "clojure.core/char?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "char",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1957",
     :line "2704",
     :arglists_comp "[x]",
     :url_friendly_name "char",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-28 07:12:20.0",
     :function "char?",
     :version 3,
     :created_at "2010-07-28 06:02:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (char? \\a)\ntrue\n\nuser=> (char? 22)\nfalse\n\nuser=> (char? \"a\")\nfalse\n\nuser=> (char? (first \"abc\"))\ntrue"}],
   :id 5407,
   :name "char?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5407"},
  "clojure.core/update-in"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc-in",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1757",
     :line "4939",
     :arglists_comp "[m [k & ks] v]",
     :url_friendly_name "assoc-in",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-in",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1581",
     :line "4921",
     :arglists_comp "[m ks]|[m ks not-found]",
     :url_friendly_name "get-in",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "fnil",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/1949",
     :line "5684",
     :arglists_comp "[f x]|[f x y]|[f x y z]",
     :url_friendly_name "fnil",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 01:04:56.0",
     :function "update-in",
     :version 3,
     :created_at "2010-07-28 06:01:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def users [{:name \"James\" :age 26}  {:name \"John\" :age 43}])\n#'user/users\n\nuser=> (update-in users [1 :age] inc)\n\n[{:name \"James\", :age 26} {:name \"John\", :age 44}]\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-09 19:16:37.0",
     :function "update-in",
     :version 5,
     :created_at "2010-09-06 06:42:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def p {:name \"James\" :age 26})\n#'user/p\n\nuser=> (update-in p [:age] inc)\n{:name \"James\", :age 27}\n\n;; remember, the value of p hasn't changed!\nuser=> (update-in p [:age] + 10)\n{:name \"James\", :age 36}\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-10 02:17:36.0",
     :function "update-in",
     :version 2,
     :created_at "2011-05-10 02:16:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn char-cnt [s]\n  \"Counts occurence of each character in s\"\n  (reduce\n    (fn [m k]\n      (update-in m [k] (fnil inc 0)))\n  {}\n  (seq s)))\n;Note use of fnil above - returns 0 if nil is passed to inc (avoids null pointer exception)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-08 09:42:38.0",
     :function "update-in",
     :version 1,
     :created_at "2012-10-08 09:42:38.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; f has args \nuser=> (update-in {:a 3} [:a] / 4 5)\n{:a 3/20}"}],
   :id 5823,
   :name "update-in",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5823"},
  "incanter.charts/line-chart*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2843,
   :name "line-chart*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2843"},
  "clojure.contrib.datalog.magic/seed-relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 242,
   :name "seed-relation",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/242"},
  "clojure.contrib.generic.math-functions/atan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 410,
   :name "atan",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/410"},
  "clojure.contrib.dataflow/source-cell?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 134,
   :name "source-cell?",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/134"},
  "incanter.stats/pdf-f"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3281,
   :name "pdf-f",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3281"},
  "swank.core/send-repl-results-to-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3991,
   :name "send-repl-results-to-emacs",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3991"},
  "net.cgrand.enlive-html/flatmap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3862,
   :name "flatmap",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3862"},
  "clojure.core/reify"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "proxy",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1990",
     :line "300",
     :arglists_comp "[class-and-interfaces args & fs]",
     :url_friendly_name "proxy",
     :file "clojure/core_proxy.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-10 10:09:48.0",
     :function "reify",
     :version 5,
     :created_at "2011-09-10 09:57:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns foo)\n\n;;; This is a library for the shopping result.\n\n(defrecord Banana [qty])\n(defrecord Grape  [qty])\n(defrecord Orange [qty])\n\n;;; 'subtotal' differs from each fruit.\n\n(defprotocol Fruit\n  (subtotal [item]))\n\n(extend-type Banana\n  Fruit\n  (subtotal [item]\n    (* 158 (:qty item))))\n\n(extend-type Grape\n  Fruit\n  (subtotal [item]\n    (* 178 (:qty item))))\n\n(extend-type Orange\n  Fruit\n  (subtotal [item]\n    (* 98 (:qty item))))\n\n;;; 'coupon' is the function returing a 'reify' of subtotal. This is\n;;; when someone uses a coupon ticket, the price of some fruits is \n;;; taken off 25%.\n\n(defn coupon [item]\n  (reify Fruit\n    (subtotal [_]\n      (int (* 0.75 (subtotal item))))))\n\n;;; Example: To compute the total when someone bought 10 oranges,\n;;;  15 bananas and 10 grapes using a coupon.\n;;; foo=> (apply +  (map subtotal [(Orange. 10) (Banana. 15) (coupon (Grape. 10))]))\n;;; 4685            ; (apply + '(980 2370 1335))\n;;; foo=> \n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-08 09:28:59.0",
     :function "reify",
     :version 1,
     :created_at "2012-06-08 09:28:59.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Using a reified FileFilter implementation to obtain only directory files\n(.listFiles (java.io.File. \".\")\n  (reify\n    java.io.FileFilter\n    (accept [this f]\n      (.isDirectory f))))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-17 16:02:10.0",
     :function "reify",
     :version 1,
     :created_at "2012-12-17 16:02:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;;; This example shows how to reify a multi-arity protocol function\n;;;; (note the different style in defprotocol vs reify)\n\n;; define a multi-arity protocol function blah\n(defprotocol Foo\n  (blah\n    [this x]\n    [this x y]))\n\n;; define an anonymous extension via reify\n(def r (reify Foo \n         (blah [_ x] x)\n         (blah [_ x y] y)))\n\n;; invoke blah via the r instance\n(blah r 1)   ;; => 1\n(blah r 1 2)   ;; => 2\n\n\n"}],
   :id 5715,
   :name "reify",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5715"},
  "clojure.contrib.graph/reverse-graph"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 102,
   :name "reverse-graph",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/102"},
  "clojure.contrib.base64/level"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3799,
   :name "level",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3799"},
  "swank.util.io/swank.util.io.proxy$java.io.StringWriter$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4266,
   :name "swank.util.io.proxy$java.io.StringWriter$0",
   :ns "swank.util.io",
   :url "http://clojuredocs.org/v/4266"},
  "circumspec.watch/last-watched-atom"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3780,
   :name "last-watched-atom",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3780"},
  "clojure.contrib.gen-html-docs/generate-all-namespaces-action-script"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 364,
   :name "generate-all-namespaces-action-script",
   :ns "clojure.contrib.gen-html-docs",
   :url "http://clojuredocs.org/v/364"},
  "clojure.test/use-fixtures"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "join-fixtures",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/2490",
     :line "667",
     :arglists_comp "[fixtures]",
     :url_friendly_name "join-fixtures",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "compose-fixtures",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2516",
     :line "660",
     :arglists_comp "[f1 f2]",
     :url_friendly_name "compose-fixtures",
     :file "clojure/test.clj"}],
   :examples [],
   :id 6047,
   :name "use-fixtures",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6047"},
  "clojure.contrib.gen-html-docs/*script*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 370,
   :name "*script*",
   :ns "clojure.contrib.gen-html-docs",
   :url "http://clojuredocs.org/v/370"},
  "circumspec.for-all/class-symbol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3670,
   :name "class-symbol",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3670"},
  "clojure.contrib.datalog.magic/seed-rule"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 241,
   :name "seed-rule",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/241"},
  "clojure.core/hash-map"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "merge",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/2101",
     :line "2268",
     :arglists_comp "[& maps]",
     :url_friendly_name "merge",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "assoc",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1702",
     :line "161",
     :arglists_comp "[map key val]|[map key val & kvs]",
     :url_friendly_name "assoc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dissoc",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2091",
     :line "1164",
     :arglists_comp "[map]|[map key]|[map key & ks]",
     :url_friendly_name "dissoc",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-21 06:59:39.0",
     :function "hash-map",
     :version 4,
     :created_at "2010-07-28 14:41:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create hash map the long way\nuser=> (hash-map)\n{}\n\n;; create hash map the short way\nuser=> {}\n{}\n\n;; sending a key more times, will remap it to the last value\nuser=> (hash-map :key1 1, :key1 2) \n{:key1 2} \n\nuser=> (hash-map :key1 'val1, 'key2 :val2, [:compound :key] nil)\n{[:compound :key] nil, :key1 val1, key2 :val2} \n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:56:08.0",
     :function "hash-map",
     :version 3,
     :created_at "2010-07-28 14:42:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map #(hash-map % 0) (seq \"abcdefgh\"))\n({\\a 0} {\\b 0} {\\c 0} {\\d 0} {\\e 0} {\\f 0} {\\g 0} {\\h 0}) \n\nuser=> (apply hash-map (.split \"a 1 b 2 c 3\" \" \"))\n{\"a\" \"1\", \"b\" \"2\", \"c\" \"3\"}"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-05 02:00:49.0",
     :function "hash-map",
     :version 2,
     :created_at "2012-07-05 01:58:30.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;another way of creating hash map is by using def\nuser=> (def user {:name \"Steve\" :age 24 :salary 7886 :company \"Acme\"})\n{:age 24, :name \"Steve\", :salary 7756, :company \"Acme\"}\n\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-20 21:57:01.0",
     :function "hash-map",
     :version 1,
     :created_at "2012-07-20 21:57:01.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Take a sequence of sequences (vector of vectors, and create a map\n; using date as the map key.\n(def csv1 [[\"01/01/2012\" 1 2 3 4][\"06/15/2012\" 38 24 101]])\n\n(map #(hash-map (keyword (first %1)) (vec (rest %1))) csv1)\n({:01/01/2012 [1 2 3 4]} {:06/15/2012 [38 24 101]})\n"}],
   :id 5544,
   :name "hash-map",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5544"},
  "clojure.core/replicate"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-08-11 12:04:21.0",
     :user_id 40,
     :function "replicate",
     :version "1.2.0",
     :created_at "2010-08-11 12:04:21.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Note that `replicate` is obsolete. It's functionality is now available via the two-arg arity form of [`repeat`](http://clojuredocs.org/v/1578)."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:56:55.0",
     :function "replicate",
     :version 3,
     :created_at "2010-08-11 10:54:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (apply str (replicate 7 \\space))\n       ; 7 spaces\n\nuser=> (replicate 7 (rand-int 10))\n(3 3 3 3 3 3 3) ; the same number"}],
   :id 5726,
   :name "replicate",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5726"},
  "net.cgrand.enlive-html/unwrap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3887,
   :name "unwrap",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3887"},
  "clojure.core/compare-and-set!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "atom",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/2028",
     :line "1767",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "atom",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-11-24 19:18:11.0",
     :function "compare-and-set!",
     :version 2,
     :created_at "2011-06-20 21:12:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def a (atom 0))\n#'user/a\nuser=> (compare-and-set! a 10 20)\nfalse\nuser=> @a\n0\nuser=> (compare-and-set! a 0 10)\ntrue\nuser=> @a\n10\n"}],
   :id 5427,
   :name "compare-and-set!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5427"},
  "clojure.core/remove-all-methods"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "remove-method",
     :updated_at "2011-08-21 02:30:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1528",
     :line "1364",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "remove-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prefers",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1836",
     :line "1388",
     :arglists_comp "[multifn]",
     :url_friendly_name "prefers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defmulti",
     :updated_at "2011-08-12 18:02:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1989",
     :line "1310",
     :arglists_comp
     "[name docstring? attr-map? dispatch-fn & options]",
     :url_friendly_name "defmulti",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defmethod",
     :updated_at "2011-06-15 23:19:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1592",
     :line "1352",
     :arglists_comp "[multifn dispatch-val & fn-tail]",
     :url_friendly_name "defmethod",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 02:46:57.0",
     :function "remove-all-methods",
     :version 1,
     :created_at "2011-08-21 02:46:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; example showing use of multi-methods before and after remove-all-methods\n;; after removing all the methods, both circle and line tos functions throw\n;; exceptions\n\nuser=> (defmulti tos :Ob)\nnil\nuser=> (defn line [p1 p2] {:Ob :line :p1 p1 :p2 p2})\n#'user/line\nuser=> (defn circle [cent rad] {:Ob :circle :cent cent :rad rad})\n#'user/circle\nuser=> (defmethod tos :line [l] (str \"Line:\" (l :p1) (l :p2)))\n#<MultiFn clojure.lang.MultiFn@73aecc3a>\nuser=> (defmethod tos :circle [c] (str \"Circle:\" (c :cent) (c :rad)))\n#<MultiFn clojure.lang.MultiFn@73aecc3a>\nuser=> (println (tos (circle [2 3] 3.3)))\nCircle:[2 3]3.3\nnil\nuser=> (println (tos (line [1 1][0 0])))\nLine:[1 1][0 0]\nnil\nuser=> (remove-all-methods tos)\n#<MultiFn clojure.lang.MultiFn@73aecc3a>\nuser=> (println (tos (circle [2 3] 3.3)))\njava.lang.IllegalArgumentException: No method in multimethod 'tos' for dispatch\nvalue: :circle (NO_SOURCE_FILE:0)\nuser=> (println (tos (line [1 1][0 0])))\njava.lang.IllegalArgumentException: No method in multimethod 'tos' for dispatch\nvalue: :line (NO_SOURCE_FILE:0)\nuser=>"}],
   :id 5719,
   :name "remove-all-methods",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5719"},
  "incanter.processing/blend-color"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3170,
   :name "blend-color",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3170"},
  "clojure.contrib.string/reverse"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1330,
   :name "reverse",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1330"},
  "clojure.contrib.str-utils2/get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1281,
   :name "get",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1281"},
  "clj-ssh.ssh/default-identity"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1455,
   :name "default-identity",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1455"},
  "incanter.distributions/f-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5084,
   :name "f-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5084"},
  "clojure.core/trampoline"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-07 09:23:41.0",
     :user_id 41,
     :function "trampoline",
     :version "1.2.0",
     :created_at "2010-10-13 00:53:33.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "A tutorial on how to use trampoline is available here: \n\nhttp://pramode.net/clojure/2010/05/08/clojure-trampoline/\n\nand here:\n\nhttp://jakemccrary.com/blog/2010/12/06/trampolining-through-mutual-recursion.html"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "loop",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1617",
     :line "3533",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "loop",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "recur",
     :updated_at "2010-11-20 04:29:29.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5273",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "recur",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 18:10:43.0",
     :function "trampoline",
     :version 1,
     :created_at "2010-12-29 18:10:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (defn foo [x]\n        (if (< x 0)\n          (println \"done\")\n          #(foo (do (println :x x) (dec x)))))\n#'user/foo\n\n;; trampoline will keep calling the function for as long as \"foo\" returns a function.\nuser> (trampoline foo 10)\n:x 10\n:x 9\n:x 8\n:x 7\n:x 6\n:x 5\n:x 4\n:x 3\n:x 2\n:x 1\n:x 0\ndone\nnil"}],
   :id 5794,
   :name "trampoline",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5794"},
  "incanter.core/col-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2918,
   :name "col-names",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2918"},
  "swank.core/debugger-condition-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4111,
   :name "debugger-condition-for-emacs",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4111"},
  "incanter.core/diag"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2907,
   :name "diag",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2907"},
  "clojure.contrib.monads/maybe-t"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 61,
     :ns "clojure.contrib.monads",
     :updated_at "2011-11-10 22:24:55.0",
     :function "maybe-t",
     :version 1,
     :created_at "2011-11-10 22:24:55.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(use 'clojure.contrib.monads)\n; Clojure 1.3: (use 'clojure.algo.monads)\n\n;; We want to combine failing computations and nondeterminism\n;; The sequence monad is not sufficient\nuser=> (domonad sequence-m [x [2 nil 3] y [2 3]] (* x y))\nNullPointerException   clojure.lang.Numbers.ops (Numbers.java:942)\n\n;; Create a combined monad by applying the maybe-t monad transformer\nuser=> (def maybe-seq-m (maybe-t sequence-m))\n#'user/maybe-seq-m\n\n;; The combined monad can handle failing computations\nuser=> (domonad maybe-seq-m [x [2 nil 3] y [2 3]] (* x y))\n(4 6 nil 6 9)\n"}],
   :id 774,
   :name "maybe-t",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/774"},
  "incanter.charts/slider"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2804,
   :name "slider",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2804"},
  "clojure.java.io/file"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "file-seq",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1841",
     :line "3911",
     :arglists_comp "[dir]",
     :url_friendly_name "file-seq",
     :file "clojure/core.clj"}
    {:namespace_id 104,
     :weight 1,
     :name "reader",
     :updated_at "2010-11-20 16:02:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2147",
     :line "80",
     :arglists_comp "[x & opts]",
     :url_friendly_name "reader",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "writer",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2142",
     :line "98",
     :arglists_comp "[x & opts]",
     :url_friendly_name "writer",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 1,
     :name "delete-file",
     :updated_at "2011-08-20 23:00:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/2149",
     :line "407",
     :arglists_comp "[f & [silently]]",
     :url_friendly_name "delete-file",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 104,
     :ns "clojure.java.io",
     :updated_at "2010-12-29 17:45:42.0",
     :function "file",
     :version 1,
     :created_at "2010-12-29 17:45:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (clojure.java.io/file \"/tmp/foo\")\n#<File /tmp/foo>\n\nuser> (clojure.java.io/file \"http://asdf.com\")\n#<File http:/asdf.com>\n\nuser> (clojure.java.io/file \"/tmp/foo\" \"bar\")\n#<File /tmp/foo/bar>"}],
   :id 5886,
   :name "file",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5886"},
  "clojure.test/do-report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6028,
   :name "do-report",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6028"},
  "clojure.core/when-first"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:57:22.0",
     :function "when-first",
     :version 3,
     :created_at "2010-08-02 01:29:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (when-first [a [1 2 3]] a)\n1\nuser=> (when-first [a []] a)\nnil\nuser=> (when-first [a nil] a)\nnil"}],
   :id 5837,
   :name "when-first",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5837"},
  "swank.core/add-restart-if"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4036,
   :name "add-restart-if",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4036"},
  "clojure.contrib.probabilities.monte-carlo/exponential"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1100,
   :name "exponential",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1100"},
  "swank.commands.inspector/quit-inspector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4230,
   :name "quit-inspector",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4230"},
  "incanter.core/condition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2859,
   :name "condition",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2859"},
  "clojure.contrib.pprint.pretty-writer/indent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 877,
   :name "indent",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/877"},
  "clojure.core/*"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 0,
     :name "*'",
     :updated_at "2011-09-26 06:23:29.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:01:09.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5284",
     :line "931",
     :arglists_comp "[]|[x]|[x y]|[x y & more]",
     :url_friendly_name "*'",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:57:46.0",
     :function "*",
     :version 4,
     :created_at "2010-07-09 22:07:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(* 6) ;=> 6\n(* 2 3) ;=> 6\n(* 2 3 4) ;=> 24\n(* 0.5 200) ;=> 100.0"}],
   :id 5283,
   :name "*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5283"},
  "circumspec.test/it"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3724,
   :name "it",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3724"},
  "net.licenser.sandbox.matcher/partial-namespace-matcher"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5109,
   :name "partial-namespace-matcher",
   :ns "net.licenser.sandbox.matcher",
   :url "http://clojuredocs.org/v/5109"},
  "swank.commands.basic/swank-macroexpand-1"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3977,
   :name "swank-macroexpand-1",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3977"},
  "incanter.charts/add-function*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2773,
   :name "add-function*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2773"},
  "swank.rpc/swank-protocol-error"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4304,
   :name "swank-protocol-error",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4304"},
  "circumspec.report/result-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3699,
   :name "result-name",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3699"},
  "clojure.core/instance?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "type",
     :updated_at "2011-05-15 18:40:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/2068",
     :line "2656",
     :arglists_comp "[x]",
     :url_friendly_name "type",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "supers",
     :updated_at "2011-06-08 04:02:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1937",
     :line "4390",
     :arglists_comp "[class]",
     :url_friendly_name "supers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "doto",
     :updated_at "2011-08-21 15:26:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/1713",
     :line "2932",
     :arglists_comp "[x & forms]",
     :url_friendly_name "doto",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "class",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:45.0",
     :added nil,
     :url "http://clojuredocs.org/v/1791",
     :line "2651",
     :arglists_comp "[x]",
     :url_friendly_name "class",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2013-01-22 17:44:11.0",
     :function "instance?",
     :version 11,
     :created_at "2010-08-20 00:35:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (instance? Long 1)\ntrue\nuser=> (instance? Integer 1)\nfalse\nuser=> (instance? Number 1)\ntrue\nuser=> (instance? String 1)\nfalse\nuser=> (instance? String \"1\")\ntrue\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2013-01-18 13:06:52.0",
     :function "instance?",
     :version 4,
     :created_at "2011-08-21 22:07:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def al (new java.util.ArrayList))\n#'user/al\nuser=> (instance? java.util.Collection al)\ntrue\nuser=> (instance? java.util.RandomAccess al)\ntrue\nuser=> (instance? java.lang.String al)\nfalse"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-22 17:46:50.0",
     :function "instance?",
     :version 2,
     :created_at "2013-01-22 17:44:04.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Some things are more than what they seem to be at first glance\nuser=> (instance? clojure.lang.IFn +)\ntrue\nuser=> (instance? clojure.lang.Keyword :a)\ntrue\nuser=> (instance? clojure.lang.IFn :a)\ntrue\nuser=> (instance? clojure.lang.IFn {:a 1})\ntrue\n"}],
   :id 5556,
   :name "instance?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5556"},
  "clojure.contrib.error-kit/continue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 275,
   :name "continue",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/275"},
  "swank.commands.inspector/inspect-in-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4236,
   :name "inspect-in-emacs",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4236"},
  "swank.commands.contrib.swank-c-p-c.internal/unacronym"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4163,
   :name "unacronym",
   :ns "swank.commands.contrib.swank-c-p-c.internal",
   :url "http://clojuredocs.org/v/4163"},
  "clojure.core/push-thread-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5686,
   :name "push-thread-bindings",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5686"},
  "clojure.contrib.greatest-least/all-greatest-by"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 36,
     :ns "clojure.contrib.greatest-least",
     :updated_at "2010-09-26 00:48:18.0",
     :function "all-greatest-by",
     :version 3,
     :created_at "2010-09-08 15:10:52.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; define an anonymous \n;; function which divides \n;; 30 by the value of the argument\nuser=> (all-greatest-by #(/ 30 %) \n          10 20 40)\n(10)\n"}],
   :id 454,
   :name "all-greatest-by",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/454"},
  "clojure.contrib.pprint.column-writer/get-column"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 888,
   :name "get-column",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/888"},
  "clojure.test/deftest"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "run-all-tests",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2511",
     :line "743",
     :arglists_comp "[]|[re]",
     :url_friendly_name "run-all-tests",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "run-tests",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2503",
     :line "731",
     :arglists_comp "[]|[& namespaces]",
     :url_friendly_name "run-tests",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "is",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2497",
     :line "533",
     :arglists_comp "[form]|[form msg]",
     :url_friendly_name "is",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 1,
     :name "are",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2518",
     :line "551",
     :arglists_comp "[argv expr & args]",
     :url_friendly_name "are",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 1,
     :name "testing",
     :updated_at "2010-11-08 23:15:46.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/2500",
     :line "568",
     :arglists_comp "[string & body]",
     :url_friendly_name "testing",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 115,
     :ns "clojure.test",
     :updated_at "2010-11-08 23:34:45.0",
     :function "deftest",
     :version 4,
     :created_at "2010-08-04 22:26:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";successful test example\n(ns testing)\n(use 'clojure.test)\n\n\n(deftest addition\n  (is (= 4 (+ 2 2)))\n  (is (= 7 (+ 3 4))))\n=> #'testing/addition\n\n(deftest subtraction\n  (is (= 1 (- 4 3)))\n  (is (= 3 (- 7 4))))\n=> #'testing/subtraction\n\n;composing tests\n(deftest arithmetic\n  (addition)\n  (subtraction))\n=> #'testing/arithmetic\n\n(run-tests 'testing)\n\n=> Testing testing\n\nRan 6 tests containing 10 assertions.\n0 failures, 0 errors.\n{:type :summary, :test 6, :pass 10, :fail 0, :error 0}"}
    {:namespace_id 115,
     :ns "clojure.test",
     :updated_at "2012-03-21 05:17:24.0",
     :function "deftest",
     :version 2,
     :created_at "2010-11-08 23:37:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";failure test example\n\n;there is nesting, so when a leaf test fails so does its parents, in this example 2 tests fail, though there was only one real error.\n\n(ns testing)\n(use 'clojure.test)\n\n\n(deftest addition\n  (is (= 4 (+ 2 2)))\n  (is (= 7 (+ 3 4))))\n=> #'testing/addition\n\n(deftest subtraction\n  (is (= 1 (- 4 3)))\n  (is (= 6 (- 7 4))))           ;error\n=> #'testing/subtraction\n\n;composing tests\n(deftest arithmetic\n  (addition)\n  (subtraction))\n=> #'testing/arithmetic\n\n(run-tests 'testing)\n\n=> Testing testing\n\nFAIL in (arithmetic subtraction) (NO_SOURCE_FILE:669)\nexpected: (= 6 (- 7 4))\n  actual: (not (= 6 3))\n\nFAIL in (subtraction) (NO_SOURCE_FILE:669)\nexpected: (= 6 (- 7 4))\n  actual: (not (= 6 3))\n\nRan 6 tests containing 10 assertions.\n2 failures, 0 errors.\n{:type :summary, :test 6, :pass 8, :fail 2, :error 0}"}],
   :id 6026,
   :name "deftest",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6026"},
  "incanter.core/rank"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2873,
   :name "rank",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2873"},
  "clojure.core/transient"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "persistent!",
     :updated_at "2011-06-10 14:05:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1970",
     :line "2544",
     :arglists_comp "[coll]",
     :url_friendly_name "persistent!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "conj!",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/1761",
     :line "2553",
     :arglists_comp "[coll x]",
     :url_friendly_name "conj!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "assoc!",
     :updated_at "2011-06-10 13:56:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1640",
     :line "2561",
     :arglists_comp "[coll key val]|[coll key val & kvs]",
     :url_friendly_name "assoc!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "pop!",
     :updated_at "2011-06-10 13:53:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1594",
     :line "2585",
     :arglists_comp "[coll]",
     :url_friendly_name "pop!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dissoc!",
     :updated_at "2010-12-30 09:00:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1853",
     :line "2574",
     :arglists_comp "[map key]|[map key & ks]",
     :url_friendly_name "dissoc!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "disj!",
     :updated_at "2011-06-10 14:01:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2109",
     :line "2593",
     :arglists_comp "[set]|[set key]|[set key & ks]",
     :url_friendly_name "disj!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-12 00:55:36.0",
     :function "transient",
     :version 1,
     :created_at "2010-10-12 00:55:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; As seen on http://clojure.org/transients\n;; array is initially made transient, modified then\n;; finally made persistent.\n\n(defn vrange2 [n]\n  (loop [i 0 v (transient [])]\n    (if (< i n)\n      (recur (inc i) (conj! v i))\n      (persistent! v))))\n\nuser=> (vrange2 10)\n[0 1 2 3 4 5 6 7 8 9]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-23 21:17:54.0",
     :function "transient",
     :version 4,
     :created_at "2011-06-10 13:46:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (def foo (transient [1 2 3]))\n#'user/foo\nuser> (get foo 0)\n1\nuser> (count foo)\n3\nuser> (nth foo 0)\n1\nuser> (def bar (transient {:honda 7 :kagawa 23 :ienaga 14}))\n#'user/bar\nuser> (get bar :kagawa)\n23\nuser> (count bar)\n3\n\n;; There is a known bug in Clojure 1.3 where contains? always returns false for\n;; transients.  http://dev.clojure.org/jira/browse/CLJ-700\n;; contains? works fine for persistent data structures.\nuser> (contains? bar :kagawa)  ; Caution! \nfalse\nuser> (def bar2 (persistent! bar))\n#'user/bar2\nuser> (contains? bar2 :kagawa) ; Caution!\ntrue\n"}],
   :id 5795,
   :name "transient",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5795"},
  "circumspec.watch/test-namespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3777,
   :name "test-namespace",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3777"},
  "clojure.core/ensure"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-04 15:23:00.0",
     :user_id 61,
     :function "ensure",
     :version "1.2.0",
     :created_at "2011-03-03 21:18:37.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "This is for preventing [write skew](http://clojure.higher-order.net/?p=50), which Clojure's concurrency model is susceptible to. If you have a transaction where several refs' values must remain in some consistent relationship to each other, but you are only writing to some of them, you should use ensure on the other refs to prevent other transactions from writing to them in the meantime."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "commute",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1600",
     :line "1837",
     :arglists_comp "[ref fun & args]",
     :url_friendly_name "commute",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ref-set",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1701",
     :line "1868",
     :arglists_comp "[ref val]",
     :url_friendly_name "ref-set",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5488,
   :name "ensure",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5488"},
  "clojure.core/partition"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "partition-all",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1897",
     :line "5599",
     :arglists_comp "[n coll]|[n step coll]",
     :url_friendly_name "partition-all",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "split-at",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1724",
     :line "2218",
     :arglists_comp "[n coll]",
     :url_friendly_name "split-at",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "partition-by",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1603",
     :line "5554",
     :arglists_comp "[f coll]",
     :url_friendly_name "partition-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:42:32.0",
     :function "partition",
     :version 3,
     :created_at "2010-07-20 09:45:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (partition 4 (range 20))\n((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15) (16 17 18 19))\n\nuser=> (partition 4 (range 22))\n((0 1 2 3) (4 5 6 7) (8 9 10 11) (12 13 14 15) (16 17 18 19))\n\nuser=> (partition 4 6 (range 20))\n((0 1 2 3) (6 7 8 9) (12 13 14 15))\n\nuser=> (partition 4 6 [\"a\"] (range 20))\n((0 1 2 3) (6 7 8 9) (12 13 14 15) (18 19 \"a\"))\n\nuser=> (partition 4 6 [\"a\" \"b\" \"c\" \"d\"] (range 20))\n((0 1 2 3) (6 7 8 9) (12 13 14 15) (18 19 \"a\" \"b\"))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-18 21:04:57.0",
     :function "partition",
     :version 1,
     :created_at "2012-06-18 21:04:57.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (partition 3 1 [:a :b :c :d :e :f])\n((:a :b :c) (:b :c :d) (:c :d :e) (:d :e :f))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-25 04:57:24.0",
     :function "partition",
     :version 1,
     :created_at "2012-06-25 04:57:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; When there are less than n items in the coll, partition's behaviour\n;; depends on whether there is a pad or not\n\n;; without pad\nuser> (partition 10 [1 2 3 4])\n()\n;; again, without pad\nuser> (partition 10 10 [1 2 3 4])\n()\n;; with a pad this time (note: the pad is an empty sequence)\nuser> (partition 10 10 nil [1 2 3 4])\n((1 2 3 4))\n;; or, explicit empty sequence instead of nil\nuser> (partition 10 10 [] [1 2 3 4])\n((1 2 3 4))\n"}],
   :id 5653,
   :name "partition",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5653"},
  "swank.util.concurrent.mbox/get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4324,
   :name "get",
   :ns "swank.util.concurrent.mbox",
   :url "http://clojuredocs.org/v/4324"},
  "swank.util.concurrent.thread/current-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4043,
   :name "current-thread",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4043"},
  "incanter.stats/cdf-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3277,
   :name "cdf-t",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3277"},
  "lancet/defaultexcludes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3413,
   :name "defaultexcludes",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3413"},
  "incanter.stats/normalized-kendall-tau-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3279,
   :name "normalized-kendall-tau-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3279"},
  "clojure.template/apply-template"
  {:comments [],
   :see-alsos
   [{:namespace_id 114,
     :weight 2,
     :name "do-template",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/2487",
     :line "45",
     :arglists_comp "[argv expr & values]",
     :url_friendly_name "do-template",
     :file "clojure/template.clj"}],
   :examples
   [{:namespace_id 114,
     :ns "clojure.template",
     :updated_at "2010-10-21 08:04:07.0",
     :function "apply-template",
     :version 2,
     :created_at "2010-10-14 09:04:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (apply-template '[a b c d e] '[d a b e c e b a d] '(1 2 3 4 5))\n[4 1 2 5 3 5 2 1 4]  \n\nuser=> (apply-template '[a b c d e] '[d a b e c e b a d] '(1 [2 3] [4 5]))\n[d 1 [2 3] e [4 5] e [2 3] 1 d]"}],
   :id 6012,
   :name "apply-template",
   :ns "clojure.template",
   :url "http://clojuredocs.org/v/6012"},
  "swank.commands.inspector/init-inspector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4228,
   :name "init-inspector",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4228"},
  "clj-swing.frame/*frame-on-close-actions*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5210,
   :name "*frame-on-close-actions*",
   :ns "clj-swing.frame",
   :url "http://clojuredocs.org/v/5210"},
  "circumspec.should/should-body"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3743,
   :name "should-body",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3743"},
  "clojure.contrib.test-is/*initial-report-counters*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1364,
   :name "*initial-report-counters*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1364"},
  "clojure.repl/source-fn"
  {:comments [],
   :see-alsos
   [{:namespace_id 110,
     :weight 1,
     :name "source",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/2445",
     :line "43",
     :arglists_comp "[n]",
     :url_friendly_name "source",
     :file "clojure/repl.clj"}],
   :examples [],
   :id 5976,
   :name "source-fn",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5976"},
  "clojure.contrib.pprint/*print-miser-width*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 884,
   :name "*print-miser-width*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/884"},
  "swank.core.server/setup-server"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4271,
   :name "setup-server",
   :ns "swank.core.server",
   :url "http://clojuredocs.org/v/4271"},
  "clojure.core/reversible?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:58:41.0",
     :function "reversible?",
     :version 2,
     :created_at "2011-11-15 04:21:26.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (reversible? [])\ntrue\nuser=> (reversible? '())\nfalse\nuser=> (reversible? #{})\nfalse"}],
   :id 5735,
   :name "reversible?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5735"},
  "clojure.core/satisfies?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "extend",
     :updated_at "2011-02-02 19:35:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1597",
     :line "630",
     :arglists_comp "[atype & proto+mmaps]",
     :url_friendly_name "extend",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defprotocol",
     :updated_at "2010-11-15 06:13:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2062",
     :line "576",
     :arglists_comp "[name & opts+sigs]",
     :url_friendly_name "defprotocol",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-12 22:33:45.0",
     :function "satisfies?",
     :version 1,
     :created_at "2011-01-12 22:33:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns foo)\n\n(defprotocol Foo\n  (foo [this]))\n\n(defprotocol Bar\n  (bar [this]))\n\n(extend java.lang.Number\n  Bar\n  {:bar (fn [this] 42)})\n\n(extend java.lang.String\n  Foo\n  {:foo (fn [this] \"foo\")}\n  Bar\n  {:bar (fn [this] \"forty two\")})\n\n(satisfies? Foo \"zam\") ; => true\n(satisfies? Bar \"zam\") ; => true\n(satisfies? Foo 123)   ; => false\n(satisfies? Bar 123)   ; => true"}],
   :id 5738,
   :name "satisfies?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5738"},
  "net.cgrand.enlive-html/xml-resource"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3943,
   :name "xml-resource",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3943"},
  "clojure.core/biginteger"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5378,
   :name "biginteger",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5378"},
  "clojure.contrib.singleton/global-singleton"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1224,
   :name "global-singleton",
   :ns "clojure.contrib.singleton",
   :url "http://clojuredocs.org/v/1224"},
  "leiningen.swank/swank"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3961,
   :name "swank",
   :ns "leiningen.swank",
   :url "http://clojuredocs.org/v/3961"},
  "clj-swing.document/clj_swing.document.proxy$java.lang.Object$Position$db658aa2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5181,
   :name "clj_swing.document.proxy$java.lang.Object$Position$db658aa2",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5181"},
  "incanter.core/$rollup"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2857,
   :name "$rollup",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2857"},
  "clojure.core/declare"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "def",
     :updated_at "2011-08-16 10:30:10.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5268",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "def",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:32:21.0",
     :function "declare",
     :version 4,
     :created_at "2010-07-14 19:34:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (defn foo []\n         (undefined-func))\n; Evaluation aborted. Unable to resolve symbol: undefined-func in this context\nnil\n\nuser=> (declare undefined-func)\n#'user/undefined-func\n\nuser=> (defn foo []\n         (undefined-func))\n#'user/foo\n"}],
   :id 5447,
   :name "declare",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5447"},
  "clj-swing.core/kw-to-setter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5162,
   :name "kw-to-setter",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5162"},
  "clojure.contrib.http.agent/*http-agent-defaults*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 472,
   :name "*http-agent-defaults*",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/472"},
  "clojure.contrib.def/defunbound-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 85,
   :name "defunbound-",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/85"},
  "clojure.contrib.map-utils/safe-get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 691,
   :name "safe-get",
   :ns "clojure.contrib.map-utils",
   :url "http://clojuredocs.org/v/691"},
  "swank.core/find-or-spawn-repl-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4091,
   :name "find-or-spawn-repl-thread",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4091"},
  "clojure.contrib.str-utils2/replace-first"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1288,
   :name "replace-first",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1288"},
  "clojure.contrib.str-utils2/butlast"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "butlast",
     :updated_at "2010-11-06 03:20:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1658",
     :line "232",
     :arglists_comp "[coll]",
     :url_friendly_name "butlast",
     :file "clojure/core.clj"}
    {:namespace_id 88,
     :weight 0,
     :name "butlast",
     :updated_at "2010-10-20 04:41:59.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:59:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1319",
     :line "125",
     :arglists_comp "[n s]",
     :url_friendly_name "butlast",
     :file "clojure/contrib/string.clj"}],
   :examples [],
   :id 1268,
   :name "butlast",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1268"},
  "clojure.contrib.math/floor"
  {:comments [],
   :see-alsos
   [{:namespace_id 55,
     :weight 0,
     :name "ceil",
     :updated_at "2010-10-20 04:41:51.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:54:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/705",
     :line "141",
     :arglists_comp "[n]",
     :url_friendly_name "ceil",
     :file "clojure/contrib/math.clj"}
    {:namespace_id 55,
     :weight 0,
     :name "round",
     :updated_at "2010-10-20 04:41:51.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:53:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/701",
     :line "153",
     :arglists_comp "[n]",
     :url_friendly_name "round",
     :file "clojure/contrib/math.clj"}],
   :examples [],
   :id 700,
   :name "floor",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/700"},
  "clojure.contrib.java-utils/as-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 529,
   :name "as-properties",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/529"},
  "clojure.core/special-form-anchor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1515,
   :name "special-form-anchor",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/1515"},
  "incanter.charts/stacked-area-chart*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2772,
   :name "stacked-area-chart*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2772"},
  "clojure.core/not-every?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "every?",
     :updated_at "2011-07-16 14:22:36.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/2085",
     :line "2026",
     :arglists_comp "[pred coll]",
     :url_friendly_name "every_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "not-any?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1809",
     :line "2055",
     :arglists_comp "[pred coll]",
     :url_friendly_name "not-any_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 7,
     :name "some",
     :updated_at "2011-08-31 02:17:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1541",
     :line "2045",
     :arglists_comp "[pred coll]",
     :url_friendly_name "some",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:59:04.0",
     :function "not-every?",
     :version 3,
     :created_at "2010-07-13 19:29:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (not-every? odd? '(1 2 3))\ntrue\nuser=> (not-every? odd? '(1 3))\nfalse"}],
   :id 5629,
   :name "not-every?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5629"},
  "clojure.contrib.generic.math-functions/cos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 429,
   :name "cos",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/429"},
  "incanter.processing/QUAD_STRIP"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3208,
   :name "QUAD_STRIP",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3208"},
  "incanter.processing/apply-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3205,
   :name "apply-matrix",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3205"},
  "incanter.stats/cdf-uniform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3323,
   :name "cdf-uniform",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3323"},
  "net.cgrand.enlive-html/nth-last-of-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3877,
   :name "nth-last-of-type",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3877"},
  "clojure.core/macroexpand-1"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "macroexpand",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1874",
     :line "3098",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand",
     :file "clojure/core.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "macroexpand-all",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2560",
     :line "127",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand-all",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 02:59:39.0",
     :function "macroexpand-1",
     :version 1,
     :created_at "2010-10-05 02:59:39.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (macroexpand-1 '(defstruct mystruct[a b]))\n(def mystruct (clojure.core/create-struct [a b]))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 06:33:59.0",
     :function "macroexpand-1",
     :version 1,
     :created_at "2012-06-09 06:33:59.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (macroexpand-1 '(-> c (+ 3) (* 2)))\n(clojure.core/-> (clojure.core/-> c (+ 3)) (* 2))"}],
   :id 5597,
   :name "macroexpand-1",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5597"},
  "clojure.contrib.pprint.pretty-writer/end-block"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 852,
   :name "end-block",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/852"},
  "clojure.core/list"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:59:30.0",
     :function "list",
     :version 3,
     :created_at "2010-07-13 18:47:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (list 'a 'b 'c 'd 'e 'f 'g)\n(a b c d e f g)\nuser=> (list 1 2 3)\n(1 2 3)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:59:46.0",
     :function "list",
     :version 3,
     :created_at "2010-07-19 09:36:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [m {:1 1 :2 2 :3 3 :4 4}] (map list (keys m) (vals m)))\n((:1 1) (:2 2) (:3 3) (:4 4))"}],
   :id 5583,
   :name "list",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5583"},
  "circumspec.locator/tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3683,
   :name "tests",
   :ns "circumspec.locator",
   :url "http://clojuredocs.org/v/3683"},
  "incanter.infix/+highest-precedence+"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2963,
   :name "+highest-precedence+",
   :ns "incanter.infix",
   :url "http://clojuredocs.org/v/2963"},
  "incanter.processing/load-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3145,
   :name "load-matrix",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3145"},
  "clojure.contrib.graph/post-ordered-nodes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 441,
   :name "post-ordered-nodes",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/441"},
  "incanter.stats/sum-variance-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3350,
   :name "sum-variance-test",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3350"},
  "clojure.contrib.zip-filter/auto?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1431,
   :name "auto?",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1431"},
  "leiningen.pom/make-license"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3571,
   :name "make-license",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3571"},
  "clojure.contrib.profile/profile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1113,
   :name "profile",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1113"},
  "incanter.core/nrow"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2726,
   :name "nrow",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2726"},
  "swank.core/exception-causes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4099,
   :name "exception-causes",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4099"},
  "circumspec.runner/*story*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3721,
   :name "*story*",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3721"},
  "incanter.distributions/exponential-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5085,
   :name "exponential-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5085"},
  "clojure.core/load-reader"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "load-file",
     :updated_at "2011-08-21 16:43:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1984",
     :line nil,
     :arglists_comp "[name]",
     :url_friendly_name "load-file",
     :file nil}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-12 13:15:54.0",
     :function "load-reader",
     :version 1,
     :created_at "2012-10-12 13:15:54.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body "(load-reader (java.io.FileReader. \"filename.clj\"))"}],
   :id 5588,
   :name "load-reader",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5588"},
  "incanter.processing/export-font"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3020,
   :name "export-font",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3020"},
  "swank.core.connection/*current-connection*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4188,
   :name "*current-connection*",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4188"},
  "clojure.contrib.jmx/mbean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 577,
   :name "mbean",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/577"},
  "clojure.core/remove-method"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-all-methods",
     :updated_at "2011-08-21 02:46:57.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1882",
     :line "1358",
     :arglists_comp "[multifn]",
     :url_friendly_name "remove-all-methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prefers",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1836",
     :line "1388",
     :arglists_comp "[multifn]",
     :url_friendly_name "prefers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defmulti",
     :updated_at "2011-08-12 18:02:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1989",
     :line "1310",
     :arglists_comp
     "[name docstring? attr-map? dispatch-fn & options]",
     :url_friendly_name "defmulti",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defmethod",
     :updated_at "2011-06-15 23:19:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1592",
     :line "1352",
     :arglists_comp "[multifn dispatch-val & fn-tail]",
     :url_friendly_name "defmethod",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 02:30:38.0",
     :function "remove-method",
     :version 1,
     :created_at "2011-08-21 02:30:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; long example showing setting up a multi-method, then removing one of the \n;; methods, showing the multi-method has been removed\n\nuser=> (defmulti tos :Ob)\nnil\nuser=> (defn line [p1 p2] {:Ob :line :p1 p1 :p2 p2})\n#'user/line\nuser=> (defn circle [cent rad] {:Ob :circle :cent cent :rad rad})\n#'user/circle\nuser=> (defmethod tos :line [l] (str \"Line:\" (l :p1) (l :p2)))\n#<MultiFn clojure.lang.MultiFn@73aecc3a>\nuser=> (defmethod tos :circle [c] (str \"Circle:\" (c :cent) (c :rad)))\n#<MultiFn clojure.lang.MultiFn@73aecc3a>\nuser=> (def cc (circle [2 3] 3.3))\n#'user/cc\nuser=> (def ll (line [1 1][0 0]))\n#'user/ll\nuser=> (tos cc)\n\"Circle:[2 3]3.3\"\nuser=> (tos ll)\n\"Line:[1 1][0 0]\"\nuser=> (remove-method tos :line)\n#<MultiFn clojure.lang.MultiFn@73aecc3a>\nuser=> (tos ll)\njava.lang.IllegalArgumentException: No method in multimethod 'tos' for dispatch\nvalue: :line (NO_SOURCE_FILE:0)\nuser=>\n"}],
   :id 5720,
   :name "remove-method",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5720"},
  "clojure.zip/right"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6116,
   :name "right",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6116"},
  "incanter.stats/sweep"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3353,
   :name "sweep",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3353"},
  "swank.commands.inspector/inspect-frame-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4214,
   :name "inspect-frame-var",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4214"},
  "leiningen.pom/relative-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3572,
   :name "relative-path",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3572"},
  "incanter.stats/pdf-gamma"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3320,
   :name "pdf-gamma",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3320"},
  "clojure.contrib.test-is/join-fixtures"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1363,
   :name "join-fixtures",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1363"},
  "circumspec.runner/run-tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3731,
   :name "run-tests",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3731"},
  "clojure.contrib.logging/debug"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 51,
     :ns "clojure.contrib.logging",
     :updated_at "2010-11-05 23:05:06.0",
     :function "debug",
     :version 2,
     :created_at "2010-11-05 23:04:35.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(ns whatever\n  (:require [clojure.contrib.logging :as log))\n\n(log/debug \"hello!\")"}],
   :id 654,
   :name "debug",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/654"},
  "clojure.core/sort"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "sort-by",
     :updated_at "2011-08-16 03:07:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1862",
     :line "2343",
     :arglists_comp "[keyfn coll]|[keyfn comp coll]",
     :url_friendly_name "sort-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:00:52.0",
     :function "sort",
     :version 4,
     :created_at "2010-08-11 11:21:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (sort [3 1 2 4])\n(1 2 3 4)\n\nuser=> (sort > (vals {:foo 5, :bar 2, :baz 10}))\n(10 5 2)\n\n;; do not do this, use sort-by instead\nuser=> (sort #(compare (last %1) (last %2)) {:b 1 :c 3 :a  2})\n([:b 1] [:a 2] [:c 3])\n\n;; like this:\nuser=> (sort-by last {:b 1 :c 3 :a 2})\n([:b 1] [:a 2] [:c 3])"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 04:22:24.0",
     :function "sort",
     :version 5,
     :created_at "2011-05-25 04:16:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; make a struct 'goods'. it assumes that every goods has\n;; its id number and price.\n(defstruct goods :id :price)\n\n;; generate data.\n(def data (map #(struct goods %1 %2)\n\t       (shuffle (range 0 10)) (shuffle\n\t\t\t\t       (into (range 100 500 100)\n\t\t\t\t\t     (range 100 500 100)))))\n\n(defn comp-goods-price\n  \"a compare function by :price of the struct 'goods.' the sort order \n   is superior to the lower price and if the price is same, it is \n   superior to the lower id.\"\n  [el1 el2]\n  (if (or  (< (:price el1) (:price el2))\n\t  (and (= (:price el1) (:price el2))(< (:id el1) (:id el2))))\n    true\n    false))\n\nuser> data\n({:id 1, :price 300} {:id 6, :price 100} {:id 3, :price 100} {:id 4, :price 400} {:id 0, :price 300} {:id 2, :price 200} {:id 5, :price 200} {:id 8, :price 400})\nuser> (sort (comp comp-goods-price) data)\n({:id 3, :price 100} {:id 6, :price 100} {:id 2, :price 200} {:id 5, :price 200} {:id 0, :price 300} {:id 1, :price 300} {:id 4, :price 400} {:id 8, :price 400})\nuser> (sort-by :price < data) ; compare this with the above.\n({:id 6, :price 100} {:id 3, :price 100} {:id 2, :price 200} {:id 5, :price 200} {:id 1, :price 300} {:id 0, :price 300} {:id 4, :price 400} {:id 8, :price 400})\n\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-27 00:33:21.0",
     :function "sort",
     :version 2,
     :created_at "2012-03-14 17:35:49.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Warning: You can sort a Java array and get back a sorted immutable Clojure\n;; data structure, but it will also change the input Java array, by sorting it.\n;; Copy the array before sorting if you want to avoid this.\n\nuser=> (def x (to-array [32 11]))\n#'user/x\n\nuser=> (seq x)\n(32 11)\n\nuser=> (def y (sort x))\n#'user/y\n\n;; Return sorted sequence\nuser=> y\n(11 32)\n\nuser=> (class y)\nclojure.lang.ArraySeq\n\n;; but also modifies x, because it used the array to do the sorting.\nuser=> (seq x)\n(11 32)\n\n;; One way to avoid this is copying the array before sorting:\nuser=> (def y (sort (aclone x)))\n#'user/y"}],
   :id 5761,
   :name "sort",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5761"},
  "incanter.distributions/test-statistic-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2934,
   :name "test-statistic-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2934"},
  "clojure.core/identity"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 23:39:44.0",
     :user_id 93,
     :function "identity",
     :version "1.2.0",
     :created_at "2010-07-26 23:39:44.0",
     :library "Clojure Core",
     :library_id 3,
     :body "I don't quite see the usefulness of this :P"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-15 07:25:53.0",
     :user_id 363,
     :function "identity",
     :version "1.2.0",
     :created_at "2011-08-15 07:23:53.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "It's useful for example with -&gt; macro when we eventually want to return its argument (in this case: state)\n\n\n\n(defn example[state]\n    (-> state\n        update-function-1\n        update-function-2\n        identity))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-15 01:59:38.0",
     :user_id 381,
     :function "identity",
     :version "1.2.0",
     :created_at "2011-09-15 01:59:38.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Here is another good example:\n<pre>(some identity ((juxt :foo :bar) {:bar :b}))</pre>\nequivalent to \n<pre> (let [map {:bar b}] (or (:foo map) (:bar map)))"}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:01:56.0",
     :function "identity",
     :version 3,
     :created_at "2010-07-13 18:43:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (identity 4)\n4"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:02:11.0",
     :function "identity",
     :version 4,
     :created_at "2010-07-15 09:04:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (filter identity [1 2 3 nil 4 false true 1234])\n(1 2 3 4 true 1234)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:23:37.0",
     :function "identity",
     :version 3,
     :created_at "2010-07-15 09:06:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map #(%1 %2) (cycle [inc identity]) [1 2 3 4 5 6 7 8 9 10])\n(2 2 4 4 6 6 8 8 10 10)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:44:49.0",
     :function "identity",
     :version 3,
     :created_at "2010-07-26 23:31:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (partition-by identity (sort \"abcdaabccc\"))\n((\\a \\a \\a) (\\b \\b) (\\c \\c \\c \\c) (\\d))\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-16 13:50:21.0",
     :function "identity",
     :version 1,
     :created_at "2011-07-16 13:50:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map first (partition-by identity [1 1 2 3 3 1 1 5 5]))\n(1 2 3 1 5)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-01 09:30:09.0",
     :function "identity",
     :version 1,
     :created_at "2011-08-01 09:30:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (group-by identity \"abracadabra\")\n{\\a [\\a \\a \\a \\a \\a], \\b [\\b \\b], \\r [\\r \\r], \\c [\\c], \\d [\\d]}"}],
   :id 5547,
   :name "identity",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5547"},
  "ring.middleware.reload/wrap-reload"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2689,
   :name "wrap-reload",
   :ns "ring.middleware.reload",
   :url "http://clojuredocs.org/v/2689"},
  "clojure.contrib.generic.collection/seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 394,
   :name "seq",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/394"},
  "clojure.contrib.monadic-io-streams/flush"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 768,
   :name "flush",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/768"},
  "clojure.xml/emit-element"
  {:comments
   [{:namespace_id 351,
     :ns "clojure.xml",
     :updated_at "2011-12-14 20:25:33.0",
     :user_id 148,
     :function "emit-element",
     :version "1.3.0",
     :created_at "2011-12-14 20:25:33.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "you can catch the printed code with the macro <pre>with-out-str</pre> if you want to catch it in variables."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "with-out-str",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1652",
     :line "3674",
     :arglists_comp "[& body]",
     :url_friendly_name "with-out-str",
     :file "clojure/core.clj"}
    {:namespace_id 119,
     :weight 0,
     :name "element",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2565",
     :line "20",
     :arglists_comp "",
     :url_friendly_name "element",
     :file "clojure/xml.clj"}],
   :examples
   [{:namespace_id 351,
     :ns "clojure.xml",
     :updated_at "2011-12-14 20:20:47.0",
     :function "emit-element",
     :version 3,
     :created_at "2011-12-14 20:17:11.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.xml)\n\n;;If just a string it's text inside or something. just print it\n(emit-element \"hello\")\nhello\n\n;;we want a map with a tag\n(emit-element {:tag :hello})\n<hello/>\n\n;;strings works as well (since we're using the \"name\" function)\n(emit-element {:tag \"hello\"})\n<hello/>\n\n;;:attrs is for all the attributes\n(emit-element {:tag :hello :attrs {:place \"world\"}})\n<hello place='world'/>\n\n;;:content is for all the children in the element\n(emit-element {:tag :parent :attrs {:id \"22\" :name \"fritz\"} :content [\n                {:tag :child :attrs {:id \"56\"}} \n                {:tag :child :attrs {:id \"57\"}]}))\n<parent id='22' name='fritz'>\n<child id='56'/>\n<child id='57'/>\n</parent>\n\n;;also, look out for not supplying :content with another xml-ish map:\n(emit-element {:tag :hello :content \"world\"})\n<hello>\njava.lang.NullPointerException (NO_SOURCE_FILE:0)\n\n;;it expects a {:tag :something}\n"}],
   :id 6093,
   :name "emit-element",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6093"},
  "clojure.contrib.duck-streams/writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 259,
   :name "writer",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/259"},
  "clojure.contrib.pprint/compile-format"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1015,
   :name "compile-format",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1015"},
  "clojure.core/persistent!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "transient",
     :updated_at "2011-06-10 13:46:48.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1816",
     :line "2537",
     :arglists_comp "[coll]",
     :url_friendly_name "transient",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-10 14:05:12.0",
     :function "persistent!",
     :version 1,
     :created_at "2011-06-10 14:05:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (def foo (transient [1 2 3]))\n#'user/foo\nuser> foo\n#<TransientVector clojure.lang.PersistentVector$TransientVector@12c9b4d1>\nuser> (persistent! foo)\n[1 2 3]\nuser> foo\n#<TransientVector clojure.lang.PersistentVector$TransientVector@12c9b4d1>\nuser> (conj! foo 4)\nâ†’ ERROR:Transient used after persistent! call\nuser> (persistent! foo)\nâ†’ ERROR: Transient used after persistent! call"}],
   :id 5658,
   :name "persistent!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5658"},
  "clj-ssh.ssh/make-identity"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1479,
   :name "make-identity",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1479"},
  "clojure.contrib.datalog.literals/join-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 219,
   :name "join-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/219"},
  "clojure.reflect/Reflector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5955,
   :name "Reflector",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5955"},
  "clojure.java.browse/*open-url-script*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5876,
   :name "*open-url-script*",
   :ns "clojure.java.browse",
   :url "http://clojuredocs.org/v/5876"},
  "clojure.contrib.pprint.utilities/consume"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 851,
   :name "consume",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/851"},
  "swank.commands.xref/swank.commands.xref.proxy$java.io.PushbackReader$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4246,
   :name "swank.commands.xref.proxy$java.io.PushbackReader$0",
   :ns "swank.commands.xref",
   :url "http://clojuredocs.org/v/4246"},
  "clj-swing.button/check-box"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5159,
   :name "check-box",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5159"},
  "clojure.core/+"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5315,
   :name "+",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5315"},
  "ring.util.codec/base64-decode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2644,
   :name "base64-decode",
   :ns "ring.util.codec",
   :url "http://clojuredocs.org/v/2644"},
  "clojure.contrib.seq-utils/partition-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1173,
   :name "partition-by",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1173"},
  "circumspec.colorize/str->ansi-color-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3620,
   :name "str->ansi-color-str",
   :ns "circumspec.colorize",
   :url "http://clojuredocs.org/v/3620"},
  "incanter.core/group-on"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2824,
   :name "group-on",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2824"},
  "incanter.stats/chisq-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3291,
   :name "chisq-test",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3291"},
  "swank.util.class-browse/java-version"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4129,
   :name "java-version",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4129"},
  "incanter.processing/TRIANGLE_STRIP"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3191,
   :name "TRIANGLE_STRIP",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3191"},
  "incanter.processing/MODEL"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3141,
   :name "MODEL",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3141"},
  "clojure.contrib.string/chop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1342,
   :name "chop",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1342"},
  "clj-swing.button/radio-button"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5151,
   :name "radio-button",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5151"},
  "clojure.contrib.jmx/maybe-atomize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 554,
   :name "maybe-atomize",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/554"},
  "clojure.contrib.datalog.util/keys-to-vals"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 192,
   :name "keys-to-vals",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/192"},
  "clojure.contrib.pprint/compiled-format1028"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5230,
   :name "compiled-format1028",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5230"},
  "clojure.pprint/pprint"
  {:comments [],
   :see-alsos
   [{:namespace_id 109,
     :weight 1,
     :name "pp",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2398",
     :line "254",
     :arglists_comp "[]",
     :url_friendly_name "pp",
     :file "clojure/pprint/pprint_base.clj"}
    {:namespace_id 340,
     :weight 2,
     :name "print-table",
     :updated_at "2012-02-21 21:43:47.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:14:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5943",
     :line "11",
     :arglists_comp "[ks rows]|[rows]",
     :url_friendly_name "print-table",
     :file "clojure/pprint/print_table.clj"}],
   :examples
   [{:namespace_id 109,
     :ns "clojure.pprint",
     :updated_at "2010-09-26 04:36:49.0",
     :function "pprint",
     :version 3,
     :created_at "2010-07-14 19:29:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def *map* (zipmap \n                    [:a :b :c :d :e] \n                    (repeat \n                      (zipmap [:a :b :c :d :e] \n                        (take 5 (range))))))\n#'user/*map*\nuser=> *map*\n{:e {:e 4, :d 3, :c 2, :b 1, :a 0}, :d {:e 4, :d 3, :c 2, :b 1, :a 0}, :c {:e 4, :d 3, :c 2, :b 1, :a 0}, :b {:e 4, :d 3, :c 2, :b 1, :a 0}, :a {:e 4, :d 3, :c 2, :b 1, :a 0}}\n\nuser=> (clojure.pprint/pprint *map*)\n{:e {:e 4, :d 3, :c 2, :b 1, :a 0},\n :d {:e 4, :d 3, :c 2, :b 1, :a 0},\n :c {:e 4, :d 3, :c 2, :b 1, :a 0},\n :b {:e 4, :d 3, :c 2, :b 1, :a 0},\n :a {:e 4, :d 3, :c 2, :b 1, :a 0}}\nnil\n"}],
   :id 5937,
   :name "pprint",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5937"},
  "leiningen.jar/get-jar-filename"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3557,
   :name "get-jar-filename",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3557"},
  "clojure.contrib.lazy-xml/emit"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 50,
     :ns "clojure.contrib.lazy-xml",
     :updated_at "2011-04-27 00:33:09.0",
     :function "emit",
     :version 1,
     :created_at "2011-04-27 00:33:09.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(require 'clojure.contrib.lazy-xml)\n\n(clojure.contrib.lazy-xml/emit  \n  {:tag :div \n   :attrs {:style \"border:1px solid red\"} \n   :content [{:tag :p :content [\"This is a div\"]}]}\n  :indent 4)"}],
   :id 627,
   :name "emit",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/627"},
  "clojure.contrib.error-kit/handle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 280,
   :name "handle",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/280"},
  "clj-ssh.keychain/passphrase"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1452,
   :name "passphrase",
   :ns "clj-ssh.keychain",
   :url "http://clojuredocs.org/v/1452"},
  "incanter.processing/SOFT_LIGHT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2996,
   :name "SOFT_LIGHT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2996"},
  "incanter.processing/filter-kind"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3018,
   :name "filter-kind",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3018"},
  "clojure.core/cast"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-11 22:01:56.0",
     :function "cast",
     :version 1,
     :created_at "2010-11-11 22:01:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (cast Integer 1)  \n1\n"}],
   :id 5402,
   :name "cast",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5402"},
  "net.cgrand.enlive-html/get-resource"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3847,
   :name "get-resource",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3847"},
  "net.cgrand.enlive-html/nth-of-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3944,
   :name "nth-of-type",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3944"},
  "clojure.contrib.math/exact-integer-sqrt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 699,
   :name "exact-integer-sqrt",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/699"},
  "clojure.contrib.monads/state-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 762,
   :name "state-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/762"},
  "incanter.stats/covariance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3268,
   :name "covariance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3268"},
  "incanter.stats/sample-inv-wishart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2733,
   :name "sample-inv-wishart",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2733"},
  "clojure.core/force"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "delay",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1986",
     :line "619",
     :arglists_comp "[& body]",
     :url_friendly_name "delay",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-23 11:06:16.0",
     :function "force",
     :version 3,
     :created_at "2011-06-23 11:01:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; an example for delay using an event-queue\nuser> (import  [java.util.concurrent PriorityBlockingQueue])\njava.util.concurrent.PriorityBlockingQueue\nuser> (defn create-event-element [delayed-event tme]\n  (struct event delayed-event tme))\n#'user/create-event-element\nuser> (defn comp-queue [e1 e2]\n  (if (< (:time e1) (:time e2))\n    true false))\n#'user/comp-queue\nuser> (defn update [n]\n\t(reset! c n))\n#'user/update\nuser> (defn create-event-queue [comp-queue size]\n  (new PriorityBlockingQueue size (comp comp-queue)))\n#'user/create-event-queue\nuser> (def queue (create-event-queue comp-queue 10))\n#'user/queue\nuser> (def elements (take 10 (repeatedly \n\t\t\t      (fn[](create-event-element \n\t\t\t\t    (delay (update (rand-int 20)))\n\t\t\t\t    (rand))))))\n#'user/elements\nuser> (def c (atom 0))\n#'user/c\nuser> @c\n0\nuser> (doseq [e elements]\n\t     (.add queue e))\nnil\nuser> (dotimes [_ 10]\n\t       (let [e (.poll queue)]\n\t\t    (println \"c=\" @c)\n\t\t    (print \"time=\" (:time e) \":\")\n\t\t    (println (force (:object e)))))\nc= 0\ntime= 0.07805244345581108 :19\nc= 19\ntime= 0.24297414417455565 :6\nc= 6\ntime= 0.24427040715816817 :0\nc= 0\ntime= 0.24938478920862384 :17\nc= 17\ntime= 0.33612588239752494 :6\nc= 6\ntime= 0.5148481493716295 :5\nc= 5\ntime= 0.5823642080700586 :7\nc= 7\ntime= 0.7674970100941858 :4\nc= 4\ntime= 0.9206272921555505 :14\nc= 14\ntime= 0.9958255204018474 :4\nnil\nuser> @c\n4\nuser> (def elements (take 10 (repeatedly \n\t\t\t      (fn[](create-event-element \n\t\t\t\t    (delay (update (rand-int 20)))\n\t\t\t\t    (rand))))))\n#'user/elements\n;; if we check 'element', delay objects will be evaluated. The below is\n;; this example. Please compare the above with the below.\nuser> elements  \n({:object #<Delay@37a63e06: 16>, :time 0.48566816399656854} {:object #<Delay@3321875: 19>, :time 0.9374202154797486} {:object #<Delay@4de3aaf6: 17>, :time 0.3271116626875401} {:object #<Delay@1ded246d: 15>, :time 0.8843712542267577} {:object #<Delay@3bf27f74: 10>, :time 0.86383171974926} {:object #<Delay@2d8db76b: 14>, :time 0.2120086056700251} {:object #<Delay@3304e92a: 5>, :time 0.9406336968276247} {:object #<Delay@767de91: 0>, :time 0.2150071400135528} {:object #<Delay@34450563: 7>, :time 0.7520042839572664} {:object #<Delay@1f64c164: 1>, :time 0.6264819751284463})\n;; The object of the last elements is #<Delay@1f64c164: 1>. Therefore,\n;; This indicates the atom 'c' has already updated.\nuser> @c  \n1 \nuser> (doseq [e elements]\n\t     (.add queue e))\nnil\n;; 'atom c' has never been updated because it has already\n;; been evaluated.\nuser> (dotimes [_ 10]\n\t       (let [e (.poll queue)]\n\t\t    (println \"c=\" @c)\n\t\t    (print \"time=\" (:time e) \":\")\n\t\t    (println (force (:object e)))))\nc= 1\ntime= 0.2120086056700251 :14\nc= 1\ntime= 0.2150071400135528 :0\nc= 1\ntime= 0.3271116626875401 :17\nc= 1\ntime= 0.48566816399656854 :16\nc= 1\ntime= 0.6264819751284463 :1\nc= 1\ntime= 0.7520042839572664 :7\nc= 1\ntime= 0.86383171974926 :10\nc= 1\ntime= 0.8843712542267577 :15\nc= 1\ntime= 0.9374202154797486 :19\nc= 1\ntime= 0.9406336968276247 :5\nnil\nuser> "}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-24 02:05:19.0",
     :function "force",
     :version 2,
     :created_at "2011-06-24 01:58:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; the tarai benchmark comparing non-lazy version with lazy-version\n(defn tarai [x y z]\n  (if (<= (x) (y))\n      (y)\n      (recur (fn [] (tarai (fn [] (- (x) 1)) y z))\n             (fn [] (tarai (fn [] (- (y) 1)) z x))\n             (fn [] (tarai (fn [] (- (z) 1)) x y)))))\n\n(defn tarai-d [x y z]\n  (if (<= (force x) (force y))\n      (force y)\n      (recur (delay (tarai-d (- (force x) 1) y z))\n               (delay (tarai-d (- (force y) 1) z x))\n               (delay (tarai-d (- (force z) 1) x y)))))\n\nuser> (dotimes [_ 10] (time (tarai (fn [] 192) (fn [] 96) (fn [] 0))))\n\"Elapsed time: 139.660729 msecs\"\n\"Elapsed time: 132.493587 msecs\"\n\"Elapsed time: 135.867772 msecs\"\n\"Elapsed time: 132.924774 msecs\"\n\"Elapsed time: 137.491084 msecs\"\n\"Elapsed time: 134.72752 msecs\"\n\"Elapsed time: 132.969652 msecs\"\n\"Elapsed time: 135.795754 msecs\"\n\"Elapsed time: 134.261724 msecs\"\n\"Elapsed time: 138.059968 msecs\"\n\nnil\nuser> (dotimes [_ 10 ]  (time (tarai-d 192 96 0)))\n\"Elapsed time: 3.181795 msecs\"\n\"Elapsed time: 2.960096 msecs\"\n\"Elapsed time: 3.000855 msecs\"\n\"Elapsed time: 3.140536 msecs\"\n\"Elapsed time: 3.658821 msecs\"\n\"Elapsed time: 3.319659 msecs\"\n\"Elapsed time: 2.9182 msecs\"\n\"Elapsed time: 3.125442 msecs\"\n\"Elapsed time: 2.944342 msecs\"\n\"Elapsed time: 2.951613 msecs\"\nnil"}],
   :id 5523,
   :name "force",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5523"},
  "incanter.processing/ALT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3139,
   :name "ALT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3139"},
  "clojure.main/main"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5912,
   :name "main",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5912"},
  "clojure.contrib.datalog.literals/atomic-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 221,
   :name "atomic-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/221"},
  "clojure.core/set!"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-22 02:14:34.0",
     :user_id 152,
     :function "set!",
     :version "1.2.0",
     :created_at "2011-02-22 02:14:34.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "As of Clojure 1.2, the basic info for set! has moved to http://clojure.org/vars."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-03 14:48:47.0",
     :function "set!",
     :version 1,
     :created_at "2011-06-03 14:48:47.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "(set! var-symbol expr)"}],
   :id 6137,
   :name "set!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6137"},
  "incanter.core/mmult"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2747,
   :name "mmult",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2747"},
  "incanter.charts/box-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2768,
   :name "box-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2768"},
  "clojure.contrib.datalog.database/add-index"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 151,
   :name "add-index",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/151"},
  "clojure.zip/branch?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6098,
   :name "branch?",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6098"},
  "clojure.core/alter-var-root"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 3,
     :name "with-redefs",
     :updated_at "2012-11-09 06:25:12.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5850",
     :line "6487",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "with-redefs",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 2,
     :name "with-redefs-fn",
     :updated_at "2012-11-08 09:09:54.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:41.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5851",
     :line "6467",
     :arglists_comp "[binding-map func]",
     :url_friendly_name "with-redefs-fn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:59:32.0",
     :function "alter-var-root",
     :version 4,
     :created_at "2010-09-07 19:34:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn sqr [n] \n  \"Squares a number\"\n  (* n n))\n\nuser=> (sqr 5)\n25\n\nuser=> (alter-var-root \n         (var sqr)                     ; var to alter\n         (fn [f]                       ; fn to apply to the var's value\n           #(do (println \"Squaring\" %) ; returns a new fn wrapping old fn\n                (f %))))\n\nuser=> (sqr 5)\nSquaring 5\n25\n"}],
   :id 5349,
   :name "alter-var-root",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5349"},
  "clj-ssh.ssh/capitalize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1483,
   :name "capitalize",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1483"},
  "clojure.contrib.mock.test-adapter/validate-counts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 739,
   :name "validate-counts",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/739"},
  "incanter.processing/print-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3124,
   :name "print-matrix",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3124"},
  "leiningen.pom/make-git-scm"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3564,
   :name "make-git-scm",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3564"},
  "clojure.core/extend-protocol"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "extend",
     :updated_at "2011-02-02 19:35:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1597",
     :line "630",
     :arglists_comp "[atype & proto+mmaps]",
     :url_friendly_name "extend",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "extend-type",
     :updated_at "2011-09-10 10:01:01.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1821",
     :line "698",
     :arglists_comp "[t & specs]",
     :url_friendly_name "extend-type",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defprotocol",
     :updated_at "2010-11-15 06:13:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2062",
     :line "576",
     :arglists_comp "[name & opts+sigs]",
     :url_friendly_name "defprotocol",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-04 21:58:21.0",
     :function "extend-protocol",
     :version 2,
     :created_at "2011-02-24 05:19:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defprotocol XmlNode\n  (as-xml [this]))\n\n(defrecord User [^Integer id ^String name ^java.util.Date dob])\n\n; protocols can be extended to existing types and user defined types\n(extend-protocol XmlNode\n  Integer\n  (as-xml [this] (str this))\n  String\n  (as-xml [this] (identity this))\n  java.util.Date\n  (as-xml [this] (-> (java.text.SimpleDateFormat. \"yyyy-MM-dd HH:mm:ss\") .format this))\n  User\n  (as-xml [this] (str \"<user>\"\n                      \"<id>\" (as-xml (:id this)) \"</id>\"\n                      \"<name>\" (as-xml (:name this)) \"</name>\"\n                      \"<dob>\" (as-xml (:dob this)) \"</dob>\")))"}],
   :id 5497,
   :name "extend-protocol",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5497"},
  "swank.util.class-browse/nested-class?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4133,
   :name "nested-class?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4133"},
  "clojure.core.protocols/arr-impl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5856,
   :name "arr-impl",
   :ns "clojure.core.protocols",
   :url "http://clojuredocs.org/v/5856"},
  "incanter.processing/OPAQUE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2989,
   :name "OPAQUE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2989"},
  "clojure.walk/postwalk"
  {:comments [],
   :see-alsos
   [{:namespace_id 118,
     :weight 0,
     :name "prewalk",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2557",
     :line "62",
     :arglists_comp "[f form]",
     :url_friendly_name "prewalk",
     :file "clojure/walk.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "postwalk-demo",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2554",
     :line "81",
     :arglists_comp "[form]",
     :url_friendly_name "postwalk-demo",
     :file "clojure/walk.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "postwalk-replace",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2559",
     :line "119",
     :arglists_comp "[smap form]",
     :url_friendly_name "postwalk-replace",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 118,
     :ns "clojure.walk",
     :updated_at "2010-10-14 09:22:24.0",
     :function "postwalk",
     :version 1,
     :created_at "2010-10-14 09:22:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(use 'clojure.walk)\n(let [counter (atom -1)]\n   (postwalk (fn [x]\n                [(swap! counter inc) x])\n              {:a 1 :b 2}))\n\n=> [6 {2 [[0 :a] [1 1]], 5 [[3 :b] [4 2]]}] "}],
   :id 6076,
   :name "postwalk",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6076"},
  "clojure.contrib.accumulators/empty-tuple"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6,
   :name "empty-tuple",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/6"},
  "incanter.core/bind-columns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2721,
   :name "bind-columns",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2721"},
  "lancet/tstamp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3403,
   :name "tstamp",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3403"},
  "clojure.contrib.probabilities.finite-distributions/join-with"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1083,
   :name "join-with",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1083"},
  "clojure.core/subseq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "rsubseq",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1719",
     :line "4042",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "rsubseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-map",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1494",
     :line "336",
     :arglists_comp "[& keyvals]",
     :url_friendly_name "sorted-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-set",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2099",
     :line "350",
     :arglists_comp "[& keys]",
     :url_friendly_name "sorted-set",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-map-by",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1783",
     :line "343",
     :arglists_comp "[comparator & keyvals]",
     :url_friendly_name "sorted-map-by",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-set-by",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1934",
     :line "356",
     :arglists_comp "[comparator & keys]",
     :url_friendly_name "sorted-set-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:51:35.0",
     :function "subseq",
     :version 3,
     :created_at "2010-08-12 06:07:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Note, that collection passed to subseq must implement Sorted.  \n;; Just passing a collection that has been sorted is not enough.\n\nuser=> (subseq [1 2 3 4] > 2)\njava.lang.ClassCastException: clojure.lang.PersistentVector cannot be cast to clojure.lang.Sorted (NO_SOURCE_FILE:0)\n\nuser=> (subseq (sorted-set 1 2 3 4) > 2)\n(3 4)\n"}],
   :id 5777,
   :name "subseq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5777"},
  "clojure.contrib.mock/make-arg-checker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5247,
   :name "make-arg-checker",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5247"},
  "lancet/condition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3408,
   :name "condition",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3408"},
  "clojure.contrib.prxml/*html-compatible*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 353,
   :name "*html-compatible*",
   :ns "clojure.contrib.prxml",
   :url "http://clojuredocs.org/v/353"},
  "clojure.contrib.def/name-with-attributes"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 20,
     :ns "clojure.contrib.def",
     :updated_at "2011-11-10 08:35:47.0",
     :function "name-with-attributes",
     :version 5,
     :created_at "2011-11-10 08:24:07.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; Here I use name-with-attributes to create a macro writing\n;; macro defmacro! that accepts the same args as defmacro itself,\n;; i.e., an optional docstring and an optional metadata map.\n;; (In contrast to defmacro, overloading is not supported.)\n\n;; Only a helper...\n(defn bang-symbol?\n  \"Returns true, if sym is a symbol with name ending in a exclamation\n  mark (bang).\"\n  [sym]\n  (and (symbol? sym)\n       (= (last (name sym)) \\!)))\n\n(defmacro defmacro!\n  \"Defines a macro name with the given docstring, args, and body.\n  All args ending in an exclamation mark (!, bang) will be evaluated\n  only once in the expansion, even if they are unquoted at several\n  places in body.  This is especially important for args whose\n  evaluation has side-effecs or who are expensive to evaluate.\"\n  {:arglists '([name doc-string? attr-map? [params*] body])}\n  [name & args]\n  (let [[name attrs] (tm/name-with-attributes name args)\n        meta-map     (meta name)\n        args         (first attrs)\n        body         (next attrs)\n        bang-syms    (filter bang-symbol? (flatten args))\n        rep-map      (apply hash-map\n                            (mapcat (fn [s] [s `(quote ~(gensym))])\n                                    bang-syms))]\n    `(defmacro ~name\n       ~@(when (seq meta-map) [meta-map])\n       ~args\n       `(let ~~(vec (mapcat (fn [[s t]] [t s]) rep-map))\n          ~(clojure.walk/prewalk-replace ~rep-map ~@body)))))"}],
   :id 86,
   :name "name-with-attributes",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/86"},
  "incanter.core/exp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2923,
   :name "exp",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2923"},
  "clojure.contrib.jmx/operations"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 574,
   :name "operations",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/574"},
  "incanter.processing/no-lights"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3076,
   :name "no-lights",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3076"},
  "incanter.charts/box-plot*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2816,
   :name "box-plot*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2816"},
  "clojure.contrib.seq/includes?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1166,
   :name "includes?",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1166"},
  "lancet/jar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3405,
   :name "jar",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3405"},
  "clojure.contrib.sql/with-connection"
  {:comments
   [{:namespace_id 83,
     :ns "clojure.contrib.sql",
     :updated_at "2010-10-20 19:42:07.0",
     :user_id 51,
     :function "with-connection",
     :version "1.2.0",
     :created_at "2010-10-20 19:41:19.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "[This helpful example](http://en.wikibooks.org/wiki/Clojure_Programming/Examples/JDBC_Examples) shows many of the contrib.sql functions you'd use for writing blog software."}],
   :see-alsos [],
   :examples
   [{:namespace_id 83,
     :ns "clojure.contrib.sql",
     :updated_at "2010-07-27 15:50:35.0",
     :function "with-connection",
     :version 2,
     :created_at "2010-07-27 15:50:35.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "<pre>\r\n(with-connection {:classname \"oracle.jdbc.driver.OracleDriver\"\r\n                  :subprotocol \"oracle\"\r\n                  :subname (str \"thin:@//\" host \":1521/\" db)\r\n                  :user \"joe\"\r\n                  :password \"secret\"}\r\n  ...)\r\n</pre>"}],
   :id 1239,
   :name "with-connection",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1239"},
  "clojure.core/>="
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:02:47.0",
     :function ">=",
     :version 3,
     :created_at "2010-07-28 05:59:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (>= 2 1)\ntrue\nuser=> (>= 2 2)\ntrue\nuser=> (>= 1 2)\nfalse\nuser=> (>= 6 5 4 3 2)\ntrue"}],
   :id 5334,
   :name ">=",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5334"},
  "incanter.datasets/get-dataset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2929,
   :name "get-dataset",
   :ns "incanter.datasets",
   :url "http://clojuredocs.org/v/2929"},
  "clojure.contrib.dataflow/display-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 123,
   :name "display-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/123"},
  "circumspec.report.nested/story-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3706,
   :name "story-lines",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3706"},
  "clj-swing.button/button-group"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5150,
   :name "button-group",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5150"},
  "clojure.contrib.pprint/*code-table*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 927,
   :name "*code-table*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/927"},
  "clojure.contrib.pprint/pprint-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1034,
   :name "pprint-set",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1034"},
  "clojure.contrib.zip-filter.xml/xml->"
  {:comments
   [{:namespace_id 96,
     :ns "clojure.contrib.zip-filter.xml",
     :updated_at "2011-12-14 18:11:37.0",
     :user_id 148,
     :function "xml->",
     :version "1.2.0",
     :created_at "2011-12-14 18:11:37.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "This library is moved to clojure/data.zip ( https://github.com/clojure/data.zip ) in the 1.3.0 version of clojure."}],
   :see-alsos
   [{:namespace_id 96,
     :weight 0,
     :name "xml1->",
     :updated_at "2010-10-20 04:42:01.0",
     :version "1.2.0",
     :created_at "2010-07-14 21:02:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1443",
     :line "80",
     :arglists_comp "[loc & preds]",
     :url_friendly_name "xml1->",
     :file "clojure/contrib/zip_filter/xml.clj"}],
   :examples
   [{:namespace_id 96,
     :ns "clojure.contrib.zip-filter.xml",
     :updated_at "2011-12-14 20:58:59.0",
     :function "xml->",
     :version 6,
     :created_at "2011-12-14 18:09:50.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";;convenience method for parsing up an xml tree\n\n(defn parse-str [s]\n  (zip/xml-zip (xml/parse (new org.xml.sax.InputSource\n                               (new java.io.StringReader s)))))\n\n;;load a simple xml-tree from string\n\n(def sometree (parse-str \"<TopNode id='1'><ParentNode id='2'><ChildrenNode id='3'/></ParentNode></TopNode>\"))\n\n=> [{:tag :TopNode, :attrs {:id \"1\"}, :content\n   [{:tag :ParentNode, :attrs {:id \"2\"}, :content\n   [{:tag :ChildrenNode, :attrs {:id \"3\"}, :content nil}]}]} nil]\n\n;;now we go down the tree to ParentNode, the tree looks quite turned upside down as it has the form {:l \"left part of tree\" :p \"what the parent looks like\" :r \"what the right part looks like\"}\n\n(xml-> sometree zip/down)\n=>\n([{:tag :ParentNode, :attrs {:id \"2\"}, :content \n [{:tag :ChildrenNode, :attrs {:id \"3\"}, :content nil}]} \n     {:l [], :pnodes \n [{:tag :TopNode, :attrs {:id \"1\"}, :content \n [{:tag :ParentNode, :attrs {:id \"2\"}, :content \n [{:tag :ChildrenNode, :attrs {:id \"3\"}, :content nil}]}]}], :ppath nil, \n      :r nil}])\n\n;;This renders nothing, since we always select children nodes\n\n(xml-> sometree :TopNode)\n=>()\n\n;;This one also ends up as empty as ChildrenNode is a grandchildren compared to the topnode\n\n(xml-> sometree :ChildrenNode)\n=>()\n\n;;Lets now try ParentNode!\n\n(xml-> sometree :ParentNode)\n=> \n([{:tag :ParentNode, :attrs {:id \"2\"}, :content \n [{:tag :ChildrenNode, :attrs {:id \"3\"}, :content nil}]} \n   {:l [], :pnodes \n [{:tag :TopNode, :attrs {:id \"1\"}, :content \n [{:tag :ParentNode, :attrs {:id \"2\"}, :content \n [{:tag :ChildrenNode, :attrs {:id \"3\"}, :content nil}]}]}], :ppath nil, :r nil}])\n\n;;Observe that the first thing we get is the ParentNode and it's ChildrenNode. To the left \"back\" we see the tree as it would be if we when up one level, to the right there's nothing.\n\n;;Query: What's the id's of (all) the ChildrenNode under the parent node?\n;;we have the convenience-method (attr :attribute-keyword) to help:\n\n(xml-> sometree :ParentNode :ChildrenNode (attr :id))\n(\"3\")\n\n;;Go to the ParentNode, ChildrenNode, remove the ChildrenNode and return RootNode\n\n(xml-> sometree :ParentNode :ChildrenNode zip/remove zip/root)\n({:tag :TopNode, :attrs {:id \"1\"}, :content \n[{:tag :ParentNode, :attrs {:id \"2\"}, :content nil}]})\n\n;;Ta da! - No ChildrenNode left!"}],
   :id 1447,
   :name "xml->",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1447"},
  "incanter.processing/size"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3198,
   :name "size",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3198"},
  "clojure.core/bytes"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "byte-array",
     :updated_at "2011-08-21 13:51:48.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1993",
     :line "4152",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "byte-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-17 05:41:10.0",
     :function "bytes",
     :version 1,
     :created_at "2012-07-17 05:41:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; for fast interop\nuser=> (bytes (byte-array (map (comp byte int) \"ascii\")))\n#<byte[] [B@7a004f62>\nuser=> (def the-bytes *1)\n#'user/the-bytes\nuser=> (defn get-byte [the-bytes i] (aget the-bytes i))\n#'user/get-byte Reflection warning, NO_SOURCE_PATH:1 - call to aget can't be resolved.\n\nuser=> (defn get-byte [the-bytes i] \n         (let [the-bytes (bytes the-bytes)] \n           (aget the-bytes i)))\n#'user/get-byte\nuser=> (get-byte the-bytes 0)\n97\n"}],
   :id 5400,
   :name "bytes",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5400"},
  "clojure.java.io/output-stream"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 0,
     :name "writer",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2142",
     :line "98",
     :arglists_comp "[x & opts]",
     :url_friendly_name "writer",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "input-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/2153",
     :line "115",
     :arglists_comp "[x & opts]",
     :url_friendly_name "input-stream",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "IOFactory",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2162",
     :line "63",
     :arglists_comp "",
     :url_friendly_name "iofactory",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 336,
     :ns "clojure.java.io",
     :updated_at "2012-05-28 23:42:22.0",
     :function "output-stream",
     :version 2,
     :created_at "2012-05-28 23:30:14.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(:use [clojure.java.io :only [output-stream]])\n\n(defn use-output-stream []\n  (with-open [o (output-stream \"test.txt\")]\n    (.write o 65))) ; Writes 'A'"}],
   :id 5893,
   :name "output-stream",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5893"},
  "lancet/manifest"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3430,
   :name "manifest",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3430"},
  "circumspec.report.nested/indents"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3709,
   :name "indents",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3709"},
  "net.licenser.sandbox.jvm/domain"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5130,
   :name "domain",
   :ns "net.licenser.sandbox.jvm",
   :url "http://clojuredocs.org/v/5130"},
  "incanter.stats/kendalls-tau"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3315,
   :name "kendalls-tau",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3315"},
  "clojure.contrib.generic.arithmetic/qsym"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 389,
   :name "qsym",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/389"},
  "incanter.processing/remap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3017,
   :name "remap",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3017"},
  "clojure.inspector/get-child-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5866,
   :name "get-child-count",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5866"},
  "clojure.core/read-line"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:46:46.0",
     :function "read-line",
     :version 3,
     :created_at "2010-08-24 00:24:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (read-line)\nline to be read      ;Type text into console\n\"line to be read\"\n"}],
   :id 5703,
   :name "read-line",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5703"},
  "lancet/genkey"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3451,
   :name "genkey",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3451"},
  "incanter.charts/set-stroke"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2828,
   :name "set-stroke",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2828"},
  "clojure.contrib.jmx/guess-attribute-typename"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 562,
   :name "guess-attribute-typename",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/562"},
  "swank.commands.basic/quit-lisp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4083,
   :name "quit-lisp",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4083"},
  "clojure.repl/stack-element-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5977,
   :name "stack-element-str",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5977"},
  "clojure.test/inc-report-counter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6032,
   :name "inc-report-counter",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6032"},
  "net.cgrand.enlive-html/last-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3846,
   :name "last-child",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3846"},
  "clojure.walk/walk"
  {:comments [],
   :see-alsos
   [{:namespace_id 118,
     :weight 1,
     :name "postwalk",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/2558",
     :line "53",
     :arglists_comp "[f form]",
     :url_friendly_name "postwalk",
     :file "clojure/walk.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "prewalk",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2557",
     :line "62",
     :arglists_comp "[f form]",
     :url_friendly_name "prewalk",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-03-01 18:18:17.0",
     :function "walk",
     :version 1,
     :created_at "2012-03-01 18:18:17.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.walk)\n\nuser=> (walk #(* 2 %) #(apply + %) [1 2 3 4 5])\n30\n\nuser=> (walk second #(apply max %) [ [1 2] [3 4] [5 6] ])\n6\n\nuser=> (walk first #(apply max %) [ [1 2] [3 4] [5 6] ])\n5\n\nuser=> (walk first reverse [ [1 2] [3 4] [5 6] ])\n(5 3 1)"}
    {:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-04-24 23:02:19.0",
     :function "walk",
     :version 2,
     :created_at "2012-04-24 22:55:58.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(require '[clojure.walk :as w])\n\nuser=> (w/walk (fn [[k v]] [k (* 10 v)]) identity {:a 1 :b 2 :c 3})\n{:a 10, :c 30, :b 20}\n\nuser=> (w/postwalk #(if (number? %) (* 2 %) %) [[1 2 3] [4 7 2] [2 5 2]])\n[[2 4 6] [8 14 4] [4 10 4]]\n\nuser=> (let [s [1 '(2 3 [1])]] \n         (w/postwalk #(if (seq? %) (vec %) %) s))\n[1 [2 3 [1]]]\n\nuser=> (w/walk (comp vec reverse) identity {0 :start 1 :inprogress 2 :end})\n{:start 0, :inprogress 1, :end 2}"}],
   :id 6083,
   :name "walk",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6083"},
  "circumspec.watch/load-source-and-test-namespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3776,
   :name "load-source-and-test-namespace",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3776"},
  "leiningen.compile/eval-in-project"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3512,
   :name "eval-in-project",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3512"},
  "net.cgrand.enlive-html/has-class"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3945,
   :name "has-class",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3945"},
  "incanter.processing/CHATTER"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3088,
   :name "CHATTER",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3088"},
  "clojure.contrib.seq-utils/indexed"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1172,
   :name "indexed",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1172"},
  "incanter.processing/DIRECTIONAL"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3006,
   :name "DIRECTIONAL",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3006"},
  "clojure.core/prn"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "println",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/2015",
     :line "2865",
     :arglists_comp "[& more]",
     :url_friendly_name "println",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "pr",
     :updated_at "2011-09-07 03:48:35.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/2017",
     :line "2815",
     :arglists_comp "[]|[x]|[x & more]",
     :url_friendly_name "pr",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-27 22:55:32.0",
     :function "prn",
     :version 1,
     :created_at "2012-04-27 22:55:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body "user=> (prn \"fred\" 1)\n\"fred\" 1\nnil"}],
   :id 5678,
   :name "prn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5678"},
  "incanter.core/conj-rows"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2887,
   :name "conj-rows",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2887"},
  "midje.checkers/exactly"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4326,
   :name "exactly",
   :ns "midje.checkers",
   :url "http://clojuredocs.org/v/4326"},
  "circumspec.contrib-mocking/calls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3651,
   :name "calls",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3651"},
  "clojure.contrib.ns-utils/dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 734,
   :name "dir",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/734"},
  "incanter.processing/SPOT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3229,
   :name "SPOT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3229"},
  "clojure.contrib.java-utils/file"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 42,
     :ns "clojure.contrib.java-utils",
     :updated_at "2010-09-26 04:15:28.0",
     :function "file",
     :version 5,
     :created_at "2010-07-19 08:37:42.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user=> (require 'clojure.contrib.java-utils)              \nnil\nuser=> (. (clojure.contrib.java-utils/file \".\") exists)\ntrue\nuser=> (. (clojure.contrib.java-utils/file \"...\") exists)\nfalse\nuser=> (. (clojure.contrib.java-utils/file \".\") isFile) \nfalse\nuser=> (. (clojure.contrib.java-utils/file \".\") isDirectory)\ntrue\n\n;; Sugared version\nuser> (.exists (clojure.contrib.java-utils/file \".\"))\ntrue\nuser> (.exists (clojure.contrib.java-utils/file \"...\"))\nfalse\nuser> (.isFile (clojure.contrib.java-utils/file \".\"))\nfalse\nuser> (.isDirectory (clojure.contrib.java-utils/file \".\"))\ntrue\n"}],
   :id 527,
   :name "file",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/527"},
  "clojure.test.junit/junit-report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6059,
   :name "junit-report",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6059"},
  "clojure.test/with-test"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "test",
     :updated_at "2010-11-08 23:04:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1796",
     :line "3735",
     :arglists_comp "[v]",
     :url_friendly_name "test",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "meta",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/2110",
     :line "178",
     :arglists_comp "[obj]",
     :url_friendly_name "meta",
     :file "clojure/core.clj"}
    {:namespace_id 115,
     :weight 2,
     :name "deftest",
     :updated_at "2010-11-08 23:37:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2495",
     :line "593",
     :arglists_comp "[name & body]",
     :url_friendly_name "deftest",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 115,
     :ns "clojure.test",
     :updated_at "2010-11-08 23:24:33.0",
     :function "with-test",
     :version 1,
     :created_at "2010-11-08 23:24:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";with test is the same as using {:test #((is...)(is...))} in the meta data of the function.\n\n(:use 'clojure.test)\n\n(with-test\n    (defn my-function [x y]\n      (+ x y))\n  (is (= 4 (my-function 2 2)))\n  (is (= 7 (my-function 3 4))))\n\n(test #'my-function)            ;(test (var my-function))\n=> :ok"}],
   :id 6048,
   :name "with-test",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6048"},
  "net.cgrand.enlive-html/texts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3893,
   :name "texts",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3893"},
  "net.licenser.sandbox.jvm/sandbox"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5125,
   :name "sandbox",
   :ns "net.licenser.sandbox.jvm",
   :url "http://clojuredocs.org/v/5125"},
  "clojure.core/into"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:03:16.0",
     :function "into",
     :version 3,
     :created_at "2010-07-11 04:04:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (into {} [[1 2] [3 4]])\n{1 2, 3 4}\nuser=> (into [] {1 2, 3 4})\n[[1 2] [3 4]]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-09 22:43:34.0",
     :function "into",
     :version 1,
     :created_at "2011-07-09 22:43:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (into () '(1 2 3))\n(3 2 1)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-16 20:07:03.0",
     :function "into",
     :version 1,
     :created_at "2012-04-16 20:07:03.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn test-key-inclusion-cols\n  \"return all values in column1 that arent' in column2\"\n  [column1 column2]\n  (filter (complement (into #{} column2)) column1))\n"}],
   :id 5563,
   :name "into",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5563"},
  "leiningen.test/form-for-testing-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3582,
   :name "form-for-testing-namespaces",
   :ns "leiningen.test",
   :url "http://clojuredocs.org/v/3582"},
  "incanter.processing/bezier-point"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3026,
   :name "bezier-point",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3026"},
  "clojure.contrib.probabilities.finite-distributions/normalize-cond"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1086,
   :name "normalize-cond",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1086"},
  "clojure.contrib.probabilities.monte-carlo/sample-mean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1104,
   :name "sample-mean",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1104"},
  "clojure.core/with-meta"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "vary-meta",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/1669",
     :line "550",
     :arglists_comp "[obj f & args]",
     :url_friendly_name "vary-meta",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "meta",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/2110",
     :line "178",
     :arglists_comp "[obj]",
     :url_friendly_name "meta",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:10:34.0",
     :function "with-meta",
     :version 3,
     :created_at "2010-08-02 12:07:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (with-meta [1 2 3] {:my \"meta\"})\n[1 2 3]\n\nuser=> (meta (with-meta [1 2 3] {:my \"meta\"}))\n{:my \"meta\"}\n"}],
   :id 5846,
   :name "with-meta",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5846"},
  "lancet/tempfile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3493,
   :name "tempfile",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3493"},
  "clj-swing.combo-box/selected-item"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5173,
   :name "selected-item",
   :ns "clj-swing.combo-box",
   :url "http://clojuredocs.org/v/5173"},
  "clojure.core/when-not"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "when",
     :updated_at "2011-07-27 13:21:24.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2050",
     :line "419",
     :arglists_comp "[test & body]",
     :url_friendly_name "when",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "when-let",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1849",
     :line "1422",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "when-let",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:10:12.0",
     :function "when-not",
     :version 3,
     :created_at "2010-08-02 12:08:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map\n         #(when-not (= %2 %3) [%1 %2 %3])\n         (iterate inc 0)\n         [:a :b :c]\n         [:a :a :a])\n\n(nil [1 :b :a] [2 :c :a])\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:02:50.0",
     :function "when-not",
     :version 1,
     :created_at "2012-04-12 22:02:50.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5839,
   :name "when-not",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5839"},
  "leiningen.core/no-project-needed"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3522,
   :name "no-project-needed",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3522"},
  "net.licenser.sandbox/new-sandbox-compiler"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5113,
   :name "new-sandbox-compiler",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5113"},
  "clojure.contrib.datalog.rules/build-rule"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 161,
   :name "build-rule",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/161"},
  "swank.rpc/register-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4309,
   :name "register-dispatch",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4309"},
  "ring.middleware.keyword-params/wrap-keyword-params"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2670,
   :name "wrap-keyword-params",
   :ns "ring.middleware.keyword-params",
   :url "http://clojuredocs.org/v/2670"},
  "incanter.core/decomp-qr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2866,
   :name "decomp-qr",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2866"},
  "incanter.charts/add-function"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2834,
   :name "add-function",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2834"},
  "clojure.contrib.macro-utils/symbol-macrolet"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 52,
     :ns "clojure.contrib.macro-utils",
     :updated_at "2011-01-05 20:55:06.0",
     :function "symbol-macrolet",
     :version 1,
     :created_at "2011-01-05 20:55:06.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user> (symbol-macrolet [hi (do (println \"Howdy\") 1)] (+ hi 2))\n \nHowdy\n3"}],
   :id 679,
   :name "symbol-macrolet",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/679"},
  "incanter.processing/HARD_LIGHT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3023,
   :name "HARD_LIGHT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3023"},
  "lancet/execon"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3460,
   :name "execon",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3460"},
  "clojure.contrib.zip-filter.xml/tag="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1446,
   :name "tag=",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1446"},
  "clojure.contrib.accumulators/min-max"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 28,
   :name "min-max",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/28"},
  "incanter.charts/add-subtitle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2798,
   :name "add-subtitle",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2798"},
  "clojure.contrib.monads/m-plus"
  {:comments [],
   :see-alsos
   [{:namespace_id 61,
     :weight 0,
     :name "maybe-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/773",
     :line "296",
     :arglists_comp "",
     :url_friendly_name "maybe-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "sequence-m",
     :updated_at "2010-10-20 04:41:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/799",
     :line "309",
     :arglists_comp "",
     :url_friendly_name "sequence-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "set-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/787",
     :line "323",
     :arglists_comp "",
     :url_friendly_name "set-m",
     :file "clojure/contrib/monads.clj"}],
   :examples [],
   :id 791,
   :name "m-plus",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/791"},
  "clojure.pprint/print-table"
  {:comments [],
   :see-alsos
   [{:namespace_id 109,
     :weight 1,
     :name "pprint",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2373",
     :line "241",
     :arglists_comp "[object]|[object writer]",
     :url_friendly_name "pprint",
     :file "clojure/pprint/pprint_base.clj"}
    {:namespace_id 101,
     :weight 0,
     :name "inspect-table",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/2128",
     :line "96",
     :arglists_comp "[data]",
     :url_friendly_name "inspect-table",
     :file "clojure/inspector.clj"}],
   :examples
   [{:namespace_id 340,
     :ns "clojure.pprint",
     :updated_at "2012-03-10 22:57:41.0",
     :function "print-table",
     :version 2,
     :created_at "2012-02-21 21:41:18.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use 'clojure.pprint)\nnil\n\n;; By default, columns are in the order returned by (keys (first rows))\nuser=> (print-table [{:a 1 :b 2 :c 3} {:b 5 :a 7 :c \"dog\"}])\n=============\n:a | :c  | :b\n=============\n1  | 3   | 2 \n7  | dog | 5 \n=============\nnil\n\n;; If there are keys not in the first row, and/or you want to specify only\n;; some, or in a particular order, give the desired keys as the first arg.\nuser=> (print-table [:b :a] [{:a 1 :b 2 :c 3} {:b 5 :a 7 :c \"dog\"}])\n=======\n:b | :a\n=======\n2  | 1 \n5  | 7 \n=======\nnil\n"}
    {:namespace_id 340,
     :ns "clojure.pprint",
     :updated_at "2012-02-21 21:43:47.0",
     :function "print-table",
     :version 1,
     :created_at "2012-02-21 21:43:47.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use 'clojure.pprint 'clojure.reflect)\nnil\nuser=> (def x (:members (reflect clojure.lang.BigInt)))\n#'user/x\nuser=> (print-table [:name :type :flags] (sort-by :name x))\n======================================================================\n:name               | :type                | :flags                   \n======================================================================\nONE                 | clojure.lang.BigInt  | #{:static :public :final}\nZERO                | clojure.lang.BigInt  | #{:static :public :final}\nadd                 |                      | #{:public}               \nbipart              | java.math.BigInteger | #{:public :final}        \nbitLength           |                      | #{:public}               \nbyteValue           |                      | #{:public}               \nclojure.lang.BigInt |                      | #{:private}              \ndoubleValue         |                      | #{:public}               \nequals              |                      | #{:public}               \nfloatValue          |                      | #{:public}               \nfromBigInteger      |                      | #{:static :public}       \nfromLong            |                      | #{:static :public}       \nhashCode            |                      | #{:public}               \nintValue            |                      | #{:public}               \nlongValue           |                      | #{:public}               \nlpart               | long                 | #{:public :final}        \nlt                  |                      | #{:public}               \nmultiply            |                      | #{:public}               \nquotient            |                      | #{:public}               \nremainder           |                      | #{:public}               \nshortValue          |                      | #{:public}               \ntoBigInteger        |                      | #{:public}               \ntoString            |                      | #{:public}               \nvalueOf             |                      | #{:static :public}       \n======================================================================\nnil\n"}],
   :id 5943,
   :name "print-table",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5943"},
  "clojure.core/.."
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5327,
   :name "..",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5327"},
  "incanter.charts/set-theme-bw"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2817,
   :name "set-theme-bw",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2817"},
  "ring.adapter.httpcore/ring.adapter.httpcore.proxy$java.lang.Object$ThreadFactory$25b56529"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2607,
   :name
   "ring.adapter.httpcore.proxy$java.lang.Object$ThreadFactory$25b56529",
   :ns "ring.adapter.httpcore",
   :url "http://clojuredocs.org/v/2607"},
  "incanter.censored/censored-variance-two-sided"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2757,
   :name "censored-variance-two-sided",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2757"},
  "leiningen.clean/empty-directory"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3506,
   :name "empty-directory",
   :ns "leiningen.clean",
   :url "http://clojuredocs.org/v/3506"},
  "incanter.core/matrix?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2837,
   :name "matrix?",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2837"},
  "clojure.contrib.io/file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 494,
   :name "file",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/494"},
  "incanter.processing/EPSILON"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3008,
   :name "EPSILON",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3008"},
  "clojure.contrib.condition/handler-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 64,
   :name "handler-case",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/64"},
  "clojure.repl/set-break-handler!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5974,
   :name "set-break-handler!",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5974"},
  "swank.core.threadmap/find-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4255,
   :name "find-thread",
   :ns "swank.core.threadmap",
   :url "http://clojuredocs.org/v/4255"},
  "clojure.contrib.mock/never"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5251,
   :name "never",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5251"},
  "incanter.stats/sample-multinomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3318,
   :name "sample-multinomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3318"},
  "clojure.contrib.pprint/fresh-line"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 977,
   :name "fresh-line",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/977"},
  "incanter.core/log2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2915,
   :name "log2",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2915"},
  "clojure.core/seq?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1778",
     :line "114",
     :arglists_comp "[coll]",
     :url_friendly_name "seq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sequential?",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1522",
     :line "5000",
     :arglists_comp "[coll]",
     :url_friendly_name "sequential_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1723",
     :line "155",
     :arglists_comp "[x]",
     :url_friendly_name "vector_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "coll?",
     :updated_at "2010-11-20 10:40:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2074",
     :line "4968",
     :arglists_comp "[x]",
     :url_friendly_name "coll_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "list?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1801",
     :line "4973",
     :arglists_comp "[x]",
     :url_friendly_name "list_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "map?",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1835",
     :line "149",
     :arglists_comp "[x]",
     :url_friendly_name "map_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "set?",
     :updated_at "2010-12-29 18:03:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2053",
     :line "4978",
     :arglists_comp "[x]",
     :url_friendly_name "set_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-12 01:00:31.0",
     :function "seq?",
     :version 1,
     :created_at "2010-10-12 01:00:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (seq? 1)\nfalse\nuser> (seq? [1])\nfalse\nuser> (seq? (seq [1]))\ntrue"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-09 17:43:10.0",
     :function "seq?",
     :version 1,
     :created_at "2012-04-09 17:43:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; contrast to example code for sequential?\n;;\nuser> (seq? '(1 2 3))\ntrue\nuser> (seq? [1 2 3])   ; for sequential?, returns true\nfalse\nuser> (seq? (range 1 5))\ntrue\nuser> (seq? 1)\nfalse\nuser> (seq? {:a 2 :b 1})\nfalse\nuser> "}],
   :id 5744,
   :name "seq?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5744"},
  "clojure.set/subset?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "set?",
     :updated_at "2010-12-29 18:03:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2053",
     :line "4978",
     :arglists_comp "[x]",
     :url_friendly_name "set_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "set",
     :updated_at "2010-11-15 00:53:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1848",
     :line "3163",
     :arglists_comp "[coll]",
     :url_friendly_name "set",
     :file "clojure/core.clj"}
    {:namespace_id 111,
     :weight 0,
     :name "superset?",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2454",
     :line "150",
     :arglists_comp "[set1 set2]",
     :url_friendly_name "superset_q",
     :file "clojure/set.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-12-29 18:04:21.0",
     :function "subset?",
     :version 1,
     :created_at "2010-12-29 18:04:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (clojure.set/subset? #{2 3} #{1 2 3 4})\ntrue\n\nuser> (clojure.set/subset? #{2 4} #{1 2 3 4})\ntrue\n\nuser> (clojure.set/subset? #{2 5} #{1 2 3 4})\nfalse"}],
   :id 5988,
   :name "subset?",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5988"},
  "leiningen.jar/jar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3545,
   :name "jar",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3545"},
  "leiningen.checkout-deps/checkout-deps"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3500,
   :name "checkout-deps",
   :ns "leiningen.checkout-deps",
   :url "http://clojuredocs.org/v/3500"},
  "clojure.core/reductions"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 5,
     :name "reduce",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1868",
     :line "773",
     :arglists_comp "[f coll]|[f val coll]",
     :url_friendly_name "reduce",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:56:28.0",
     :function "reductions",
     :version 3,
     :created_at "2010-08-09 07:17:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (reductions + [1 1 1 1])\n(1 2 3 4)\nuser=> (reductions + [1 2 3])\n(1 3 6)\n\n;; This is just like reduce except that the calculation is collected during the reduce.\nuser=> (assert (= (reduce + [1 2 3]) \n                  (last (reductions + [1 2 3]))))\nnil\n"}],
   :id 5707,
   :name "reductions",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5707"},
  "clojure.stacktrace/root-cause"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5996,
   :name "root-cause",
   :ns "clojure.stacktrace",
   :url "http://clojuredocs.org/v/5996"},
  "net.licenser.sandbox/new-sandbox"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5112,
   :name "new-sandbox",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5112"},
  "clojure.core/underive"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 14:30:37.0",
     :function "underive",
     :version 1,
     :created_at "2011-08-21 14:30:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a simple hierarchy using the global hierarchy\n;; and demonstrate how underive is used\n\nuser=> (derive ::dog ::animal)\nnil\nuser=> (derive ::spaniel ::dog)\nnil\nuser=> (derive ::tabby ::dog)\nnil\nuser=> (ancestors ::tabby)\n#{:user/dog :user/animal}\nuser=> (underive ::tabby ::dog)\nnil\nuser=> (ancestors ::tabby)\nnil\nuser=>"}],
   :id 5820,
   :name "underive",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5820"},
  "clojure.core/extenders"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-17 06:23:01.0",
     :function "extenders",
     :version 1,
     :created_at "2012-07-17 06:23:01.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (defprotocol P (id [this]))\nP\nuser=> (extend-protocol P \n         String \n         (id [this] this)\n         clojure.lang.Symbol \n         (id [this] (name this))\n         clojure.lang.Keyword\n         (id [this] (name this)))\nnil\nuser=> (extenders P)\n(java.lang.String clojure.lang.Symbol clojure.lang.Keyword)\n"}],
   :id 5499,
   :name "extenders",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5499"},
  "clojure.contrib.datalog.util/is-query-var?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 195,
   :name "is-query-var?",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/195"},
  "clojure.reflect/type-reflect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5964,
   :name "type-reflect",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5964"},
  "swank.rpc/decode-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4303,
   :name "decode-message",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4303"},
  "clojure.contrib.condition/*condition*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 59,
   :name "*condition*",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/59"},
  "incanter.processing/CONVEX_POLYGON"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3092,
   :name "CONVEX_POLYGON",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3092"},
  "clojure.core/syntax-symbol-anchor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1520,
   :name "syntax-symbol-anchor",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/1520"},
  "incanter.stats/pdf-poisson"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 159,
     :ns "incanter.stats",
     :updated_at "2012-10-08 00:31:50.0",
     :function "pdf-poisson",
     :version 1,
     :created_at "2012-10-08 00:31:50.0",
     :library "incanter",
     :lib_version "1.2.3-SNAPSHOT",
     :library_id 5,
     :body
     ";In Clojure\n(pdf-poisson 57 :lambda 50)\n;0.03302345879160118      \n\n;In R\n;> dpois(57, 50, log=FALSE)\n;[1] 0.03302346         "}],
   :id 3305,
   :name "pdf-poisson",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3305"},
  "clojure.main/load-script"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5911,
   :name "load-script",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5911"},
  "clojure.contrib.datalog.rules/non-base-rules"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 163,
   :name "non-base-rules",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/163"},
  "clojure.core/list*"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 04:22:42.0",
     :function "list*",
     :version 5,
     :created_at "2010-08-01 20:53:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; `list*` function:\nuser=> (list* 1 [2 3])\n(1 2 3)\nuser=> (list* 1 2 [3 4])\n(1 2 3 4)\n\n;; compared to regular `list` function:\nuser=> (list 1 [2 3])\n(1 [2 3])\nuser=> (list 1 2 [3 4])\n(1 2 [3 4])\n\n;; Corner cases:\nuser=> (list* nil [1 2])\n(nil 1 2)\nuser=> (list* 1 nil)\n(1)\nuser=> (list* () [1 2])\n(() 1 2)\nuser=> (list* 1 ())\n(1)\n"}],
   :id 5584,
   :name "list*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5584"},
  "clojure.contrib.io/delete-file-recursively"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 519,
   :name "delete-file-recursively",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/519"},
  "clojure.contrib.test-is/set-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1400,
   :name "set-test",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1400"},
  "clojure.contrib.ns-utils/print-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 745,
   :name "print-dir",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/745"},
  "clojure.contrib.accumulators/empty-vector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 11,
   :name "empty-vector",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/11"},
  "clojure.core/resolve"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "ns-resolve",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1920",
     :line "3373",
     :arglists_comp "[ns sym]",
     :url_friendly_name "ns-resolve",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:04:01.0",
     :function "resolve",
     :version 4,
     :created_at "2010-08-04 18:20:03.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> ((-> \"first\" symbol resolve) [1 2 3])\n1"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-24 02:36:35.0",
     :function "resolve",
     :version 1,
     :created_at "2012-09-24 02:36:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See also http://clojure.org/namespaces for information on namespaces in Clojure and how to inspect and manipulate them"}],
   :id 5730,
   :name "resolve",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5730"},
  "net.cgrand.enlive-html/net.cgrand.enlive_html.proxy$java.lang.Object$AutoDetector$74452669"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3930,
   :name
   "net.cgrand.enlive_html.proxy$java.lang.Object$AutoDetector$74452669",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3930"},
  "clojure.core/iterator-seq"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-23 04:47:46.0",
     :user_id 6,
     :function "iterator-seq",
     :version "1.2.0",
     :created_at "2010-10-23 04:47:46.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "I've noticed that I needed to use iterator-seq when trying to map over a Java function that returns an AbstractList Iterator. It was not directly seq-able."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 01:25:24.0",
     :function "iterator-seq",
     :version 4,
     :created_at "2010-09-17 01:26:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Note this is not strictly necessary since keySet is a collection\n;; implementing Iterable but it does show the usage.\n\nuser=> (iterator-seq (.iterator (.keySet (java.lang.System/getProperties))))\n\n(\"java.runtime.name\" \"sun.boot.library.path\" \"java.vm.version\" \"java.vm.vendor\" \"java.vendor.url\" \"path.separator\" \"java.vm.name\" \"file.encoding.pkg\" \"sun.java.launcher\" \"user.country\" \"sun.os.patch.level\" \"java.vm.specification.name\" \"user.dir\" \"java.runtime.version\" \"java.awt.graphicsenv\" \"java.endorsed.dirs\" \"os.arch\" \"javax.accessibility.assistive_technologies\" \"java.io.tmpdir\" \"line.separator\" \"java.vm.specification.vendor\" \"os.name\" \"cljr.home\" \"sun.jnu.encoding\" \"java.library.path\" \"java.specification.name\" \"java.class.version\" \"sun.management.compiler\" \"os.version\" \"user.home\" \"user.timezone\" \"java.awt.printerjob\" \"file.encoding\" \"java.specification.version\" \"include.cljr.repo.jars\" \"java.class.path\" \"user.name\" \"java.vm.specification.version\" \"java.home\" \"sun.arch.data.model\" \"user.language\" \"java.specification.vendor\" \"java.vm.info\" \"java.version\" \"java.ext.dirs\" \"sun.boot.class.path\" \"java.vendor\" \"file.separator\" \"java.vendor.url.bug\" \"clojure.home\" \"sun.io.unicode.encoding\" \"sun.cpu.endian\" \"sun.desktop\" \"sun.cpu.isalist\")\n"}],
   :id 5569,
   :name "iterator-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5569"},
  "clojure.string/split"
  {:comments
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-07-25 00:31:02.0",
     :user_id 93,
     :function "split",
     :version "1.2.0",
     :created_at "2010-07-25 00:31:02.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "user=> (clojure.string/split \"foo bar\")\njava.lang.ClassNotFoundException: clojure.string\n\nDo I need to require / use anything?"}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-09-12 18:54:39.0",
     :user_id 57,
     :function "split",
     :version "1.2.0",
     :created_at "2010-09-12 18:54:39.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "You need to add a namespace:\nuser => (use 'clojure.string)"}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2011-05-22 17:34:18.0",
     :user_id 312,
     :function "split",
     :version "1.2.0",
     :created_at "2011-05-22 17:34:18.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "I 've a doubt...in ruby if I've this:\n\nbignumber=\"2938434\"\n\nI can do this\n\nbignumber.split(\"\") \n\nand get\n(\"2\", \"9\", \"3\", \"8\" .....)\n\nHow can I do this with clojure?...thanks"}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2011-09-07 05:13:21.0",
     :user_id 378,
     :function "split",
     :version "1.2.0",
     :created_at "2011-09-07 04:35:10.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Hi, cocoOS. You may want to do it like this:\n\n<pre>user=&gt; (use '[clojure.string :only (split)])\nnil\nuser=&gt; (def bignumber \"2938434\")\n#'user/bignumber\nuser=&gt; (split bignumber #\"\")\n[\"\" \"2\" \"9\" \"3\" \"8\" \"4\" \"3\" \"4\"]\n</pre>\n\nYou will have to filter out the empty string.\n\n<br>\n\nBut there are other ways, like:\n<pre>user=&gt; (map str (vec bignumber))\n(\"2\" \"9\" \"3\" \"8\" \"4\" \"3\" \"4\")\n</pre>"}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2012-06-03 22:05:57.0",
     :user_id 620,
     :function "split",
     :version "1.2.0",
     :created_at "2012-06-03 22:05:57.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "<pre>\nuser=> (seq \"2938434\")\n(\\2 \\9 \\3 \\8 \\4 \\3 \\4)\n</pre>\n\nmight also be what you want."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "subs",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1913",
     :line "3940",
     :arglists_comp "[s start]|[s start end]",
     :url_friendly_name "subs",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "replace",
     :updated_at "2011-01-15 03:53:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2480",
     :line "63",
     :arglists_comp "[s match replacement]",
     :url_friendly_name "replace",
     :file "clojure/string.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "re-seq",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1792",
     :line "3777",
     :arglists_comp "[re s]",
     :url_friendly_name "re-seq",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "split-lines",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/2477",
     :line "178",
     :arglists_comp "[s]",
     :url_friendly_name "split-lines",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-09-26 04:22:04.0",
     :function "split",
     :version 3,
     :created_at "2010-07-17 10:33:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.string/split \"q1w2e3r4t5y6u7i8o9p0\" #\"\\d+\")\n[\"q\" \"w\" \"e\" \"r\" \"t\" \"y\" \"u\" \"i\" \"o\" \"p\"]\nuser=> (clojure.string/split \"q1w2e3r4t5y6u7i8o9p0\" #\"\\d+\" 5)\n[\"q\" \"w\" \"e\" \"r\" \"t5y6u7i8o9p0\"]\n"}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-10-03 07:11:14.0",
     :function "split",
     :version 2,
     :created_at "2010-10-03 04:01:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Splits a string on space character and joins \n;; the resulting collection with a line feed character\n\n(use '[clojure.string :only (join split)])\n\nuser=> (println\n         (join \"\\n\"\n           (split \"The Quick Brown Fox\" #\"\\s\")))\nThe\nQuick\nBrown\nFox\nnil"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2011-12-16 01:49:36.0",
     :function "split",
     :version 4,
     :created_at "2011-12-14 19:04:51.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use '[clojure.string :only (split triml)])\n\n;; Splitting on whitespace is a common desire.\nuser=> (split \"Some words to split\" #\"\\s+\")\n[\"Some\" \"words\" \"to\" \"split\"]\n\n;; By using the pattern #\"\\s+\", we split on all occurrences of one or\n;; more consecutive whitespace characters.\nuser=> (split \"Some    words   with\\tother whitespace      \\n\" #\"\\s+\")\n[\"Some\" \"words\" \"with\" \"other\" \"whitespace\"]\n\n;; If you are used to Perl's special behavior of split(' ', $str),\n;; where it ignores leading whitespace in the string to be split, this\n;; does not quite do it.\nuser=> (split \"   Leading whitespace causes empty first string\" #\"\\s+\")\n[\"\" \"Leading\" \"whitespace\" \"causes\" \"empty\" \"first\" \"string\"]\n\n;; This will do it.\nuser=> (defn perl-split-on-space [s]\n         (split (triml s) #\"\\s+\"))\n#'user/perl-split-on-space\nuser=> (perl-split-on-space \"   This is often what you want   \")\n[\"This\" \"is\" \"often\" \"what\" \"you\" \"want\"]\n\n;; There might be cases where you want this instead.\nuser=> (split \"Some    words   with\\tother whitespace      \\n\" #\"\\s\")\n[\"Some\" \"\" \"\" \"\" \"words\" \"\" \"\" \"with\" \"other\" \"whitespace\"]\n"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2011-12-14 19:08:37.0",
     :function "split",
     :version 1,
     :created_at "2011-12-14 19:08:37.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use '[clojure.string :only (split)])\n\n;; Split on every occurrence of : character\nuser=> (split \"root:*:0:0:admin:/var/root:/bin/sh\" #\":\")\n[\"root\" \"*\" \"0\" \"0\" \"admin\" \"/var/root\" \"/bin/sh\"]\n\n;; Empty strings are returned when two colons appear consecutively in\n;; the string to be split.\nuser=> (split \"root::0:0::/var/root:/bin/sh\" #\":\")\n[\"root\" \"\" \"0\" \"0\" \"\" \"/var/root\" \"/bin/sh\"]\n\n;; Without specifying a limit, any empty strings at the end are\n;; omitted.\nuser=> (split \"root::0:0:admin:/var/root:\" #\":\")\n[\"root\" \"\" \"0\" \"0\" \"admin\" \"/var/root\"]\nuser=> (split \"root::0:0:admin::\" #\":\")\n[\"root\" \"\" \"0\" \"0\" \"admin\"]\n\n;; If you want all of the fields, even trailing empty ones, use a\n;; negative limit.\nuser=> (split \"root::0:0:admin:/var/root:\" #\":\" -1)\n[\"root\" \"\" \"0\" \"0\" \"admin\" \"/var/root\" \"\"]\nuser=> (split \"root::0:0:admin::\" #\":\" -1)\n[\"root\" \"\" \"0\" \"0\" \"admin\" \"\" \"\"]\n\n;; Use a positive limit of n to limit the maximum number of strings in\n;; the return value to n.  If it returns exactly n strings, the last\n;; contains everything left over after splitting off the n-1 earlier\n;; strings.\nuser=> (split \"root::0:0:admin:/var/root:\" #\":\" 2)\n[\"root\" \":0:0:admin:/var/root:\"]\nuser=> (split \"root::0:0:admin:/var/root:\" #\":\" 3)\n[\"root\" \"\" \"0:0:admin:/var/root:\"]\nuser=> (split \"root::0:0:admin:/var/root:\" #\":\" 4)\n[\"root\" \"\" \"0\" \"0:admin:/var/root:\"]\nuser=> (split \"root::0:0:admin:/var/root:\" #\":\" 15)\n[\"root\" \"\" \"0\" \"0\" \"admin\" \"/var/root\" \"\"]\n"}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2013-01-19 21:43:35.0",
     :function "split",
     :version 1,
     :created_at "2013-01-19 21:43:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(:require [clojure.string :as cstr])\n\n(def legal-ref \"1321-61\")\n\n(cstr/split legal-ref #\"-\")\n[\"1321\" \"61\"]"}],
   :id 6005,
   :name "split",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6005"},
  "clojure.contrib.pprint/pprint-defn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 863,
   :name "pprint-defn",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/863"},
  "incanter.processing/scale"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3009,
   :name "scale",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3009"},
  "clojure.contrib.accumulators/empty-min-max"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 27,
   :name "empty-min-max",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/27"},
  "clojure.contrib.monads/m-when"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 778,
   :name "m-when",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/778"},
  "incanter.stats/bootstrap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3359,
   :name "bootstrap",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3359"},
  "incanter.charts/stacked-area-chart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2836,
   :name "stacked-area-chart",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2836"},
  "swank.util.hooks/add-hook"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4189,
   :name "add-hook",
   :ns "swank.util.hooks",
   :url "http://clojuredocs.org/v/4189"},
  "incanter.stats/cdf-empirical"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3330,
   :name "cdf-empirical",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3330"},
  "clojure.contrib.seq/rotations"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1162,
   :name "rotations",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1162"},
  "incanter.processing/CONCAVE_POLYGON"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3001,
   :name "CONCAVE_POLYGON",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3001"},
  "clojure.core/=="
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-18 23:46:49.0",
     :user_id 41,
     :function "==",
     :version "1.2.0",
     :created_at "2010-10-18 23:46:49.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "There is a difference between \"=\" and \"==\". For primitives you definitely want to use \"==\" as \"=\" will result in a cast to the wrapped types for it's arguments.\n\nThis may not be the case come Clojure 1.3 (see [1])\n\n[1] http://github.com/clojure/clojure/commit/df8c65a286e90e93972bb69392bc106128427dde"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "=",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1885",
     :line "653",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "identical?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1666",
     :line "646",
     :arglists_comp "[x y]",
     :url_friendly_name "identical_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 01:15:35.0",
     :function "==",
     :version 5,
     :created_at "2010-09-01 20:51:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; true:\n(== 1)\n(== 1 1)       \n(== 1/1, 2/2, 3/3, 4/4)   \n(== 1, 1.0, 1/1)\n(== :foo)\n\n\n;; false:\n(== 1 2)\n(== 1 \\1)\n(== 1 \"1\")"}],
   :id 5332,
   :name "==",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5332"},
  "clojure.contrib.duck-streams/copy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 254,
   :name "copy",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/254"},
  "swank.commands.inspector/emacs-inspect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4234,
   :name "emacs-inspect",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4234"},
  "clojure.contrib.mock.test-adapter/has-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 740,
   :name "has-args",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/740"},
  "circumspec.contrib-mocking/less-than"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3650,
   :name "less-than",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3650"},
  "clojure.contrib.java-utils/delete-file-recursively"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 538,
   :name "delete-file-recursively",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/538"},
  "ring.adapter.httpcore/executor-execute"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2612,
   :name "executor-execute",
   :ns "ring.adapter.httpcore",
   :url "http://clojuredocs.org/v/2612"},
  "clojure.contrib.repl-utils/expression-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 343,
   :name "expression-info",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/343"},
  "incanter.internal/make-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2912,
   :name "make-matrix",
   :ns "incanter.internal",
   :url "http://clojuredocs.org/v/2912"},
  "clojure.core/hash-combine"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:26:44.0",
     :function "hash-combine",
     :version 3,
     :created_at "2010-07-28 05:33:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Calculates the hashes for x and y and produces a new hash that represents\n;; the combination of the two.\n\nuser=> (hash-combine 100 \"a\")\n-1640524969\n"}],
   :id 5543,
   :name "hash-combine",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5543"},
  "incanter.processing/curve-vertex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3095,
   :name "curve-vertex",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3095"},
  "circumspec.watch/stop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3783,
   :name "stop",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3783"},
  "clojure.contrib.sql/update-values"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 83,
     :ns "clojure.contrib.sql",
     :updated_at "2012-07-28 14:09:08.0",
     :function "update-values",
     :version 2,
     :created_at "2012-07-28 14:01:14.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(update-values :users                 ;; table name is 'users'\n               [\"fname=?\" \"guest\"]    ;; this is same that \n               {:fname \"ezcocoa\"}))   ;; update users set fname='ezcocoa' where fname='guest'"}],
   :id 1227,
   :name "update-values",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1227"},
  "clojure.contrib.math/round"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 701,
   :name "round",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/701"},
  "clojure.core/chunk-buffer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5411,
   :name "chunk-buffer",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5411"},
  "swank.core/*current-package*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3986,
   :name "*current-package*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3986"},
  "leiningen.install/install"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3544,
   :name "install",
   :ns "leiningen.install",
   :url "http://clojuredocs.org/v/3544"},
  "clojure.contrib.datalog.rules/apply-rule"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 165,
   :name "apply-rule",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/165"},
  "clojure.contrib.graph/remove-loops"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 437,
   :name "remove-loops",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/437"},
  "swank.core/maybe-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3980,
   :name "maybe-ns",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3980"},
  "clojure.contrib.jmx/op-param-types"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 547,
   :name "op-param-types",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/547"},
  "swank.commands.inspector/*inspectee-actions*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4217,
   :name "*inspectee-actions*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4217"},
  "clojure.contrib.string/take"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1343,
   :name "take",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1343"},
  "incanter.processing/DOWN"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3024,
   :name "DOWN",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3024"},
  "clojure.test.tap/print-tap-fail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6069,
   :name "print-tap-fail",
   :ns "clojure.test.tap",
   :url "http://clojuredocs.org/v/6069"},
  "clojure.core/-"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 0,
     :name "-'",
     :updated_at "2011-09-26 06:24:10.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:01:50.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5318",
     :line "966",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "-'",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:04:40.0",
     :function "-",
     :version 4,
     :created_at "2010-07-17 18:58:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (- 1)\n-1 \nuser=> (- 6 3)  \n3\nuser=> (- 10 3 2)  \n5"}],
   :id 5317,
   :name "-",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5317"},
  "circumspec.utils/wtf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3760,
   :name "wtf",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3760"},
  "swank.commands.basic/buffer-first-change"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4070,
   :name "buffer-first-change",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4070"},
  "lancet/move"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3490,
   :name "move",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3490"},
  "clojure.contrib.properties/with-system-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1119,
   :name "with-system-properties",
   :ns "clojure.contrib.properties",
   :url "http://clojuredocs.org/v/1119"},
  "clojure.core/empty"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "not-empty",
     :updated_at "2011-07-27 13:33:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/2077",
     :line "4375",
     :arglists_comp "[coll]",
     :url_friendly_name "not-empty",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-12 12:11:43.0",
     :function "empty",
     :version 5,
     :created_at "2010-07-28 05:20:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (empty [1 2 3])\r\n[]\r\nuser=> (empty (list 1 2 3))\r\n()\r\nuser=> (map empty [[\\a \\b] {1 2} (range 4)])\r\n([] {} ())\r\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-08 21:02:41.0",
     :function "empty",
     :version 1,
     :created_at "2012-10-08 21:02:41.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; The output will not necessarily be of the same JVM class as the input\nuser=> (class (seq [1]))\nclojure.lang.PersistentVector$ChunkedSeq\nuser=> (class (empty (seq [1])))\nclojure.lang.PersistentList$EmptyList\n"}],
   :id 5486,
   :name "empty",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5486"},
  "incanter.stats/quantile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2782,
   :name "quantile",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2782"},
  "incanter.stats/sample-neg-binomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3361,
   :name "sample-neg-binomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3361"},
  "clojure.contrib.mock/once"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5253,
   :name "once",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5253"},
  "clojure.contrib.io/write-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 503,
   :name "write-lines",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/503"},
  "incanter.stats/gamma-coefficient"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3331,
   :name "gamma-coefficient",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3331"},
  "incanter.processing/specular"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3075,
   :name "specular",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3075"},
  "circumspec.watch/sleep-time"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3782,
   :name "sleep-time",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3782"},
  "circumspec.contrib-mocking/make-count-checker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3648,
   :name "make-count-checker",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3648"},
  "midje.unprocessed/exactly"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4347,
   :name "exactly",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4347"},
  "net.cgrand.enlive-html/left"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3937,
   :name "left",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3937"},
  "clojure.zip/rightmost"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6117,
   :name "rightmost",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6117"},
  "net.licenser.sandbox/expand-and-quote"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5131,
   :name "expand-and-quote",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5131"},
  "incanter.processing/fill"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3216,
   :name "fill",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3216"},
  "incanter.stats/sample-chisq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3369,
   :name "sample-chisq",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3369"},
  "lancet/exec"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3432,
   :name "exec",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3432"},
  "circumspec/stop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3601,
   :name "stop",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3601"},
  "clojure.contrib.datalog.literals/literal-columns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 225,
   :name "literal-columns",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/225"},
  "circumspec/re-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3600,
   :name "re-test",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3600"},
  "clojure.core/chunked-seq?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-26 02:09:42.0",
     :function "chunked-seq?",
     :version 1,
     :created_at "2012-04-26 02:09:42.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (chunked-seq? (range 1000))\nfalse\n\nuser=> (chunked-seq? (seq (range 1000)))\ntrue\n\nuser=> (chunked-seq? (iterate inc 10))\nfalse\n\nuser=> (chunked-seq? (seq (iterate inc 10)))\nfalse"}],
   :id 5416,
   :name "chunked-seq?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5416"},
  "clojure.core/the-ns"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:24:17.0",
     :function "the-ns",
     :version 5,
     :created_at "2010-09-21 17:16:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Let's play with a namespace by its name and by its symbol \nuser=> (def for-later-use (create-ns 'my-namespace))\n#'user/for-later-use\n\nuser=> (the-ns for-later-use)\n#&lt;Namespace my-namespace&gt;\n\n\nuser=> (the-ns 'my-namespace)\n#&lt;Namespace my-namespace&gt;\n\n;; not going to find anything this way because we just asked the repl\n;; not to perform an evaluate on it and there is not such \n;; namespace with the name \"for-later-use\"\nuser=> (the-ns 'for-later-use)\njava.lang.Exception: No namespace: for-later-use found (NO_SOURCE_FILE:0)\n\n;; not going to work either because \"my-namespace\" is the name of a namespace\n;; and not a symbol that points to something\nuser=> (the-ns my-namespace)\njava.lang.Exception: Unable to resolve symbol: my-namespace in this context (NO_SOURCE_FILE:12)\n"}],
   :id 5789,
   :name "the-ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5789"},
  "clojure.contrib.jmx.Bean/-getAttributes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 578,
   :name "-getAttributes",
   :ns "clojure.contrib.jmx.Bean",
   :url "http://clojuredocs.org/v/578"},
  "clojure.contrib.swing-utils/action-translation-table"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1356,
   :name "action-translation-table",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1356"},
  "clojure.contrib.pprint/*code-dispatch*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1021,
   :name "*code-dispatch*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1021"},
  "swank.commands.basic/toggle-debug-on-swank-error"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3995,
   :name "toggle-debug-on-swank-error",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3995"},
  "clojure.test/with-test-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6049,
   :name "with-test-out",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6049"},
  "clojure.core/chunk"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5409,
   :name "chunk",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5409"},
  "clojure.core/interpose"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "interleave",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1869",
     :line "3328",
     :arglists_comp "[c1 c2]|[c1 c2 & colls]",
     :url_friendly_name "interleave",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "join",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/2472",
     :line "130",
     :arglists_comp "[coll]|[separator [x & more]]",
     :url_friendly_name "join",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-03 21:35:27.0",
     :function "interpose",
     :version 5,
     :created_at "2010-07-03 09:32:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The quintessential interpose example:\nuser> (def my-strings [\"one\" \"two\" \"three\"])\n\nuser> (interpose \", \" my-strings)\n=> (\"one\" \", \" \"two\" \", \" \"three\")\n\nuser> (apply str (interpose \", \" my-strings))\n=> \"one, two, three\"\n\n;; Might use clojure.string/join if the plan is to join\n(use '[clojure.string :only (join)])\nuser> (join \", \" my-strings)\n=> \"one, two, three\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-14 14:11:28.0",
     :function "interpose",
     :version 5,
     :created_at "2012-11-14 14:08:37.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";This example converts what would be comma-separated values into pipe '|' ;separated values for alternate database loads. By switching delimiters, \n;quotes can be eliminated from each sequence element, which are not \n;needed for some databases.\n\n(def test-data-in '((\"9990999\" \"43\" \"ROADWAY\" \"MORRISON, VAN X DMD\" \"43 ROADWAY\" \"SOMETHINGTON\" \"XA\" \"00000\" \"501\" \"18050\" \"2500\" \"1180\" \"14370\" \"0\") (\"9990998\" \"25\" \"GARDEN PATH\" \"JANE SMITH N\" \"25  GARDEN PATH\" \"SOMETHINGTON\" \"ZA\" \"00000\" \"501\" \"1120\" \"600\" \"80\" \"440\" \"0\"))\n\n(def test-data-out (map #(concat (interpose \\| %) (list \\| \"\\n\")) d2))\n\ntest-data-out\n\n((\"9990999\" \\| \"43\" \\| \"ROADWAY\" \\| \"MORRISON, VAN X DMD\" \\| \"43  ROADWAY\" \\| \"SOMETHINGTON\" \\| \"ZA\" \\| \"00000\" \\| \"501\" \\| \"18050\" \\| \"2500\" \\| \"1180\" \\| \"14370\" \\| \"0\" \\| \"\\n\") (\"9990998\" \\| \"25\" \\| \"GARDEN PATH\" \\| \"JANE SMITH N\" \\| \"25  GARDEN PATH\" \\| \"SOMETHINGTON\" \\| \"ZA\" \\| \"00000\" \\| \"501\" \\| \"1120\" \\| \"600\" \\| \"80\" \\| \"440\" \\| \"0\" \\| \"\\n\"))\n\n(doseq [in-seq d3] (doseq [val in-seq] (spit \"temp1.csv\" val :append true)))\n\ncat temp1.csv\n\n9990999|43|ROADWAY|MORRISON VAN X DMD|43 ROADWAY|SOMETHINGTON|ZA|00000|501|18050|2500|1180|14370|0|\n9990998|25|GARDEN PATH|JANE SMITH N N|25  GARDEN PATH|SOMETHINGTON|A|00000|501|1120|600|80|440|0|\n"}],
   :id 5562,
   :name "interpose",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5562"},
  "clojure.test/report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6035,
   :name "report",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6035"},
  "circumspec.for-all/for-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3681,
   :name "for-all",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3681"},
  "clojure.core/extend-type"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "extend",
     :updated_at "2011-02-02 19:35:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1597",
     :line "630",
     :arglists_comp "[atype & proto+mmaps]",
     :url_friendly_name "extend",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "extend-protocol",
     :updated_at "2011-02-24 05:19:01.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1960",
     :line "730",
     :arglists_comp "[p & specs]",
     :url_friendly_name "extend-protocol",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defprotocol",
     :updated_at "2010-11-15 06:13:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2062",
     :line "576",
     :arglists_comp "[name & opts+sigs]",
     :url_friendly_name "defprotocol",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-10 10:01:01.0",
     :function "extend-type",
     :version 1,
     :created_at "2011-09-10 10:01:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";;; This is a library for the shopping result.\n\n(defrecord Banana [qty])\n\n;;; 'subtotal' differ from each fruit.\n\n(defprotocol Fruit\n  (subtotal [item]))\n\n(extend-type Banana\n  Fruit\n  (subtotal [item]\n    (* 158 (:qty item))))\n\n;;; Please see the term of 'reify'."}],
   :id 5498,
   :name "extend-type",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5498"},
  "clojure.contrib.jar/filenames-in-jar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 523,
   :name "filenames-in-jar",
   :ns "clojure.contrib.jar",
   :url "http://clojuredocs.org/v/523"},
  "net.cgrand.enlive-html/strict-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3836,
   :name "strict-mode",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3836"},
  "clojure.core/print"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "pr",
     :updated_at "2011-09-07 03:48:35.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/2017",
     :line "2815",
     :arglists_comp "[]|[x]|[x & more]",
     :url_friendly_name "pr",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 17:53:34.0",
     :function "print",
     :version 1,
     :created_at "2010-12-29 17:53:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; same as println, but without a newline\nuser> (print \"foo\") (print \"foo\")\nfoofoo"}],
   :id 5669,
   :name "print",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5669"},
  "incanter.processing/GRAY"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3137,
   :name "GRAY",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3137"},
  "circumspec.for-all/unicode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3665,
   :name "unicode",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3665"},
  "clojure.core/integer?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:05:32.0",
     :function "integer?",
     :version 3,
     :created_at "2010-07-13 19:21:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (integer? 1)\ntrue\nuser=> (integer? 1.0)\nfalse"}],
   :id 5559,
   :name "integer?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5559"},
  "swank.commands.completion/potential-completions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4148,
   :name "potential-completions",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4148"},
  "swank.core.connection/make-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4205,
   :name "make-connection",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4205"},
  "net.cgrand.xml/parse"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3954,
   :name "parse",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3954"},
  "leiningen.pom/make-repository"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3569,
   :name "make-repository",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3569"},
  "incanter.core/incomplete-beta"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2871,
   :name "incomplete-beta",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2871"},
  "clojure.contrib.generic.comparison/zero?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 398,
   :name "zero?",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/398"},
  "clojure.contrib.fnmap.PersistentFnMap/create"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 319,
   :name "create",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/319"},
  "incanter.processing/displayable?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3015,
   :name "displayable?",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3015"},
  "clojure.core/*use-context-classloader*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5312,
   :name "*use-context-classloader*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5312"},
  "clojure.contrib.test-is/testing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1374,
   :name "testing",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1374"},
  "clojure.contrib.probabilities.monte-carlo/sample-reduce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1107,
   :name "sample-reduce",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1107"},
  "incanter.processing/BOX"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2994,
   :name "BOX",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2994"},
  "clojure.core/recur"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "loop",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1617",
     :line "3533",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "loop",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "trampoline",
     :updated_at "2010-12-29 18:10:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/2070",
     :line "5040",
     :arglists_comp "[f]|[f & args]",
     :url_friendly_name "trampoline",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-18 17:34:50.0",
     :function "recur",
     :version 2,
     :created_at "2010-11-20 04:26:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(def factorial\n  (fn [n]\n    (loop [cnt n acc 1]\n       (if (zero? cnt)\n            acc\n          (recur (dec cnt) (* acc cnt))\n; in loop cnt will take the value (dec cnt)\n; and acc will take the value (* acc cnt)\n))))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-20 04:29:29.0",
     :function "recur",
     :version 1,
     :created_at "2010-11-20 04:29:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; A loop that sums the numbers 10 + 9 + 8 + ...\n\n; Set initial values count (cnt) from 10 and down\n(loop [sum 0 cnt 10]\n    ; If count reaches 0 then exit the loop and return sum\n    (if (= cnt 0)\n    sum\n    ; Otherwise add count to sum, decrease count and \n    ; use recur to feed the new values back into the loop\n    (recur (+ cnt sum) (dec cnt))))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-18 17:33:24.0",
     :function "recur",
     :version 1,
     :created_at "2012-07-18 17:33:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(loop [i 0]  \n  (when (< i 5)    \n    (println i)    \n    (recur (inc i)); loop i will take this value\n))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-25 17:48:12.0",
     :function "recur",
     :version 2,
     :created_at "2012-08-25 17:44:41.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn compute-across [func elements value]\n  (if (empty? elements)\n    value\n    (recur func (rest elements) (func value (first elements)))))\n\n(defn total-of [numbers]\n  (compute-across + numbers 0))\n\n(defn larger-of [x y]\n  (if (> x y) x y))\n\n(defn greatest-of [numbers]\n  (compute-across larger-of numbers (first numbers)))"}],
   :id 6130,
   :name "recur",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6130"},
  "midje.unprocessed/anything"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4365,
   :name "anything",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4365"},
  "clojure.core/->>"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 23:30:50.0",
     :user_id 93,
     :function "->>",
     :version "1.2.0",
     :created_at "2010-07-26 18:17:21.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "I'm getting: `Exception in thread \"main\" java.lang.Exception: Unable to resolve symbol: -&gt;&gt; in this context (11.clj:25)`\n\nIt's also extremely hard to Google this method. It'd be nice if there was a non-symbol name for this that one could search for.\n\n**Update**\n\nThe name of this operator is called a thrush."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 22:36:26.0",
     :user_id 106,
     :function "->>",
     :version "1.2.0",
     :created_at "2010-07-26 22:36:26.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "See also <a href=\"http://clojuredocs.org/v/1872\">-&gt;</a> which is similar but threads the first expr as the <b>second</b> argument of the forms."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 23:20:30.0",
     :user_id 93,
     :function "->>",
     :version "1.2.0",
     :created_at "2010-07-26 23:20:30.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "My error was due to using an old version of Clojure. I was using 1.0.0."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "->",
     :updated_at "2011-01-03 08:13:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1872",
     :line "1284",
     :arglists_comp "[x]|[x form]|[x form & more]",
     :url_friendly_name "->",
     :file "clojure/core.clj"}
    {:namespace_id 11,
     :weight 1,
     :name "-?>",
     :updated_at "2011-08-03 03:52:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/84",
     :line "30",
     :arglists_comp "[x form]|[x form & forms]",
     :url_friendly_name "-_q>",
     :file "clojure/contrib/core.clj"}
    {:namespace_id 11,
     :weight 0,
     :name "-?>>",
     :updated_at "2010-10-20 04:41:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/90",
     :line "46",
     :arglists_comp "[x form]|[x form & forms]",
     :url_friendly_name "-_q>>",
     :file "clojure/contrib/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-10 16:49:31.0",
     :function "->>",
     :version 7,
     :created_at "2010-07-23 23:14:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; An example of using the \"thread-last\" macro to get\n;; the sum of the first 10 even squares.\nuser=> (->> (range)\n            (map #(* % %))\n            (filter even?)\n            (take 10)\n            (reduce +))\n1140\n\n;; This expands to:\nuser=> (reduce +\n               (take 10\n                     (filter even?\n                             (map #(* % %)\n                                  (range)))))\n1140\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-30 08:51:26.0",
     :function "->>",
     :version 4,
     :created_at "2012-06-09 06:56:31.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def c 5)\nuser=> (->> c (+ 3) (/ 2) (- 1))                          \n3/4\n\n;; and if you are curious why\nuser=> (use 'clojure.walk)\nuser=> (macroexpand-all '(->> c (+ 3) (/ 2) (- 1)))\n(- 1 (/ 2 (+ 3 c)))\n\n"}],
   :id 5320,
   :name "->>",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5320"},
  "swank.commands.basic/describe-function"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3992,
   :name "describe-function",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3992"},
  "clojure.contrib.java-utils/wall-hack-field"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 535,
   :name "wall-hack-field",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/535"},
  "leiningen.checkout-deps/checkout-deps-paths"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3498,
   :name "checkout-deps-paths",
   :ns "leiningen.checkout-deps",
   :url "http://clojuredocs.org/v/3498"},
  "swank.loader/clean-up"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4298,
   :name "clean-up",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4298"},
  "clojure.core/in-ns"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 7,
     :name "ns",
     :updated_at "2011-02-13 23:57:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1794",
     :line "4594",
     :arglists_comp "[name docstring? attr-map? references*]",
     :url_friendly_name "ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:26:06.0",
     :function "in-ns",
     :version 4,
     :created_at "2010-09-21 14:14:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Let's create new namespace, create new variable in it, then access it from another namespace\n\n;; create the namespace and switch to it\nuser=> (in-ns 'first-namespace)\n#&lt;Namespace first-namespace&gt;\n\n;; create a variable and check it\nfirst-namespace=> (def my-var \"some value\")\n#'first-namespace/my-var\nfirst-namespace=> my-var\n\"some value\"\n\n;; create another namespace and switch to this one\nfirst-namespace=> (in-ns 'second-namespace)\n#&lt;Namespace second-namespace&gt;\n\n;; use variable from the other namespace here\nsecond-namespace=> first-namespace/my-var\n\"some value\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:26:36.0",
     :function "in-ns",
     :version 3,
     :created_at "2010-09-21 14:46:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The \"in-ns\" function works almost the same as \"ns\", but does not load clojure.core \n\nuser=> (in-ns 'my-namespace)\n#&lt;Namespace my-namespace&gt;\n\n;; the function clojure.core/inc won't just work\nmy-namespace=> (inc 1)\njava.lang.Exception: Unable to resolve symbol: inc in this context (NO_SOURCE_FILE:15)\n\nmy-namespace=> (clojure.core/inc 1)\n2\n"}],
   :id 5552,
   :name "in-ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5552"},
  "swank.core/calculate-restarts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3971,
   :name "calculate-restarts",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3971"},
  "swank.commands.inspector/inspect-meta-information"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4216,
   :name "inspect-meta-information",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4216"},
  "clojure.core/aset"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 20:29:58.0",
     :function "aset",
     :version 1,
     :created_at "2010-10-07 20:29:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def my-array (into-array Integer/TYPE [1 2 3]))\n#'user/my-array\n\nuser=> (aset my-array 1 10) ; Set the element with index 1 to 10\n10\n\nuser=> (into [] my-array)\n[1 10 3]"}],
   :id 5356,
   :name "aset",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5356"},
  "clojure.contrib.seq-utils/find-first"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 77,
     :ns "clojure.contrib.seq-utils",
     :updated_at "2011-01-07 13:22:36.0",
     :function "find-first",
     :version 1,
     :created_at "2011-01-07 13:22:36.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body "Clojure=> (find-first even? '(1 3 5 6 7 8))\n6\n"}],
   :id 1185,
   :name "find-first",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1185"},
  "incanter.stats/indicator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3333,
   :name "indicator",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3333"},
  "swank.commands.basic/interactive-eval-region"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4073,
   :name "interactive-eval-region",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4073"},
  "incanter.charts/line-chart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2801,
   :name "line-chart",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2801"},
  "leiningen.uberjar/copy-entries"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3587,
   :name "copy-entries",
   :ns "leiningen.uberjar",
   :url "http://clojuredocs.org/v/3587"},
  "incanter.processing/TRIANGLES"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2990,
   :name "TRIANGLES",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2990"},
  "incanter.core/quit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2851,
   :name "quit",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2851"},
  "clojure.core/find-protocol-impl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5508,
   :name "find-protocol-impl",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5508"},
  "clojure.core/sequence"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-10 14:07:00.0",
     :function "sequence",
     :version 1,
     :created_at "2011-06-10 14:07:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (sequence [1 2 3])\n(1 2 3)\nuser> \n(1 2 3)\nuser> (class (sequence '(1 2 3)))\nclojure.lang.PersistentList"}],
   :id 5746,
   :name "sequence",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5746"},
  "clojure.core/bound?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "thread-bound?",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1609",
     :line "4360",
     :arglists_comp "[& vars]",
     :url_friendly_name "thread-bound_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-10-12 18:04:32.0",
     :function "bound?",
     :version 4,
     :created_at "2010-07-13 19:12:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def foobar)\n#'user/foobar\nuser=> (bound? #'foobar)\nfalse\nuser=> (def boing 10)\n#'user/boing\nuser=> (bound? #'boing)\ntrue\nuser=> (defn plus3 [n] (+ 3 n))\n#'user/plus3\nuser=> (bound? #'plus3)\ntrue\n"}],
   :id 5396,
   :name "bound?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5396"},
  "clojure.test/file-position"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6029,
   :name "file-position",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6029"},
  "clojure.core/<="
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:05:55.0",
     :function "<=",
     :version 3,
     :created_at "2010-07-28 05:58:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (<= 1 2)\ntrue\nuser=> (<= 2 2)\ntrue\nuser=> (<= 3 2)\nfalse\nuser=> (<= 2 3 4 5 6)\ntrue"}],
   :id 5330,
   :name "<=",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5330"},
  "clojure.contrib.http.agent/headers-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 461,
   :name "headers-seq",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/461"},
  "clojure.contrib.set/proper-superset?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1200,
   :name "proper-superset?",
   :ns "clojure.contrib.set",
   :url "http://clojuredocs.org/v/1200"},
  "clojure.contrib.logging/with-logs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 646,
   :name "with-logs",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/646"},
  "incanter.core/solve"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2742,
   :name "solve",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2742"},
  "clojure.contrib.probabilities.monte-carlo/interval"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1101,
   :name "interval",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1101"},
  "clojure.core/*compile-path*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5294,
   :name "*compile-path*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5294"},
  "lancet/chmod"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3411,
   :name "chmod",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3411"},
  "lancet/record"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3488,
   :name "record",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3488"},
  "incanter.processing/POINTS"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3138,
   :name "POINTS",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3138"},
  "clojure.contrib.miglayout.internal/get-components"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 717,
   :name "get-components",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/717"},
  "incanter.distributions/chisq-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5088,
   :name "chisq-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5088"},
  "swank.commands.basic/throw-to-toplevel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4033,
   :name "throw-to-toplevel",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4033"},
  "clojure.core/bit-clear"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:06:41.0",
     :function "bit-clear",
     :version 4,
     :created_at "2010-07-28 10:23:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-clear 2r1011 3) ; index is 0-based\n3 \n;; 3 = 2r0011\n\n;; the same in decimal\nuser=> (bit-clear 11 3) \n3"}],
   :id 5382,
   :name "bit-clear",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5382"},
  "clojure.contrib.datalog.database/database-merge"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 177,
   :name "database-merge",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/177"},
  "lancet/define-ant-task"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3410,
   :name "define-ant-task",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3410"},
  "clojure.contrib.error-kit/do-not-handle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 289,
   :name "do-not-handle",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/289"},
  "swank.commands.basic/describe-symbol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4068,
   :name "describe-symbol",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4068"},
  "incanter.processing/THRESHOLD"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2992,
   :name "THRESHOLD",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2992"},
  "ring.util.servlet/build-request-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2624,
   :name "build-request-map",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2624"},
  "lancet/copyfile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3404,
   :name "copyfile",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3404"},
  "clojure.core/unchecked-negate"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unchecked-add",
     :updated_at "2010-11-08 03:25:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1700",
     :line "955",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-add",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-dec",
     :updated_at "2010-11-08 03:52:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1540",
     :line "941",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-dec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-inc",
     :updated_at "2010-11-08 03:53:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1632",
     :line "934",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-inc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "unchecked-negate",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1645",
     :line "948",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-negate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-divide",
     :updated_at "2011-08-20 23:49:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2111",
     :line "976",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-divide",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-subtract",
     :updated_at "2010-11-08 03:42:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1768",
     :line "962",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-subtract",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-multiply",
     :updated_at "2011-08-21 00:16:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1533",
     :line "969",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-multiply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-remainder",
     :updated_at "2010-11-08 03:47:39.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2023",
     :line "983",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-remainder",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5814,
   :name "unchecked-negate",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5814"},
  "swank.util.net.sockets/start-server-socket!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4267,
   :name "start-server-socket!",
   :ns "swank.util.net.sockets",
   :url "http://clojuredocs.org/v/4267"},
  "incanter.processing/COMPLAINT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3126,
   :name "COMPLAINT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3126"},
  "clojure.contrib.str-utils2/split"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1267,
   :name "split",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1267"},
  "swank.core/thread-for-evaluation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4055,
   :name "thread-for-evaluation",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4055"},
  "clojure.core/print-method"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "print-dup",
     :updated_at "2011-03-14 05:16:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1797",
     :line "2805",
     :arglists_comp "",
     :url_friendly_name "print-dup",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5672,
   :name "print-method",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5672"},
  "incanter.stats/sample-permutations"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3337,
   :name "sample-permutations",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3337"},
  "clojure.core/."
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6135,
   :name ".",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6135"},
  "clojure.core/EMPTY-NODE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5335,
   :name "EMPTY-NODE",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5335"},
  "clojure.contrib.math/sqrt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 695,
   :name "sqrt",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/695"},
  "clojure.contrib.accumulators/empty-sum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3,
   :name "empty-sum",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/3"},
  "circumspec.contrib-mocking/expect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3647,
   :name "expect",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3647"},
  "clojure.contrib.datalog.literals/build-atom"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 233,
   :name "build-atom",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/233"},
  "clojure.core/set-error-mode!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5750,
   :name "set-error-mode!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5750"},
  "midje.semi-sweet/fake"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4345,
   :name "fake",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4345"},
  "clojure.core/condp"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "cond",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1553",
     :line "491",
     :arglists_comp "[& clauses]",
     :url_friendly_name "cond",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 05:12:46.0",
     :function "condp",
     :version 3,
     :created_at "2010-07-12 19:57:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Taken from the excellent clojure tutorial:\n;; http://java.ociweb.com/mark/clojure/article.html\n\nuser=> (print \"Enter a number: \")\nuser=> (flush) ; stays in a buffer otherwise\nuser=> (let [reader (java.io.BufferedReader. *in*) ; stdin\n             line (.readLine reader)\n             value (try\n                     (Integer/parseInt line)\n                     (catch NumberFormatException e line))] ;use string val if not int\n         (println\n           (condp = value\n             1 \"one\"\n             2 \"two\"\n             3 \"three\"\n             (str \"unexpected value, \\\"\" value \\\")))\n         (println\n           (condp instance? value\n             Number (* value 2)\n             String (* (count value) 2))))\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:07:32.0",
     :function "condp",
     :version 4,
     :created_at "2010-07-13 06:20:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (condp some [1 2 3 4]\n         #{0 6 7} :>> inc\n         #{4 5 9} :>> dec\n         #{1 2 3} :>> #(+ % 3))\n\n3"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:08:19.0",
     :function "condp",
     :version 4,
     :created_at "2010-07-13 06:20:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (condp some [1 2 3 4]\n         #{0 6 7} :>> inc\n         #{5 9}   :>> dec)\n\njava.lang.IllegalArgumentException: No matching clause: [1 2 3 4]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:08:36.0",
     :function "condp",
     :version 3,
     :created_at "2010-07-13 06:25:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (condp (comp seq re-seq) \"foo=bar\"\n         #\"[+](\\w+)\"    :>> #(vector (-> % first (nth 1) keyword) true)\n         #\"[-](\\w+)\"    :>> #(vector (-> % first (nth 1) keyword) false)\n         #\"(\\w+)=(\\S+)\" :>> #(let [x (first %)]\n                               [(keyword (nth x 1)) (nth x 2)]))\n\n[:foo \"bar\"]"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:13:47.0",
     :function "condp",
     :version 1,
     :created_at "2012-04-12 22:13:47.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5432,
   :name "condp",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5432"},
  "clojure.contrib.http.agent/error?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 470,
   :name "error?",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/470"},
  "clojure.core/re-groups"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "re-find",
     :updated_at "2011-08-03 05:05:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1773",
     :line "3799",
     :arglists_comp "[m]|[re s]",
     :url_friendly_name "re-find",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-03 05:30:49.0",
     :function "re-groups",
     :version 1,
     :created_at "2011-08-03 05:30:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def phone-number \"672-345-456-3212\")\n#'user/phone-number\n\nuser=> (def matcher (re-matcher #\"((\\d+)-(\\d+))\" phone-number))\n#'user/matcher\n\nuser=> (re-find matcher)\n[\"672-345\" \"672-345\" \"672\" \"345\"]\n\n;; re-groups gets the most recent find or matches\nuser=> (re-groups matcher)\n[\"672-345\" \"672-345\" \"672\" \"345\"]\nuser=> (re-groups matcher)\n[\"672-345\" \"672-345\" \"672\" \"345\"]\n\n\nuser=> (re-find matcher)\n[\"456-3212\" \"456-3212\" \"456\" \"3212\"]\n\nuser=> (re-groups matcher)\n[\"456-3212\" \"456-3212\" \"456\" \"3212\"]\nuser=> (re-groups matcher)\n[\"456-3212\" \"456-3212\" \"456\" \"3212\"]\n\n\nuser=> (re-find matcher)\nnil\n\nuser=> (re-groups matcher)\nIllegalStateException No match found  java.util.regex.Matcher.group (Matcher.java:468)"}],
   :id 5697,
   :name "re-groups",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5697"},
  "incanter.core/deshape"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2876,
   :name "deshape",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2876"},
  "clojure.core/ns-publics"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ns-map",
     :updated_at "2010-10-25 23:35:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1997",
     :line "3216",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-interns",
     :updated_at "2011-08-21 21:48:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1612",
     :line "3248",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-interns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "resolve",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1944",
     :line "3382",
     :arglists_comp "[sym]",
     :url_friendly_name "resolve",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-24 06:15:44.0",
     :function "ns-publics",
     :version 3,
     :created_at "2011-02-24 06:02:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create the namespace and switch to it\nuser=> (in-ns 'demo.ns)\n#<Namespace demo.ns>\n\n;; Make sure all of the good stuff in clojure.core is usable here, too.\ndemo.ns=> (clojure.core/use 'clojure.core)\nnil\n\n;; define some public functions\ndemo.ns=> (defn public-fn1 [x y] (+ x y))\n#'demo.ns/public-fn1\ndemo.ns=> (defn public-fn2 [t] (* t t t))\n#'demo.ns/public-fn2\n\n;; define a private function with defn-\ndemo.ns=> (defn- private-fn [s] (/ s 5))\n#'demo.ns/private-fn\n\n;; Switch back to the user namespace\ndemo.ns=> (in-ns 'user)\n#<Namespace user>\n\n;; Get a map of all intern mappings for namespace demo.ns\nuser=> (ns-interns 'demo.ns)\n{public-fn1 #'demo.ns/public-fn1, private-fn #'demo.ns/private-fn, public-fn2 #'demo.ns/public-fn2}\n\n;; Now get a map of only the public mappings.  No private-fn here.\nuser=> (ns-publics 'demo.ns)\n{public-fn1 #'demo.ns/public-fn1, public-fn2 #'demo.ns/public-fn2}\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-24 02:36:26.0",
     :function "ns-publics",
     :version 1,
     :created_at "2012-09-24 02:36:26.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See also http://clojure.org/namespaces for information on namespaces in Clojure and how to inspect and manipulate them"}],
   :id 5637,
   :name "ns-publics",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5637"},
  "clojure.main/repl-read"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5917,
   :name "repl-read",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5917"},
  "incanter.main/-main"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2970,
   :name "-main",
   :ns "incanter.main",
   :url "http://clojuredocs.org/v/2970"},
  "incanter.charts/bar-chart*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2831,
   :name "bar-chart*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2831"},
  "swank.util/one-of?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4050,
   :name "one-of?",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4050"},
  "clojure.contrib.fcase/case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 301,
   :name "case",
   :ns "clojure.contrib.fcase",
   :url "http://clojuredocs.org/v/301"},
  "clojure.contrib.shell-out/*sh-env*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1220,
   :name "*sh-env*",
   :ns "clojure.contrib.shell-out",
   :url "http://clojuredocs.org/v/1220"},
  "ring.util.servlet/defservice"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2621,
   :name "defservice",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2621"},
  "clojure.contrib.http.agent/client-error?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 468,
   :name "client-error?",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/468"},
  "clojure.core/cond"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-28 12:39:38.0",
     :user_id 195,
     :function "cond",
     :version "1.2.0",
     :created_at "2010-10-28 12:39:38.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "We should add a comment in the docstring for the final usage of :else."}],
   :see-alsos
   [{:namespace_id 8,
     :weight 1,
     :name "cond-let",
     :updated_at "2010-11-05 19:30:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/55",
     :line "18",
     :arglists_comp "[bindings & clauses]",
     :url_friendly_name "cond-let",
     :file "clojure/contrib/cond.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "condp",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1838",
     :line "5097",
     :arglists_comp "[pred expr & clauses]",
     :url_friendly_name "condp",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "case",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1893",
     :line "5278",
     :arglists_comp "[e & clauses]",
     :url_friendly_name "case",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:44:31.0",
     :function "cond",
     :version 7,
     :created_at "2010-07-13 18:25:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn pos-neg-or-zero\n  \"Determines whether or not n is positive, negative, or zero\"\n  [n]\n  (cond\n    (< n 0) \"negative\"\n    (> n 0) \"positive\"\n    :else \"zero\"))\n\nuser=> (pos-neg-or-zero 5)\n\"positive\"\nuser=> (pos-neg-or-zero -1)\n\"negative\"\nuser=> (pos-neg-or-zero 0)\n\"zero\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:42:36.0",
     :function "cond",
     :version 3,
     :created_at "2010-07-13 18:44:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [grade 85]\n         (cond\n           (> grade 90) \"A\"\n           (> grade 80) \"B\"\n           (> grade 70) \"C\"\n           (> grade 60) \"D\"\n           :else \"F\"))\n\"B\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:01:55.0",
     :function "cond",
     :version 1,
     :created_at "2012-04-12 22:01:55.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-28 23:35:35.0",
     :function "cond",
     :version 1,
     :created_at "2012-05-28 23:35:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Generates a random number compares it to user input\n(let [rnd (rand-int 10)\n      guess (Integer/parseInt (read-line))]\n  (cond\n    (= rnd guess) (println \"You got my guess right!\")\n    :else (println \"Sorry... guess again!\")))"}],
   :id 5431,
   :name "cond",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5431"},
  "swank.commands.basic/set-package"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4062,
   :name "set-package",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4062"},
  "incanter.processing/load-bytes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3112,
   :name "load-bytes",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3112"},
  "incanter.charts/histogram*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2793,
   :name "histogram*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2793"},
  "incanter.processing/hour"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3180,
   :name "hour",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3180"},
  "clojure.contrib.pprint/pprint-agent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 850,
   :name "pprint-agent",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/850"},
  "clojure.contrib.shell-out/*sh-dir*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1212,
   :name "*sh-dir*",
   :ns "clojure.contrib.shell-out",
   :url "http://clojuredocs.org/v/1212"},
  "clojure.contrib.datalog.literals/negation-symbol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 228,
   :name "negation-symbol",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/228"},
  "incanter.processing/QUADS"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3202,
   :name "QUADS",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3202"},
  "incanter.processing/RECT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3177,
   :name "RECT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3177"},
  "clojure.core/proxy"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-19 14:27:19.0",
     :function "proxy",
     :version 1,
     :created_at "2010-10-19 14:27:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; adding a mouse pressed callback to a Swing component:\n\n(defn add-mousepressed-listener\n  [component f & args]\n  (let [listener (proxy [MouseAdapter] []\n                     (mousePressed [event]\n                                   (apply f event args)))]\n    (.addMouseListener component listener)\n    listener))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-10 14:48:10.0",
     :function "proxy",
     :version 1,
     :created_at "2012-05-10 14:48:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; BUG: proxy dispatches *only* on name, not arity:\nuser=> (let [p (proxy [java.io.InputStream] [] (read [] -1))]\n         (println (.read p))\n         (println (.read p (byte-array 3) 0 3)))\n\n-1\nArityException Wrong number of args (4) passed to: core$eval213$fn  clojure.lang.AFn.throwArity (AFn.java:437)\n"}],
   :id 5681,
   :name "proxy",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5681"},
  "clojure.contrib.javadoc.browse-ui/open-url-in-swing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 545,
   :name "open-url-in-swing",
   :ns "clojure.contrib.javadoc.browse-ui",
   :url "http://clojuredocs.org/v/545"},
  "clojure.contrib.sql.internal/get-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1245,
   :name "get-connection",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1245"},
  "swank.util.java/static-methods"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4153,
   :name "static-methods",
   :ns "swank.util.java",
   :url "http://clojuredocs.org/v/4153"},
  "incanter.core/mult"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2740,
   :name "mult",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2740"},
  "clojure.core/pr"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "print",
     :updated_at "2010-12-29 17:53:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1668",
     :line "2857",
     :arglists_comp "[& more]",
     :url_friendly_name "print",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prn",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1650",
     :line "2848",
     :arglists_comp "[& more]",
     :url_friendly_name "prn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "pr-str",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1859",
     :line "3694",
     :arglists_comp "[& xs]",
     :url_friendly_name "pr-str",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-07 03:48:02.0",
     :function "pr",
     :version 1,
     :created_at "2011-09-07 03:48:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (pr \"foo\")\n\"foo\"nil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-07 03:48:35.0",
     :function "pr",
     :version 1,
     :created_at "2011-09-07 03:48:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (pr {:foo \"hello\" :bar 34.5})\n{:foo \"hello\", :bar 34.5}nil"}],
   :id 5664,
   :name "pr",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5664"},
  "clojure.contrib.test-is/*testing-contexts*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1404,
   :name "*testing-contexts*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1404"},
  "swank.loader/*swank-source-path*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4287,
   :name "*swank-source-path*",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4287"},
  "incanter.processing/noise-seed"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3110,
   :name "noise-seed",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3110"},
  "clojure.core/remove-ns"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "create-ns",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1798",
     :line "3182",
     :arglists_comp "[sym]",
     :url_friendly_name "create-ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "find-ns",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1899",
     :line "3177",
     :arglists_comp "[sym]",
     :url_friendly_name "find-ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:35:42.0",
     :function "remove-ns",
     :version 6,
     :created_at "2010-09-19 19:06:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Let's create a namespace and the remove it\n\nuser=> (create-ns 'my-new-namespace)\n#&lt;Namespace my-new-namespace&gt;\n\n;; removing a namespace will give you the namespace you just deleted, if one existed\nuser=> (remove-ns 'my-new-namespace)\n#&lt;Namespace my-new-namespace&gt;\n\n;; removing a namespace that does not exist, will tell you that nothing was removed, \n;; by returning nill, and won't give any errors\nuser=> (remove-ns 'my-new-namespace)\nnil\n"}],
   :id 5721,
   :name "remove-ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5721"},
  "incanter.processing/noise-detail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3181,
   :name "noise-detail",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3181"},
  "clojure.inspector/table-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5874,
   :name "table-model",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5874"},
  "leiningen.pom/make-dependency"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3533,
   :name "make-dependency",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3533"},
  "circumspec.should/local-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3750,
   :name "local-bindings",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3750"},
  "net.cgrand.enlive-html/zip-select"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3865,
   :name "zip-select",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3865"},
  "circumspec.report.nested/report-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3705,
   :name "report-lines",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3705"},
  "clojure.contrib.pprint/pprint-anon-func"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 903,
   :name "pprint-anon-func",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/903"},
  "clojure.contrib.datalog.literals/literal-magic?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 214,
   :name "literal-magic?",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/214"},
  "circumspec.watch/re-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3781,
   :name "re-test",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3781"},
  "clj-ssh.ssh/sftp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1476,
   :name "sftp",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1476"},
  "swank.util.concurrent.thread/thread-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4094,
   :name "thread-name",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4094"},
  "incanter.core/beta"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2861,
   :name "beta",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2861"},
  "clojure.contrib.string/replace-first-re"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1339,
   :name "replace-first-re",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1339"},
  "clojure.core/apply"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "map",
     :updated_at "2010-10-20 05:22:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1734",
     :line "2079",
     :arglists_comp
     "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
     :url_friendly_name "map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "eval",
     :updated_at "2011-06-24 20:42:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/2022",
     :line "2379",
     :arglists_comp "[form]",
     :url_friendly_name "eval",
     :file "clojure/core.clj"}
    {:namespace_id 3,
     :weight 0,
     :name "apply-macro",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/36",
     :line "34",
     :arglists_comp "[macro & args]",
     :url_friendly_name "apply-macro",
     :file "clojure/contrib/apply_macro.clj"}
    {:namespace_id 114,
     :weight 1,
     :name "apply-template",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/2488",
     :line "30",
     :arglists_comp "[argv expr values]",
     :url_friendly_name "apply-template",
     :file "clojure/template.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:16:46.0",
     :function "apply",
     :version 4,
     :created_at "2010-07-13 16:10:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def *strings* [\"str1\" \"str2\" \"str3\"])\n#'user/*strings*\n\n;; Oops!\nuser=> (str *strings*)\n\"[\\\"str1\\\" \\\"str2\\\" \\\"str3\\\"]\"\n\n;; Yay!\nuser=> (apply str *strings*)\n\"str1str2str3\"\nuser=>\n\n;; Note the equivalence of the following two forms\nuser=> (apply str [\"str1\" \"str2\" \"str3\"])\n\"str1str2str3\"\n\nuser=> (str \"str1\" \"str2\" \"str3\")\n\"str1str2str3\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-04 04:45:02.0",
     :function "apply",
     :version 5,
     :created_at "2010-07-26 22:14:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; If you were to try\nuser=> (max [1 2 3])\n[1 2 3]\n\n;; You would get '[1 2 3]' for the result. In this case, 'max' has received one\n;; vector argument, and the largest of its arguments is that single vector.\n\n;; If you would like to find the largest item **within** the vector, you would need\n;; to use `apply`\n\nuser=> (apply max [1 2 3])\n3\n\n;; which is the same as (max 1 2 3)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:21:36.0",
     :function "apply",
     :version 4,
     :created_at "2010-09-21 18:56:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Here's an example that uses the optional second argument, args:\n\nuser=> (apply map vector [[:a :b] [:c :d]])\n([:a :c] [:b :d])\n\n;; In this example, 'f' = 'map', 'args' = 'vector', and argseq = '[:a :b] [:c :d]',\n;; making the above code equivalent to\n\nuser=> (map vector [:a :b] [:c :d])\n([:a :c] [:b :d]) ;Same answer as above\n\n;; It might help to think of 'map' and 'vector' \"slipping inside\" the argument list\n;; ( '[[:a :b] [:c :d]]' ) to give '[map vector [:a :b] [:c :d]]' , which then \n;; becomes the executable form '(map vector [:a :b] [:c :d])' ."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-02 22:51:26.0",
     :function "apply",
     :version 1,
     :created_at "2010-11-02 22:51:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; only functions can be used with apply.  'and' is a macro\n;; because it needs to evaluate its arguments lazily and so\n;; does not work with apply.\nuser=> (apply and (list true true false true)\n\n-> ERROR\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-11-26 14:37:01.0",
     :function "apply",
     :version 2,
     :created_at "2010-11-08 20:49:52.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";apply is used to apply an operator to its operands. \n\n(apply + '(1 2))  ; equal to (+ 1 2)\n=> 3\n\n\n;you can also put operands before the list of operands and they'll be consumed in the list of operands\n\n(apply + 1 2 '(3 4))  ; equal to (apply + '(1 2 3 4))\n=> 10"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-16 14:07:54.0",
     :function "apply",
     :version 1,
     :created_at "2011-07-16 14:07:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; You can use map and apply together to drill one level deep in a collection\n;; of collections, in this case returning a collection of the max of each\n;; nested collection\n\nuser=> (map #(apply max %) [[1 2 3][4 5 6][7 8 9]])\n(3 6 9)"}],
   :id 5353,
   :name "apply",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5353"},
  "clojure.contrib.datalog.util/*trace-datalog*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 193,
   :name "*trace-datalog*",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/193"},
  "circumspec.report.nested/report-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3704,
   :name "report-string",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3704"},
  "midje.checkers/anything"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4329,
   :name "anything",
   :ns "midje.checkers",
   :url "http://clojuredocs.org/v/4329"},
  "clojure.contrib.accumulators/sum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2,
   :name "sum",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/2"},
  "clojure.core/char-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "into-array",
     :updated_at "2011-01-07 02:15:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1643",
     :line "2635",
     :arglists_comp "[aseq]|[type aseq]",
     :url_friendly_name "into-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "to-array",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2063",
     :line "295",
     :arglists_comp "[coll]",
     :url_friendly_name "to-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "chars",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1743",
     :line "4217",
     :arglists_comp "[xs]",
     :url_friendly_name "chars",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 18:12:45.0",
     :function "char-array",
     :version 1,
     :created_at "2010-12-29 18:12:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (char-array \"asdf\")\n#<char[] [C@167fc18>\n\nuser> (seq (char-array \"asdf\"))\n(\\a \\s \\d \\f)\n\nuser> (seq (char-array 10))\n(\\^@ \\^@ \\^@ \\^@ \\^@ \\^@ \\^@ \\^@ \\^@ \\^@)"}],
   :id 5404,
   :name "char-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5404"},
  "swank.util.clojure/unmunge"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4006,
   :name "unmunge",
   :ns "swank.util.clojure",
   :url "http://clojuredocs.org/v/4006"},
  "clojure.contrib.swing-utils/do-swing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1357,
   :name "do-swing",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1357"},
  "clojure.pprint/pp"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 109,
     :ns "clojure.pprint",
     :updated_at "2010-09-26 04:38:22.0",
     :function "pp",
     :version 4,
     :created_at "2010-07-14 19:27:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (zipmap \n        [:a :b :c :d :e] \n        (repeat \n          (zipmap \n            [:a :b :c :d :e] \n            (take 5 (range)))))\n{:e {:e 4, :d 3, :c 2, :b 1, :a 0}, :d {:e 4, :d 3, :c 2, :b 1, :a 0}, :c {:e 4, :d 3, :c 2, :b 1, :a 0}, :b {:e 4, :d 3, :c 2, :b 1, :a 0}, :a {:e 4, :d 3, :c 2, :b 1, :a 0}}\n\nuser=> (clojure.pprint/pp)\n{:e {:e 4, :d 3, :c 2, :b 1, :a 0},\n :d {:e 4, :d 3, :c 2, :b 1, :a 0},\n :c {:e 4, :d 3, :c 2, :b 1, :a 0},\n :b {:e 4, :d 3, :c 2, :b 1, :a 0},\n :a {:e 4, :d 3, :c 2, :b 1, :a 0}}\nnil\n"}],
   :id 5936,
   :name "pp",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5936"},
  "clojure.core/string?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:08:58.0",
     :function "string?",
     :version 3,
     :created_at "2010-07-30 20:24:03.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (string? \\a)\nfalse\n\nuser=> (string? \"abc\")\ntrue\n\nuser=> (string? 1)\nfalse\n\nuser=> (string? [\"a\" \"b\" \"c\"])\nfalse"}],
   :id 5773,
   :name "string?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5773"},
  "clojure.contrib.probabilities.monte-carlo/random-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1094,
   :name "random-stream",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1094"},
  "circumspec.raw/dump-results"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3690,
   :name "dump-results",
   :ns "circumspec.raw",
   :url "http://clojuredocs.org/v/3690"},
  "circumspec.should/match-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3752,
   :name "match-fn",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3752"},
  "clojure.contrib.error-kit/rebind-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 285,
   :name "rebind-fn",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/285"},
  "clojure.contrib.core/dissoc-in"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc-in",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1757",
     :line "4939",
     :arglists_comp "[m [k & ks] v]",
     :url_friendly_name "assoc-in",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-in",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1581",
     :line "4921",
     :arglists_comp "[m ks]|[m ks not-found]",
     :url_friendly_name "get-in",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "update-in",
     :updated_at "2011-05-10 02:16:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1692",
     :line "4949",
     :arglists_comp "[m [k & ks] f & args]",
     :url_friendly_name "update-in",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 11,
     :ns "clojure.contrib.core",
     :updated_at "2011-09-02 11:27:03.0",
     :function "dissoc-in",
     :version 1,
     :created_at "2011-09-02 11:27:03.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user> (def x [{:a 2 :b 9} {:a 9 :b 5}])\n#'user/x\nuser> (dissoc-in x [1 :a])\n[{:a 2, :b 9} {:b 5}]"}],
   :id 99,
   :name "dissoc-in",
   :ns "clojure.contrib.core",
   :url "http://clojuredocs.org/v/99"},
  "clojure.contrib.pprint/cl-format"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 962,
   :name "cl-format",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/962"},
  "clojure.contrib.duck-streams/with-out-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 272,
   :name "with-out-writer",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/272"},
  "clojure.contrib.miglayout.internal/constraint?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 718,
   :name "constraint?",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/718"},
  "incanter.processing/rect-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3201,
   :name "rect-mode",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3201"},
  "clojure.contrib.monadic-io-streams/read-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 760,
   :name "read-lines",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/760"},
  "lancet/signjar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3464,
   :name "signjar",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3464"},
  "incanter.processing/cursor-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3047,
   :name "cursor-image",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3047"},
  "clojure.core/bigdec"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-11-15 03:18:48.0",
     :function "bigdec",
     :version 4,
     :created_at "2010-08-02 22:45:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bigdec 3.0)\n3.0M\n\nuser=> (bigdec 5)\n5M\n\nuser=> (bigdec -1)\n-1M\n\nuser=> (bigdec -1.0)\n-1.0M\n\n"}],
   :id 5376,
   :name "bigdec",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5376"},
  "clojure.core/nfirst"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "next",
     :updated_at "2010-11-06 03:08:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1620",
     :line "55",
     :arglists_comp "[coll]",
     :url_friendly_name "next",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:09:50.0",
     :function "nfirst",
     :version 4,
     :created_at "2010-08-05 11:39:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (nfirst [])\nnil \n\nuser=> (nfirst ['(a b c) '(b a c) '(c b a) '(a c b)])\n(b c)\n\nuser=> (nfirst {:a 1, :b 2, :c 3, :d 4})\n(1)\n\nuser=> (nfirst #{1 2 3})\njava.lang.IllegalArgumentException: Don't know how to create ISeq from: java.lang.Integer (NO_SOURCE_FILE:0)"}],
   :id 5623,
   :name "nfirst",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5623"},
  "swank.util.class-browse/nested-classes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4151,
   :name "nested-classes",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4151"},
  "clojure.pprint/*print-radix*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5927,
   :name "*print-radix*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5927"},
  "net.licenser.sandbox.tester/s-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5146,
   :name "s-seq",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5146"},
  "incanter.processing/MULTIPLY"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3049,
   :name "MULTIPLY",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3049"},
  "clojure.contrib.generic.functor/fmap"
  {:comments
   [{:namespace_id 33,
     :ns "clojure.contrib.generic.functor",
     :updated_at "2011-11-03 15:12:15.0",
     :user_id 202,
     :function "fmap",
     :version "1.2.0",
     :created_at "2011-11-03 15:12:15.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body "someone please leave examples of this!"}
    {:namespace_id 33,
     :ns "clojure.contrib.generic.functor",
     :updated_at "2011-11-03 15:13:23.0",
     :user_id 202,
     :function "fmap",
     :version "1.2.0",
     :created_at "2011-11-03 15:13:23.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "(defmulti fmap\n  \"Applies function f to each item in the data structure s and returns\n   a structure of the same kind.\"\n   {:arglists '([f s])}\n   (fn [f s] (type s)))\n\n(defmethod fmap clojure.lang.IPersistentList\n  [f v]\n  (into (empty v) (map f v)))\n\n(defmethod fmap clojure.lang.IPersistentVector\n  [f v]\n  (into (empty v) (map f v)))\n\n(defmethod fmap clojure.lang.IPersistentMap\n  [f m]\n  (into (empty m) (for [[k v] m] [k (f v)])))\n\n(defmethod fmap clojure.lang.IPersistentSet\n  [f s]\n  (into (empty s) (map f s)))"}],
   :see-alsos [],
   :examples
   [{:namespace_id 33,
     :ns "clojure.contrib.generic.functor",
     :updated_at "2011-11-15 03:02:57.0",
     :function "fmap",
     :version 4,
     :created_at "2011-11-03 15:14:26.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; when used with a list, note the reversed order of the output:\nuser=> (fmap inc '(1 2 3))\n(4 3 2)\n\nuser=> (fmap inc [1 2 3])\n[2 3 4]\n\nuser=> (fmap inc #{1 2 3})\n#{2 3 4}\n\n;; when used with a map, returns a map where the values have been transformed by f:\nuser=> (fmap inc {:a 1, :b 2, :c 3})\n{:a 2, :b 3, :c 4}"}],
   :id 408,
   :name "fmap",
   :ns "clojure.contrib.generic.functor",
   :url "http://clojuredocs.org/v/408"},
  "clojure.contrib.test-is/find-holes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1405,
   :name "find-holes",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1405"},
  "clojure.contrib.find-namespaces/find-namespaces-in-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 308,
   :name "find-namespaces-in-dir",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/308"},
  "incanter.core/matrix-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2922,
   :name "matrix-map",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2922"},
  "clojure.core/find-protocol-method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5509,
   :name "find-protocol-method",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5509"},
  "clojure.contrib.datalog.literals/positive-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 227,
   :name "positive-vars",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/227"},
  "lancet/fixcrlf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3465,
   :name "fixcrlf",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3465"},
  "circumspec.config/report-function"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3625,
   :name "report-function",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3625"},
  "clojure.contrib.datalog.magic/build-partial-tuple"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 239,
   :name "build-partial-tuple",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/239"},
  "clojure.core/swap!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "atom",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/2028",
     :line "1767",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "atom",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "reset!",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1925",
     :line "1802",
     :arglists_comp "[atom newval]",
     :url_friendly_name "reset!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-30 20:49:45.0",
     :function "swap!",
     :version 2,
     :created_at "2010-10-07 15:48:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (def players (atom ()))\n#'user/players\n\nuser> (swap! players conj :player1)\n(:player1)\n\nuser> (swap! players conj :player2)\n(:player2 :player1)\n\nuser> (deref players)\n(:player2 :player1)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-30 20:50:15.0",
     :function "swap!",
     :version 2,
     :created_at "2010-10-07 15:48:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (def counter (atom 0))\n#'user/counter\n\nuser> (swap! counter inc)\n1\n\nuser> (swap! counter inc)\n2"}],
   :id 5780,
   :name "swap!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5780"},
  "incanter.processing/vertex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3050,
   :name "vertex",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3050"},
  "clojure.contrib.generic.math-functions/ceil"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 430,
   :name "ceil",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/430"},
  "clj-ssh.ssh/create-ssh-agent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1491,
   :name "create-ssh-agent",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1491"},
  "swank.loader/swank-packages"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4292,
   :name "swank-packages",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4292"},
  "midje.semi-sweet/falsey"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4335,
   :name "falsey",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4335"},
  "clojure.core//"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5328,
   :name "/",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5328"},
  "net.licenser.sandbox.tester/new-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5134,
   :name "new-tester",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5134"},
  "clojure.contrib.datalog.database/add-relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 159,
   :name "add-relation",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/159"},
  "clojure.contrib.jmx/operation-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 566,
   :name "operation-names",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/566"},
  "incanter.core/regularized-beta"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2858,
   :name "regularized-beta",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2858"},
  "clojure.contrib.swing-utils/make-action"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1350,
   :name "make-action",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1350"},
  "clojure.core/unquote-splicing"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unquote",
     :updated_at "2011-05-10 18:29:58.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1999",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "unquote",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-10 18:36:57.0",
     :function "unquote-splicing",
     :version 1,
     :created_at "2011-05-10 18:36:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [x `(2 3)] \n         `(1 ~x))\n(1 (2 3))\n\nuser=> (let [x `(2 3)] \n         `(1 ~@x)) \n(1 2 3)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-10-21 04:29:45.0",
     :function "unquote-splicing",
     :version 1,
     :created_at "2011-10-21 04:29:45.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> `(1 2 ~(list 3 4))\n\n(1 2 (3 4))\n\nuser=> `(1 2 ~@(list 3 4))\n\n(1 2 3 4)\n\n; borrowed from StackOverflow: \n; http://stackoverflow.com/questions/4571042/can-someone-explain-clojures-unquote-splice-in-simple-terms"}],
   :id 5822,
   :name "unquote-splicing",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5822"},
  "clojure.core/map?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:10:14.0",
     :function "map?",
     :version 3,
     :created_at "2010-07-13 19:24:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map? {:a 1 :b 2 :c 3})\ntrue\nuser=> (map? '(1 2 3))\nfalse"}],
   :id 5602,
   :name "map?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5602"},
  "clojure.contrib.monads/update-val"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 815,
   :name "update-val",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/815"},
  "incanter.processing/ceil"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3252,
   :name "ceil",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3252"},
  "clojure.contrib.profile/*enable-profiling*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1115,
   :name "*enable-profiling*",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1115"},
  "clojure.test/deftest-"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 2,
     :name "deftest",
     :updated_at "2010-11-08 23:37:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2495",
     :line "593",
     :arglists_comp "[name & body]",
     :url_friendly_name "deftest",
     :file "clojure/test.clj"}],
   :examples [],
   :id 6027,
   :name "deftest-",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6027"},
  "clojure.contrib.generic.math-functions/acos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 427,
   :name "acos",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/427"},
  "incanter.core/tan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2845,
   :name "tan",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2845"},
  "circumspec.for-all/printable-ascii-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3666,
   :name "printable-ascii-string",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3666"},
  "clojure.contrib.string/join"
  {:comments
   [{:namespace_id 88,
     :ns "clojure.contrib.string",
     :updated_at "2011-07-25 00:59:36.0",
     :user_id 323,
     :function "join",
     :version "1.2.0",
     :created_at "2011-07-25 00:59:36.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "I was thinking about how to delimit a sequence for creating .csv files. join looks like a very good candidate for adding non-trailing delimiters to sequences, so they can be written out as .csv files."}],
   :see-alsos
   [{:namespace_id 113,
     :weight 2,
     :name "join",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/2472",
     :line "130",
     :arglists_comp "[coll]|[separator [x & more]]",
     :url_friendly_name "join",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 88,
     :ns "clojure.contrib.string",
     :updated_at "2011-07-25 00:56:48.0",
     :function "join",
     :version 1,
     :created_at "2011-07-25 00:56:48.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(def test-v [1 2 3 4 5])\n\n(join \",\" test-v)\n\"1,2,3,4,5\""}],
   :id 44,
   :name "join",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/44"},
  "clojure.contrib.str-utils2/grep"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1285,
   :name "grep",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1285"},
  "clojure.pprint/*print-right-margin*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5928,
   :name "*print-right-margin*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5928"},
  "clojure.contrib.monads/m-result"
  {:comments
   [{:namespace_id 61,
     :ns "clojure.contrib.monads",
     :updated_at "2011-03-20 11:51:20.0",
     :user_id 286,
     :function "m-result",
     :version "1.2.0",
     :created_at "2011-03-20 11:51:20.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "Link to source doesn't work, try this:<br/>\nhttps://github.com/clojure/clojure-contrib/blob/master/modules/monads/src/main/clojure/clojure/contrib/monads.clj#L175"}],
   :see-alsos
   [{:namespace_id 61,
     :weight 1,
     :name "identity-m",
     :updated_at "2011-05-28 15:31:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/816",
     :line "286",
     :arglists_comp "",
     :url_friendly_name "identity-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "maybe-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/773",
     :line "296",
     :arglists_comp "",
     :url_friendly_name "maybe-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "sequence-m",
     :updated_at "2010-10-20 04:41:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/799",
     :line "309",
     :arglists_comp "",
     :url_friendly_name "sequence-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "set-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/787",
     :line "323",
     :arglists_comp "",
     :url_friendly_name "set-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "state-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:54:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/762",
     :line "336",
     :arglists_comp "",
     :url_friendly_name "state-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "cont-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/796",
     :line "440",
     :arglists_comp "",
     :url_friendly_name "cont-m",
     :file "clojure/contrib/monads.clj"}],
   :examples [],
   :id 777,
   :name "m-result",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/777"},
  "net.licenser.sandbox.tester/combine-testers"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5143,
   :name "combine-testers",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5143"},
  "clojure.contrib.io/Streams"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 520,
   :name "Streams",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/520"},
  "incanter.core/cumulative-sum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2860,
   :name "cumulative-sum",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2860"},
  "clojure.contrib.macro-utils/mexpand"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 669,
   :name "mexpand",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/669"},
  "clojure.contrib.swing-utils/add-menu-item"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1353,
   :name "add-menu-item",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1353"},
  "clojure.core/unchecked-negate-int"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-14 05:50:38.0",
     :function "unchecked-negate-int",
     :version 1,
     :created_at "2012-03-14 05:50:38.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (unchecked-negate-int 4)\n-4\nuser=> (unchecked-negate-int 0)\n0\nuser=> (unchecked-negate-int -7)\n7\nuser=> (unchecked-negate-int Integer/MAX_VALUE)\n-2147483647\nuser=> (unchecked-negate-int Integer/MIN_VALUE) ;overflow\n-2147483648"}],
   :id 5815,
   :name "unchecked-negate-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5815"},
  "incanter.processing/stroke-weight"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3070,
   :name "stroke-weight",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3070"},
  "incanter.processing/RGB"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3068,
   :name "RGB",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3068"},
  "clojure.contrib.lazy-xml/attributes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 624,
   :name "attributes",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/624"},
  "clojure.contrib.probabilities.finite-distributions/zipf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1088,
   :name "zipf",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1088"},
  "clojure.contrib.datalog.rules/return-rule-data"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 156,
   :name "return-rule-data",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/156"},
  "leiningen.uberjar/get-default-uberjar-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3583,
   :name "get-default-uberjar-name",
   :ns "leiningen.uberjar",
   :url "http://clojuredocs.org/v/3583"},
  "circumspec.contrib-mocking/incorrect-invocation-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3653,
   :name "incorrect-invocation-count",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3653"},
  "ring.util.servlet/ring.util.servlet.proxy$javax.servlet.http.HttpServlet$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2619,
   :name "ring.util.servlet.proxy$javax.servlet.http.HttpServlet$0",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2619"},
  "ring.adapter.jetty/ring.adapter.jetty.proxy$org.mortbay.jetty.handler.AbstractHandler$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2618,
   :name
   "ring.adapter.jetty.proxy$org.mortbay.jetty.handler.AbstractHandler$0",
   :ns "ring.adapter.jetty",
   :url "http://clojuredocs.org/v/2618"},
  "clojure.main/with-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5922,
   :name "with-bindings",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5922"},
  "clojure.core/println"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "prn",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1650",
     :line "2848",
     :arglists_comp "[& more]",
     :url_friendly_name "prn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "print",
     :updated_at "2010-12-29 17:53:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1668",
     :line "2857",
     :arglists_comp "[& more]",
     :url_friendly_name "print",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:07:10.0",
     :function "println",
     :version 4,
     :created_at "2010-08-02 12:23:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (println \"Hello world.\")\nHello world.\nnil"}],
   :id 5676,
   :name "println",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5676"},
  "clojure.core/clojure-version"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:10:38.0",
     :function "clojure-version",
     :version 3,
     :created_at "2010-07-28 06:18:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (clojure-version)\n\"1.2.0-master-SNAPSHOT\""}],
   :id 5420,
   :name "clojure-version",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5420"},
  "clojure.core/int"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "char",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1957",
     :line "2704",
     :arglists_comp "[x]",
     :url_friendly_name "char",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "long",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/1566",
     :line "2669",
     :arglists_comp "[x]",
     :url_friendly_name "long",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "integer?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/1646",
     :line "2724",
     :arglists_comp "[n]",
     :url_friendly_name "integer_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "ints",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1907",
     :line "4232",
     :arglists_comp "[xs]",
     :url_friendly_name "ints",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "int-array",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1730",
     :line "4191",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "int-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "short",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1576",
     :line "2690",
     :arglists_comp "[x]",
     :url_friendly_name "short",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-04 20:08:02.0",
     :function "int",
     :version 6,
     :created_at "2010-07-26 22:27:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (int 1)\r\n1\r\n\r\nuser=> (int 1M)\r\n1\r\n\r\nuser=> (int 1.2)\r\n1\r\n\r\nuser=> (int \\1)\r\n49\r\n\r\nuser=> (int \\a)\r\n97\r\n\r\nuser=> (int \"1\")\r\njava.lang.ClassCastException: ...\r\n"}],
   :id 5557,
   :name "int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5557"},
  "clojure.core/or"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "and",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1962",
     :line "693",
     :arglists_comp "[]|[x]|[x & next]",
     :url_friendly_name "and",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 17:50:53.0",
     :function "or",
     :version 1,
     :created_at "2010-12-29 17:50:53.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (or true false false)\ntrue\n\nuser> (or true true true)\ntrue\n\nuser> (or false false false)\nfalse\n\nuser> (or nil nil)\nnil\n\nuser> (or false nil)\nnil\n\nuser> (or true nil)\ntrue\n\n;; or doesn't evaluate if the first value is true\nuser> (or true (println \"foo\"))\ntrue\n\n;; order matters\nuser> (or (println \"foo\") true)\nfoo\ntrue"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:13:01.0",
     :function "or",
     :version 1,
     :created_at "2012-04-12 22:13:01.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5650,
   :name "or",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5650"},
  "clj-swing.example/graphics-example"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5198,
   :name "graphics-example",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5198"},
  "clj-swing.combo-box/*cb-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5170,
   :name "*cb-known-keys*",
   :ns "clj-swing.combo-box",
   :url "http://clojuredocs.org/v/5170"},
  "clojure.contrib.graph/directed-graph"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 127,
   :name "directed-graph",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/127"},
  "incanter.processing/camera"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3052,
   :name "camera",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3052"},
  "clojure.core/*err*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5296,
   :name "*err*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5296"},
  "incanter.distributions/beta-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5083,
   :name "beta-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5083"},
  "clojure.contrib.generic.math-functions/floor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 419,
   :name "floor",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/419"},
  "swank.core/with-package-tracking"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4121,
   :name "with-package-tracking",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4121"},
  "clojure.contrib.jmx/maybe-keywordize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 576,
   :name "maybe-keywordize",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/576"},
  "clojure.contrib.properties/set-system-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1123,
   :name "set-system-properties",
   :ns "clojure.contrib.properties",
   :url "http://clojuredocs.org/v/1123"},
  "incanter.processing/print-camera"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3118,
   :name "print-camera",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3118"},
  "clojure.contrib.find-namespaces/read-ns-decl-from-jarfile-entry"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 313,
   :name "read-ns-decl-from-jarfile-entry",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/313"},
  "clojure.core/unchecked-multiply"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 00:16:32.0",
     :function "unchecked-multiply",
     :version 1,
     :created_at "2011-08-21 00:16:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; demonstrate the the unchecked-multiply function cannot calculate\n;; 1 trillion * 10 without throwing an exception\n\nuser=> (def thous 1000)\n#'user/thous\nuser=> (def trill (* thous thous thous thous))\n#'user/trill\nuser=> (unchecked-multiply trill 10)\njava.lang.IllegalArgumentException: No matching method found: unchecked_multiply\n (NO_SOURCE_FILE:0)\nuser=> (* trill 10)\n10000000000000\nuser=>"}],
   :id 5812,
   :name "unchecked-multiply",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5812"},
  "clojure.core/vector"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "vec",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1690",
     :line "313",
     :arglists_comp "[coll]",
     :url_friendly_name "vec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1723",
     :line "155",
     :arglists_comp "[x]",
     :url_friendly_name "vector_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector-of",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1503",
     :line "452",
     :arglists_comp "[t]",
     :url_friendly_name "vector-of",
     :file "clojure/gvec.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "pop",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/2026",
     :line "1135",
     :arglists_comp "[coll]",
     :url_friendly_name "pop",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "into",
     :updated_at "2011-07-09 22:43:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1813",
     :line "2608",
     :arglists_comp "[to from]",
     :url_friendly_name "into",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-21 06:31:17.0",
     :function "vector",
     :version 5,
     :created_at "2010-08-16 01:51:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an empty vector the long way\nuser=> (vector)\n[]\n\n;; create an empty vector the short way\nuser=> []\n[]\n\n;; you can even create vectors with nil values\nuser=> (vector nil)\n[nil]\n\n;; create a vector the long way\nuser=> (vector 1 2 3)\n[1 2 3]\n\n;; create a vector the short way\nuser=> [1 2 3]\n[1 2 3]\n\n;; checking for the 2 results above\nuser=> (class (vector 1 2 3))\nclojure.lang.PersistentVector\n\nuser=> (class [1 2 3])\nclojure.lang.PersistentVector\n\nuser=> (= (vector 1 2 3) [1 2 3])\ntrue\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-28 18:56:28.0",
     :function "vector",
     :version 9,
     :created_at "2010-09-26 12:37:08.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Destructuring with a vector, inside a \"let\" form, a simple case (a symbol\n;; for each element):\n\n;; destructuring with an inline vector\nuser=> (let [[first-element second-element third-element fourth-element] \n             [10 20 30 40]] \n         (str \"first=\" first-element \" second=\" second-element \n           \" third=\" third-element \" fourth=\" fourth-element))\n\"first=10 second=20 third=30 fourth=40\"\n;; notice how 4 symbols were created pointing to the scalars 10, 20, 30 and 40\n\n\n;; destructuring with a symbol to a vector\nuser=> (def my-vector [1 2 3 4])\n#'user/my-vector\n\nuser=> (let [[first-element second-element third-element fourth-element] my-vector] \n         (str \"first=\" first-element \" second=\" second-element \n           \" third=\" third-element \" fourth=\" fourth-element))\n\"first=1 second=2 third=3 fourth=4\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-13 16:51:29.0",
     :function "vector",
     :version 9,
     :created_at "2010-09-26 12:37:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Destructuring with a vector, inside a \"let\" form, more complex cases:\n\nuser=> (let [[first-element second-element & the-rest] my-vector] \n         (str \"first=\" first-element \" second=\" second-element \" \n           the-rest=\" the-rest))\n\"first=1 second=2 the-rest=(3 4)\"\n;; notice how \"the-rest\" is a sequence\n\nuser=> (let [[first-element second-element third-element fourth-element \n               :as everything] \n             my-vector] \n         (str \"first=\" first-element \" second=\" second-element \" \n           third=\" third-element \" fourth=\" fourth-element \" \n           everything=\" everything))\n\"first=1 second=2 third=3 fourth=4 everything=[1 2 3 4]\"\n;; notice how \"everything\" is the whole vector"}],
   :id 5833,
   :name "vector",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5833"},
  "incanter.processing/MACOSX"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3188,
   :name "MACOSX",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3188"},
  "ring.util.servlet/merge-servlet-keys"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2620,
   :name "merge-servlet-keys",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2620"},
  "swank.util.clojure/resolve-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4030,
   :name "resolve-ns",
   :ns "swank.util.clojure",
   :url "http://clojuredocs.org/v/4030"},
  "clojure.core/release-pending-sends"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5716,
   :name "release-pending-sends",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5716"},
  "lancet/touch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3469,
   :name "touch",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3469"},
  "clojure.contrib.zip-filter/leftmost?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1430,
   :name "leftmost?",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1430"},
  "clojure.core/float?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:10:58.0",
     :function "float?",
     :version 3,
     :created_at "2010-07-13 19:18:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (float? 0)\nfalse\nuser=> (float? 0.0)\ntrue"}],
   :id 5515,
   :name "float?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5515"},
  "leiningen.compile/stale-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3511,
   :name "stale-namespaces",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3511"},
  "incanter.charts/heat-map*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2803,
   :name "heat-map*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2803"},
  "clojure.contrib.server-socket/close-server"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1196,
   :name "close-server",
   :ns "clojure.contrib.server-socket",
   :url "http://clojuredocs.org/v/1196"},
  "clojure.contrib.probabilities.finite-distributions/normalize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1082,
   :name "normalize",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1082"},
  "clojure.core/hash-set"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:40:10.0",
     :function "hash-set",
     :version 4,
     :created_at "2010-07-30 08:26:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (hash-set 1 2 1 3 1 4 1 5)\n#{1 2 3 4 5}\n\nuser=> (= (hash-set :c :a :b) #{:b :a :c})\ntrue \n\n\nuser=> (hash-set (seq \"Lorem ipsum dolor sit amet\"))\n#{(\\L \\o \\r \\e \\m \\space \\i \\p \\s \\u \\m \\space \\d \\o \\l \\o \\r \\space \\s \\i \\t \\space \\a \\m \\e \\t)} \n\nuser=> (apply hash-set (seq \"Lorem ipsum dolor sit amet\"))\n#{\\space \\a \\d \\e \\i \\L \\l \\m \\o \\p \\r \\s \\t \\u} \n\n\n;; Caution: hash-set now prevents duplicate keys (Clojure 1.2)\nuser=> (hash-set 1 1)\nDuplicate key: 1\n  [Thrown class java.lang.IllegalArgumentException]\n"}],
   :id 5545,
   :name "hash-set",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5545"},
  "clojure.core/seque"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:45:50.0",
     :function "seque",
     :version 3,
     :created_at "2010-08-28 16:41:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [start (System/nanoTime)\n             q (seque\n                 (iterate\n                   #(do (Thread/sleep 400) (inc %))\n                   0))]\n         (println \"sleep five seconds...\")\n         (Thread/sleep 5000)\n         (doseq [i (take 20 q)]\n           (println (int (/ (- (System/nanoTime) start) 1e7))\n                    \":\" i)))\n\n\n;; The iterate form returns a lazy seq that delays nearly a half-second \n;; before returning each subsequent item.  Here seque starts a thread \n;; generating the lazy seq.\n\n;; The body of the let allows the seque thread to get ahead by five seconds\n;; before it begins consuming the seq using doseq.  The doseq prints a \n;; timestamp and the value from the seq when it becomes available.  The\n;; first 11 or so are available almost instantly, until the consuming \n;; doseq catches up with the producing iterate, at which point the consumer\n;; blocks for 400ms before each item can be printed.\n\n;;sleep five seconds...\n500 : 0\n500 : 1\n500 : 2\n500 : 3\n500 : 4\n500 : 5\n500 : 6\n500 : 7\n500 : 8\n500 : 9\n500 : 10\n500 : 11\n520 : 12\n560 : 13\n600 : 14\n640 : 15\n680 : 16\n720 : 17\n760 : 18\n800 : 19\n\n"}],
   :id 5745,
   :name "seque",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5745"},
  "clojure.contrib.find-namespaces/find-ns-decls-on-classpath"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 312,
   :name "find-ns-decls-on-classpath",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/312"},
  "clojure.contrib.trace/deftrace"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 92,
     :ns "clojure.contrib.trace",
     :updated_at "2011-12-30 13:50:11.0",
     :function "deftrace",
     :version 2,
     :created_at "2011-12-30 13:47:38.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";;Example courtesy to Jonas Enlund on clojure@googlegroups.com 2011-12-30:\n\n(ns trc.core\n (:use [clojure.tools.trace :only [deftrace]]))\n\n(deftrace fib [n]\n (if (or (= n 0) (= n 1))\n     1\n     (+ (fib (- n 1)) (fib (- n 2)))))\n\nthe following is printed when (fib 4) is evaluated:\n\nTRACE t2302: (fib 4)\nTRACE t2303: | (fib 3)\nTRACE t2304: | | (fib 2)\nTRACE t2305: | | | (fib 1) \nTRACE t2305: | | | => 1\nTRACE t2306: | | | (fib 0)\nTRACE t2306: | | | => 1\nTRACE t2304: | | => 2\nTRACE t2307: | | (fib 1)\nTRACE t2307: | | => 1\nTRACE t2303: | => 3\nTRACE t2308: | (fib 2)\nTRACE t2309: | | (fib 1)\nTRACE t2309: | | => 1\nTRACE t2310: | | (fib 0)\nTRACE t2310: | | => 1\nTRACE t2308: | => 2\nTRACE t2302: => 5"}],
   :id 1410,
   :name "deftrace",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1410"},
  "clojure.core/future"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "delay",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1986",
     :line "619",
     :arglists_comp "[& body]",
     :url_friendly_name "delay",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1722",
     :line "5235",
     :arglists_comp "[x]",
     :url_friendly_name "future_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-call",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1712",
     :line "5389",
     :arglists_comp "[f]",
     :url_friendly_name "future-call",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-cancel",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1764",
     :line "5416",
     :arglists_comp "[f]",
     :url_friendly_name "future-cancel",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "shutdown-agents",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1924",
     :line "1716",
     :arglists_comp "[]",
     :url_friendly_name "shutdown-agents",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "promise",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1591",
     :line "5501",
     :arglists_comp "[]",
     :url_friendly_name "promise",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 1,
     :name "realized?",
     :updated_at "2012-02-21 10:05:39.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:09:44.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5705",
     :line "6502",
     :arglists_comp "[x]",
     :url_friendly_name "realized_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-05 21:12:50.0",
     :function "future",
     :version 8,
     :created_at "2010-08-05 23:48:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; A future's calculation is started here and it runs in another thread\nuser=> (def f (future (Thread/sleep 10000) (println \"done\") 100))\n#'user/f\n;;if you wait 10 seconds before dereferencing it you'll see \"done\"\n\n;; When you dereference it you will block until the result is available.\nuser=> @f\ndone\n100\n\n;; Dereferencing again will return the already calculated value.\n=> @f\n100\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-05 21:12:48.0",
     :function "future",
     :version 3,
     :created_at "2011-08-03 05:43:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; save the example in a script (e.g. test-future.clj) then run it in the console\n;;\n;; > clojure test-future.clj\n\n(println \"[Main] calculate the answer to life the universe and everything\")\n\n;; Used Thread/sleep to simulate long running process\n(def what-is-the-answer-to-life (future \n        (println \"[Future] started computation\")\n        (Thread/sleep 3000) ;; running for 3 seconds\n        (println \"[Future] completed computation\")\n        42))\n        \n(println \"[Main] created future\")\n\n(Thread/sleep 1000)\n(println \"[Main] do other things while waiting for the answer\")\n(println \"[Main] get the answer\")\n(println \"[Main] the result\" @what-is-the-answer-to-life)\n(shutdown-agents)\n\n\n;; You may get something like this\n;;\n;; [Main] calculate the answer to life the universe and everything\n;; [Future] started computation\n;; [Main] created future\n;; [Main] do other things while waiting for the answer\n;; [Main] get the answer\n;; [Future] completed computation\n;; [Main] the result 42\n\n\n;; Note: If you leave out the call to (shutdown-agents), the program will on\n;; most (all?) OS/JVM combinations \"hang\" for 1 minute before the process exits.\n;; It is simply waiting for background threads, created by the future call, to\n;; be shut down.  shutdown-agents will shut them down immediately, or\n;; (System/exit <exit-status>) will exit immediately without waiting for them\n;; to shut down.\n\n;; This wait occurs even if you use futures indirectly through some other Clojure\n;; functions that use them internally, such as pmap or clojure.java.shell/sh\n\n;; http://dev.clojure.org/jira/browse/CLJ-124 is a ticket opened against Clojure,\n;; as this 1-minute wait is not considered desirable behavior."}],
   :id 5526,
   :name "future",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5526"},
  "clojure.contrib.seq/partition-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1156,
   :name "partition-by",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1156"},
  "net.licenser.sandbox.jvm/empty-perms-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5121,
   :name "empty-perms-list",
   :ns "net.licenser.sandbox.jvm",
   :url "http://clojuredocs.org/v/5121"},
  "clojure.reflect/map->Constructor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5959,
   :name "map->Constructor",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5959"},
  "clojure.core/if-not"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:11:35.0",
     :function "if-not",
     :version 3,
     :created_at "2010-07-30 08:56:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (defn has-neg [coll] \n  (if-not (empty? coll)   ;;  = (if (not (empty? coll)) ...\n    (or (neg? (first coll)) (recur (rest coll)))))\n#'user/has-neg\n\nuser=> (has-neg [])\nnil \n\nuser=> (has-neg [1 2 -3 4])\ntrue"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:11:54.0",
     :function "if-not",
     :version 3,
     :created_at "2010-07-30 09:08:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (if-not (zero? 0) :then :else)\n:else"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:03:31.0",
     :function "if-not",
     :version 1,
     :created_at "2012-04-12 22:03:31.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5549,
   :name "if-not",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5549"},
  "incanter.processing/text-align"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3189,
   :name "text-align",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3189"},
  "clojure.contrib.seq-utils/includes?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1184,
   :name "includes?",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1184"},
  "clojure.reflect/map->Field"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5960,
   :name "map->Field",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5960"},
  "clojure.contrib.str-utils/re-partition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1261,
   :name "re-partition",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1261"},
  "clojure.core/*agent*"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:57:53.0",
     :function "*agent*",
     :version 3,
     :created_at "2010-07-13 11:48:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; *agent* is often used with send or send-off to set up a repeated\n;; transformation of an agent's value. For example, to repeatedly \n;; increment the integer value of an agent 'myagent' until some \n;; flag value 'running' evaluates to false:\n\n;; Create an agent set to an initial value of 0:\n(def myagent (agent 0))\n\n;; Define a variable to act as a boolean flag:\n(def running true)\n\n;; Define a function to increment agent value repeatedly:\n(defn inc-while-running [agent-value]\n  (when running\n    (send-off *agent* inc-while-running)) ;sets up another call\n  (inc agent-value))\n\n;; Dereference myagent to confirm it is set to value 0:\nuser=> @myagent\n0\n\n;; Start the fun:\nuser=> (send-off myagent inc-while-running)\n#&lt;Agent@5fb9f88b: 20&gt;\n\n;; The agent has already been incremented many times (20 when I ran this)\n;; by the time the REPL prints.\n\n;; Redefine running as false to stop repeated send-off:\n(def running false)\n\n;; Dereference myagent to find its new value:\nuser=> @myagent\n848167\n\n;; Dereference again to make sure incrementation has stopped:\nuser=> @myagent\n848167"}],
   :id 5288,
   :name "*agent*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5288"},
  "clojure.contrib.find-namespaces/find-ns-decls-in-jarfile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 305,
   :name "find-ns-decls-in-jarfile",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/305"},
  "incanter.stats/correlation-linearity-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3278,
   :name "correlation-linearity-test",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3278"},
  "clojure.contrib.javadoc.browse/open-url-in-swing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 541,
   :name "open-url-in-swing",
   :ns "clojure.contrib.javadoc.browse",
   :url "http://clojuredocs.org/v/541"},
  "incanter.datasets/**datasets-base-url**"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2928,
   :name "**datasets-base-url**",
   :ns "incanter.datasets",
   :url "http://clojuredocs.org/v/2928"},
  "clojure.contrib.miglayout.internal/LayoutCallback"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 710,
   :name "LayoutCallback",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/710"},
  "clojure.contrib.pprint/pprint-indent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 960,
   :name "pprint-indent",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/960"},
  "clojure.core/bit-or"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-04-18 02:06:17.0",
     :function "bit-or",
     :version 4,
     :created_at "2010-07-28 10:21:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-or 2r1100 2r1001)\n13\n;; 13 = 2r1101\n\n;; the same in decimal\nuser=> (bit-or 12 9)\n13\n"}],
   :id 5385,
   :name "bit-or",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5385"},
  "incanter.processing/framerate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3002,
   :name "framerate",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3002"},
  "incanter.stats/skewness"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3325,
   :name "skewness",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3325"},
  "clojure.contrib.shell/*sh-env*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1209,
   :name "*sh-env*",
   :ns "clojure.contrib.shell",
   :url "http://clojuredocs.org/v/1209"},
  "net.cgrand.enlive-html/intersection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3885,
   :name "intersection",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3885"},
  "clojure.contrib.probabilities.monte-carlo/lognormal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1095,
   :name "lognormal",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1095"},
  "incanter.stats/linear-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3355,
   :name "linear-model",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3355"},
  "clojure.contrib.pprint.utilities/consume-while"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 834,
   :name "consume-while",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/834"},
  "clojure.contrib.def/defunbound"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 94,
   :name "defunbound",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/94"},
  "clojure.core/aset-int"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:24:25.0",
     :function "aset-int",
     :version 1,
     :created_at "2011-08-21 01:24:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 ints and set one of the values to 31415\n\nuser=> (def is (int-array 10))\n#'user/is\nuser=> (vec is)\n[0 0 0 0 0 0 0 0 0 0]\nuser=> (aset-int is 3 31415)\n31415\nuser=> (vec is)\n[0 0 0 31415 0 0 0 0 0 0]\nuser=>"}],
   :id 5362,
   :name "aset-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5362"},
  "incanter.processing/PATH"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3054,
   :name "PATH",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3054"},
  "clojure.zip/make-node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6109,
   :name "make-node",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6109"},
  "clojure.contrib.shell/*sh-dir*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1201,
   :name "*sh-dir*",
   :ns "clojure.contrib.shell",
   :url "http://clojuredocs.org/v/1201"},
  "incanter.processing/BASELINE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3120,
   :name "BASELINE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3120"},
  "clojure.contrib.pprint/pprint-binding-form"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1020,
   :name "pprint-binding-form",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1020"},
  "clojure.contrib.zip-filter.xml/attr="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1449,
   :name "attr=",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1449"},
  "clojure.contrib.probabilities.monte-carlo/normal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1106,
   :name "normal",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1106"},
  "net.cgrand.enlive-html/transformation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3890,
   :name "transformation",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3890"},
  "clojure.contrib.monads/m-bind"
  {:comments [],
   :see-alsos
   [{:namespace_id 61,
     :weight 1,
     :name "identity-m",
     :updated_at "2011-05-28 15:31:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/816",
     :line "286",
     :arglists_comp "",
     :url_friendly_name "identity-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "maybe-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/773",
     :line "296",
     :arglists_comp "",
     :url_friendly_name "maybe-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "sequence-m",
     :updated_at "2010-10-20 04:41:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/799",
     :line "309",
     :arglists_comp "",
     :url_friendly_name "sequence-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "set-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/787",
     :line "323",
     :arglists_comp "",
     :url_friendly_name "set-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "state-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:54:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/762",
     :line "336",
     :arglists_comp "",
     :url_friendly_name "state-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "cont-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/796",
     :line "440",
     :arglists_comp "",
     :url_friendly_name "cont-m",
     :file "clojure/contrib/monads.clj"}],
   :examples [],
   :id 814,
   :name "m-bind",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/814"},
  "clojure.contrib.repl-ln/set-repl-prompt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1138,
   :name "set-repl-prompt",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1138"},
  "incanter.core/to-levels"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2910,
   :name "to-levels",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2910"},
  "clojure.core/count"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-12-06 21:28:01.0",
     :function "count",
     :version 3,
     :created_at "2010-07-17 18:29:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (count nil)\n0\n\nuser=> (count [])\n0\n\nuser=> (count [1 2 3])\n3\n\nuser=> (count {:one 1 :two 2})\n2\n\nuser=> (count [1 \\a \"string\" [1 2] {:foo :bar}])\n5\n\nuser=> (count \"string\")\n6"}],
   :id 5439,
   :name "count",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5439"},
  "swank.util.java/member-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4136,
   :name "member-name",
   :ns "swank.util.java",
   :url "http://clojuredocs.org/v/4136"},
  "clojure.test/assert-expr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6023,
   :name "assert-expr",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6023"},
  "clojure.core/var-get"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "with-local-vars",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1843",
     :line "3354",
     :arglists_comp "[name-vals-vec & body]",
     :url_friendly_name "with-local-vars",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5828,
   :name "var-get",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5828"},
  "swank.util.class-browse/available-classes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4123,
   :name "available-classes",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4123"},
  "circumspec.colorize/color-table"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3621,
   :name "color-table",
   :ns "circumspec.colorize",
   :url "http://clojuredocs.org/v/3621"},
  "clojure.contrib.test-is/test-all-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1387,
   :name "test-all-vars",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1387"},
  "clojure.core/ints"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "int-array",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1730",
     :line "4191",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "int-array",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5565,
   :name "ints",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5565"},
  "clojure.core/proxy-mappings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5683,
   :name "proxy-mappings",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5683"},
  "lancet/taskdef"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3445,
   :name "taskdef",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3445"},
  "clojure.contrib.monadic-io-streams/with-reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 755,
   :name "with-reader",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/755"},
  "ring.middleware.params/assoc-param"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2683,
   :name "assoc-param",
   :ns "ring.middleware.params",
   :url "http://clojuredocs.org/v/2683"},
  "clojure.contrib.math/abs"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 55,
     :ns "clojure.contrib.math",
     :updated_at "2012-11-01 18:20:03.0",
     :function "abs",
     :version 1,
     :created_at "2012-11-01 18:20:03.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user=> (abs -2)\n2\n\nuser=> (abs 2)\n2\n\nuser=> (abs 0)\n0"}],
   :id 698,
   :name "abs",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/698"},
  "clojure.contrib.probabilities.finite-distributions/dist-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1091,
   :name "dist-m",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1091"},
  "incanter.processing/translate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3011,
   :name "translate",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3011"},
  "clojure.core/loop"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-22 16:42:39.0",
     :user_id 93,
     :function "loop",
     :version "1.2.0",
     :created_at "2010-07-22 16:41:56.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "\"Acts as a recur target.\"\n\nWhat's a recur target? A recurring target? A recursive target? I'm not a big fan of abbreviations or ambiguous terms.\n\nWouldn't it be awesome if a script could annotate all occurrences of glossary terms? Or automatically wrap glossary terms in anchor tags linking to their definition?"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-23 00:31:34.0",
     :user_id 46,
     :function "loop",
     :version "1.2.0",
     :created_at "2010-07-22 18:05:10.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The problem `loop` is trying to solve is that recursively calling the same function on the JVM is expensive and doesn't scale. It might work if your data structure is a thousand levels deep but it will fail badly with a depth of millions of levels.\n\nWhat is not possible on the JVM is what is called \"tail-call optimization\". `loop` is like a `while` loop in java, except that if you don't call `recur` (with the correct number of arguments) the loop will exit. In while-loop terms, `recur` avoids that a `break` statement is executed.\n\n<pre>int counter = 0;\nwhile (true) {\n   if (counter &lt; 10) {\n      // recur\n      counter = inc(counter);\n   } else {\n      break;\n   }\n}\n</pre>\n\nIn that sense `loop` is a recur target as in \"target for recursion\"."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-22 23:20:45.0",
     :user_id 93,
     :function "loop",
     :version "1.2.0",
     :created_at "2010-07-22 23:20:45.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "I wish the word recur in this document linked to the recur function. That'd be... awesome."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-23 06:36:04.0",
     :user_id 1,
     :function "loop",
     :version "1.2.0",
     :created_at "2010-07-23 06:35:42.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "It really should (and will) show up in the 'vars in' section.  \n\nThe problem is that recur is a special form, and is not parsed out correctly like other vars.  This will be fixed in the future."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "recur",
     :updated_at "2010-11-20 04:29:29.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5273",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "recur",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "trampoline",
     :updated_at "2010-12-29 18:10:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/2070",
     :line "5040",
     :arglists_comp "[f]|[f & args]",
     :url_friendly_name "trampoline",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "when",
     :updated_at "2011-07-27 13:21:24.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2050",
     :line "419",
     :arglists_comp "[test & body]",
     :url_friendly_name "when",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-14 21:02:06.0",
     :function "loop",
     :version 5,
     :created_at "2010-07-13 13:49:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";looping is recursive in Clojure, the loop construct is a hack so that something like tail-recursive-optimization works in clojure.\nuser=> (defn my-re-seq [re string]\n         \"Something like re-seq\"\n         (let [matcher (re-matcher re string)]\n\n           (loop [match (re-find matcher) ;loop starts with 2 set arguments\n                  result []]\n             (if-not match\n               result\n               (recur (re-find matcher)    ;loop with 2 new arguments\n                      (conj result match))))))\n\n#'user/my-re-seq\n\nuser=> (my-re-seq #\"\\d\" \"0123456789\")\n[\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"]\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:18:49.0",
     :function "loop",
     :version 4,
     :created_at "2010-07-19 09:15:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Read decoded MP3 data in loop (requires mp3plugin.jar on class path)\n;; http://java.sun.com/javase/technologies/desktop/media/jmf/mp3/download.html \n\n(import '(javax.sound.sampled AudioSystem AudioFormat$Encoding))\n\n(let [mp3-file (java.io.File. \"tryout.mp3\")\n      audio-in (AudioSystem/getAudioInputStream mp3-file)\n      audio-decoded-in (AudioSystem/getAudioInputStream AudioFormat$Encoding/PCM_SIGNED audio-in)\n      buffer (make-array Byte/TYPE 1024)]\n  (loop []\n    (let [size (.read audio-decoded-in buffer)]\n      (when (> size 0)\n        ;do something with PCM data\n\t(recur)))))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-18 15:59:40.0",
     :function "loop",
     :version 1,
     :created_at "2012-07-18 15:59:40.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(loop [x 10]\n  (when (> x 1)\n    (println x)\n    (recur (- x 2))))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-20 02:10:16.0",
     :function "loop",
     :version 1,
     :created_at "2012-08-20 02:10:16.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn find-needle [needle haystack]\n  ;loop binds initial values once,\n  ;then binds values from each recursion call\n  (loop [needle needle\n         maybe-here haystack\n         not-here '()]\n\n    (let [needle? (first maybe-here)]\n\n      ;test for return or recur\n      (if (or (= (str needle?) (str needle))\n              (empty? maybe-here))\n\n        ;return results\n        [needle? maybe-here not-here]\n\n        ;recur calls loop with new values\n        (recur needle\n               (rest maybe-here)\n               (concat not-here (list (first maybe-here))))))))\n\nuser=>(find-needle \"|\" \"hay|stack\")\n[\\| (\\| \\s \\t \\a \\c \\k) (\\h \\a \\y)]"}],
   :id 5595,
   :name "loop",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5595"},
  "incanter.processing/millis"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3102,
   :name "millis",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3102"},
  "clojure.contrib.datalog.database/ensure-relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 157,
   :name "ensure-relation",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/157"},
  "clojure.contrib.lazy-xml/element"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 615,
   :name "element",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/615"},
  "circumspec/watch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3591,
   :name "watch",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3591"},
  "clojure.core/*file*"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-22 16:36:57.0",
     :user_id 61,
     :function "*file*",
     :version "1.3.0",
     :created_at "2011-12-22 16:36:39.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Does this actually work? I couldn't get it to print anything but NO_SOURCE_PATH. (And no, this wasn't in the REPL.)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-02 15:24:27.0",
     :user_id 694,
     :function "*file*",
     :version "1.3.0",
     :created_at "2012-10-02 15:24:27.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "If you're having trouble getting this feature to work as advertised, check out [this StackOverflow Question](http://stackoverflow.com/questions/12692698/file-variable-not-working/12693068)."}],
   :see-alsos [],
   :examples [],
   :id 5297,
   :name "*file*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5297"},
  "clojure.contrib.test-is/run-all-tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1388,
   :name "run-all-tests",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1388"},
  "clojure.core/struct-map"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "struct",
     :updated_at "2010-12-29 18:05:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2011",
     :line "3130",
     :arglists_comp "[s & vals]",
     :url_friendly_name "struct",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 01:14:50.0",
     :function "struct-map",
     :version 3,
     :created_at "2010-09-01 21:30:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a new struct type\n(defstruct s :1 :2)\n#'user/s\n\nuser=> (type s)\nclojure.lang.PersistentStructMap$Def\n\n;; create an instance of this new struct type\n(def s1 (struct s \"one\" \"two\"))\n#'user/s1\n\nuser=> (println s1)\n{:1 \"one\", :2 \"two\"}\n\nuser=> (type s1)\nclojure.lang.PersistentStructMap\n\n;; create a new struct instance that is based on the previous struct type\n;; with the option of supplying a new key/value pairs\n(def s2 (struct-map s :3 \"three\"))\n#'user/s2\n\nuser=> (println s2)\n{:1 nil, :2 nil, :3 \"three\"}\n\nuser=> (type s2)\nclojure.lang.PersistentStructMap\n"}],
   :id 5775,
   :name "struct-map",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5775"},
  "incanter.stats/pdf-normal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2750,
   :name "pdf-normal",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2750"},
  "clj-swing.button/toggle-button"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5148,
   :name "toggle-button",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5148"},
  "incanter.stats/manhattan-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3285,
   :name "manhattan-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3285"},
  "incanter.stats/odds-ratio"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3284,
   :name "odds-ratio",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3284"},
  "incanter.processing/reverse-array"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3078,
   :name "reverse-array",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3078"},
  "clojure.contrib.with-ns/with-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1428,
   :name "with-ns",
   :ns "clojure.contrib.with-ns",
   :url "http://clojuredocs.org/v/1428"},
  "clojure.core/every?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 7,
     :name "some",
     :updated_at "2011-08-31 02:17:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1541",
     :line "2045",
     :arglists_comp "[pred coll]",
     :url_friendly_name "some",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "not-any?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1809",
     :line "2055",
     :arglists_comp "[pred coll]",
     :url_friendly_name "not-any_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:12:33.0",
     :function "every?",
     :version 3,
     :created_at "2010-07-13 19:17:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (every? even? '(2 4 6))\ntrue\nuser=> (every? even? '(1 2 3))\nfalse"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2013-01-21 05:31:35.0",
     :function "every?",
     :version 2,
     :created_at "2011-07-16 14:22:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; you can use every? with a set as the predicate to return true if \n;; every member of a collection is in the set\nuser=> (every? #{1 2} [1 2 3])\nfalse\nuser=> (every? #{1 2} [1 2])\ntrue\n\n;; or use a hash-map as the predicate with every? to return true \n;; if every member of a collection is a key within the map\nuser=> (every? {1 \"one\" 2 \"two\"} [1 2])\ntrue\nuser=> (every? {1 \"one\" 2 \"two\"} [1 2 3])\nfalse"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-26 18:25:45.0",
     :function "every?",
     :version 2,
     :created_at "2012-12-26 18:24:44.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; this is kind of weird IMO... but it works that way (the same for vectors)\nuser=> (every? true? '())\ntrue\nuser=> (every? false? '())\ntrue"}],
   :id 5495,
   :name "every?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5495"},
  "clojure.core/remove"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "filter",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1784",
     :line "2124",
     :arglists_comp "[pred coll]",
     :url_friendly_name "filter",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:13:06.0",
     :function "remove",
     :version 3,
     :created_at "2010-08-11 10:45:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (remove pos? [1 -2 2 -1 3 7 0])\n(-2 -1 0)\n\nuser=> (remove #(zero? (mod % 3)) (range 1 21))\n(1 2 4 5 7 8 10 11 13 14 16 17 19 20)"}],
   :id 5718,
   :name "remove",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5718"},
  "incanter.processing/dist"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3037,
   :name "dist",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3037"},
  "circumspec.report/result-color"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3698,
   :name "result-color",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3698"},
  "incanter.processing/EXCLUSION"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3081,
   :name "EXCLUSION",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3081"},
  "net.cgrand.enlive-html/select-nodes*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3883,
   :name "select-nodes*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3883"},
  "incanter.stats/sorensen-index"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3309,
   :name "sorensen-index",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3309"},
  "net.cgrand.enlive-html/wrap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3808,
   :name "wrap",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3808"},
  "clojure.contrib.pprint.pretty-writer/indent-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 917,
   :name "indent-t",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/917"},
  "clojure.contrib.types/deftype"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 24,
   :name "deftype",
   :ns "clojure.contrib.types",
   :url "http://clojuredocs.org/v/24"},
  "clojure.contrib.string/blank?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1337,
   :name "blank?",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1337"},
  "swank.commands.basic/sldb-continue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4106,
   :name "sldb-continue",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4106"},
  "swank.commands.contrib/swank-require"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4157,
   :name "swank-require",
   :ns "swank.commands.contrib",
   :url "http://clojuredocs.org/v/4157"},
  "clojure.core/alias"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:52:09.0",
     :function "alias",
     :version 3,
     :created_at "2010-09-07 22:57:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (require 'clojure.string)\nnil\n\nuser=> (alias 'string 'clojure.string)\nnil\n\nuser=> (string/capitalize \"hONdURas\")\n\"Honduras\""}],
   :id 5345,
   :name "alias",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5345"},
  "clojure.xml/*stack*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6086,
   :name "*stack*",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6086"},
  "clojure.contrib.io/file-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 508,
   :name "file-str",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/508"},
  "clojure.java.io/reader"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 0,
     :name "writer",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2142",
     :line "98",
     :arglists_comp "[x & opts]",
     :url_friendly_name "writer",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "input-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/2153",
     :line "115",
     :arglists_comp "[x & opts]",
     :url_friendly_name "input-stream",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "IOFactory",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2162",
     :line "63",
     :arglists_comp "",
     :url_friendly_name "iofactory",
     :file "clojure/java/io.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "slurp",
     :updated_at "2011-08-25 12:50:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1753",
     :line "5365",
     :arglists_comp "[f & opts]",
     :url_friendly_name "slurp",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 104,
     :ns "clojure.java.io",
     :updated_at "2010-11-20 16:02:09.0",
     :function "reader",
     :version 1,
     :created_at "2010-11-20 16:02:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(with-open [rdr (clojure.java.io/reader \"/tmp/foo.txt\")]\n    (reduce conj [] (line-seq rdr)))"}
    {:namespace_id 336,
     :ns "clojure.java.io",
     :updated_at "2011-12-19 09:17:22.0",
     :function "reader",
     :version 1,
     :created_at "2011-12-19 09:17:22.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (with-open [rdr (clojure.java.io/reader \"http://www.google.com\")]\n         (printf \"%s\\n\" (clojure.string/join \"\\n\" (line-seq rdr))))\n"}],
   :id 5894,
   :name "reader",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5894"},
  "clojure.contrib.probabilities.monte-carlo/sample-sum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1098,
   :name "sample-sum",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1098"},
  "clojure.contrib.seq/shuffle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1159,
   :name "shuffle",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1159"},
  "incanter.processing/text-width"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3034,
   :name "text-width",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3034"},
  "lancet/cvschangelog"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3447,
   :name "cvschangelog",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3447"},
  "clojure.core/unchecked-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5810,
   :name "unchecked-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5810"},
  "clojure.core/first"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "rest",
     :updated_at "2011-06-01 19:59:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1994",
     :line "63",
     :arglists_comp "[coll]",
     :url_friendly_name "rest",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "next",
     :updated_at "2010-11-06 03:08:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1620",
     :line "55",
     :arglists_comp "[coll]",
     :url_friendly_name "next",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nth",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/1851",
     :line "740",
     :arglists_comp "[coll index]|[coll index not-found]",
     :url_friendly_name "nth",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "second",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1545",
     :line "84",
     :arglists_comp "[x]",
     :url_friendly_name "second",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "take",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2049",
     :line "2152",
     :arglists_comp "[n coll]",
     :url_friendly_name "take",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "ffirst",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1818",
     :line "90",
     :arglists_comp "[x]",
     :url_friendly_name "ffirst",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:13:36.0",
     :function "first",
     :version 3,
     :created_at "2010-07-13 18:34:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (first '(:alpha :bravo :charlie))\n:alpha"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-28 09:18:57.0",
     :function "first",
     :version 2,
     :created_at "2011-04-24 14:25:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (first nil)\nnil\nuser=> (first [])\nnil"}],
   :id 5511,
   :name "first",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5511"},
  "leiningen.help/help-for"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3541,
   :name "help-for",
   :ns "leiningen.help",
   :url "http://clojuredocs.org/v/3541"},
  "swank.util.clojure/ns-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4008,
   :name "ns-path",
   :ns "swank.util.clojure",
   :url "http://clojuredocs.org/v/4008"},
  "circumspec.report/fail?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3694,
   :name "fail?",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3694"},
  "swank.commands.contrib.swank-fuzzy/fuzzy-completion-selected"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4171,
   :name "fuzzy-completion-selected",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4171"},
  "clojure.contrib.lazy-xml/has-pull"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 618,
   :name "has-pull",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/618"},
  "incanter.processing/text-leading"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3156,
   :name "text-leading",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3156"},
  "incanter.processing/rotate-x"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3234,
   :name "rotate-x",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3234"},
  "circumspec.watch/test-ns->source-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3773,
   :name "test-ns->source-ns",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3773"},
  "swank.core.hooks/*pre-reply-hook*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4201,
   :name "*pre-reply-hook*",
   :ns "swank.core.hooks",
   :url "http://clojuredocs.org/v/4201"},
  "incanter.optimize/gradient"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2982,
   :name "gradient",
   :ns "incanter.optimize",
   :url "http://clojuredocs.org/v/2982"},
  "circumspec.contrib-mocking/unexpected-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3646,
   :name "unexpected-args",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3646"},
  "ring.middleware.file/wrap-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2662,
   :name "wrap-file",
   :ns "ring.middleware.file",
   :url "http://clojuredocs.org/v/2662"},
  "clojure.core/find-doc"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:27:56.0",
     :function "find-doc",
     :version 5,
     :created_at "2010-09-21 04:51:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Finds everything with struct-map in the name or description. In this case, it finds\n;; two things:  clojure.core/struct-map and clojure.xml/parse.\n\nuser=> (find-doc \"struct-map\")\n-------------------------\nclojure.core/struct-map\n([s & inits])\n  Returns a new structmap instance with the keys of the...\nnil"}],
   :id 1616,
   :name "find-doc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/1616"},
  "ring.middleware.session/wrap-session"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 133,
     :ns "ring.middleware.session",
     :updated_at "2011-08-23 23:22:40.0",
     :function "wrap-session",
     :version 1,
     :created_at "2011-08-23 23:22:40.0",
     :library "ring",
     :lib_version "0.2.3",
     :library_id 4,
     :body
     "(use 'ring.middleware.session.cookie)\n\n(wrap-session {:cookie-name \"example\"\n               :store (cookie-store)})"}],
   :id 2691,
   :name "wrap-session",
   :ns "ring.middleware.session",
   :url "http://clojuredocs.org/v/2691"},
  "leiningen.core/ns->path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3516,
   :name "ns->path",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3516"},
  "incanter.internal/is-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2889,
   :name "is-matrix",
   :ns "incanter.internal",
   :url "http://clojuredocs.org/v/2889"},
  "incanter.stats/sample-binomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3368,
   :name "sample-binomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3368"},
  "leiningen.compile/get-arch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3518,
   :name "get-arch",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3518"},
  "clojure.contrib.graph/get-neighbors"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 125,
   :name "get-neighbors",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/125"},
  "clojure.java.io/input-stream"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "reader",
     :updated_at "2010-11-20 16:02:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2147",
     :line "80",
     :arglists_comp "[x & opts]",
     :url_friendly_name "reader",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "output-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2137",
     :line "132",
     :arglists_comp "[x & opts]",
     :url_friendly_name "output-stream",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "IOFactory",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2162",
     :line "63",
     :arglists_comp "",
     :url_friendly_name "iofactory",
     :file "clojure/java/io.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "with-open",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1567",
     :line "2911",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "with-open",
     :file "clojure/core.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "make-input-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/2155",
     :line nil,
     :arglists_comp "[x opts]",
     :url_friendly_name "make-input-stream",
     :file nil}],
   :examples [],
   :id 5887,
   :name "input-stream",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5887"},
  "clojure.contrib.datalog.database/merge-indexes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 183,
   :name "merge-indexes",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/183"},
  "net.licenser.sandbox.tester/whitelist"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5126,
   :name "whitelist",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5126"},
  "clojure.contrib.sql/with-query-results"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 83,
     :ns "clojure.contrib.sql",
     :updated_at "2010-11-15 15:16:59.0",
     :function "with-query-results",
     :version 1,
     :created_at "2010-11-15 15:16:59.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(with-connection db\n  (do-commands \"create table person (name varchar(255))\")\n  (insert-values :person [:name] [\"bill\"] [\"joey\"])\n\n  (with-query-results results [\"select name from person\"]\n    (doall results)))\n\n;; => ({:name \"bill\"} {:name \"joey\"})"}],
   :id 1233,
   :name "with-query-results",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1233"},
  "clojure.core/*print-level*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5306,
   :name "*print-level*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5306"},
  "ring.middleware.flash/wrap-flash"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 127,
     :ns "ring.middleware.flash",
     :updated_at "2012-05-30 00:05:35.0",
     :function "wrap-flash",
     :version 2,
     :created_at "2012-05-29 23:55:25.0",
     :library "ring",
     :lib_version "0.2.3",
     :library_id 4,
     :body
     "(use 'ring.middleware.flash\n     'ring.middleware.params\n     'ring.middleware.session\n     'ring.util.response\n     'ring.adapter.jetty)\n\n(defn save\n  [request]\n  (let [value (-> request :params :value)]\n    ;; somehow save value\n    ;; the :flash key on the response will be placed in the :session by wrap-flash\n    (assoc (redirect \"/\") :flash \"Value is saved\")))\n\n(defn home\n  [request]\n  (let [uri (-> request :uri)]\n    (if (.startsWith uri \"/save\")\n       (save request)\n       ;; before calling the home fn wrap-flash will move the :flash message from the :session to the request\n       (if-let [flash-message (-> request :flash)]\n          (response (str \"Flash message found: \" flash-message))\n          (response \"No flash message found\")))))\n\n(def app (-> home wrap-flash wrap-session wrap-params))\n\n(run-jetty app {:port 3000})\n\n;; go to http://localhost:3000 and http://localhost:3000/save"}],
   :id 2669,
   :name "wrap-flash",
   :ns "ring.middleware.flash",
   :url "http://clojuredocs.org/v/2669"},
  "clojure.contrib.classpath/classpath-directories"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 40,
   :name "classpath-directories",
   :ns "clojure.contrib.classpath",
   :url "http://clojuredocs.org/v/40"},
  "clojure.contrib.duck-streams/append-spit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 256,
   :name "append-spit",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/256"},
  "clojure.contrib.zip-filter/descendants"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1433,
   :name "descendants",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1433"},
  "incanter.core/decomp-eigenvalue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2854,
   :name "decomp-eigenvalue",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2854"},
  "clojure.contrib.test-is/flatten-map"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "flatten",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/2078",
     :line "5532",
     :arglists_comp "[x]",
     :url_friendly_name "flatten",
     :file "clojure/core.clj"}],
   :examples [],
   :id 1379,
   :name "flatten-map",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1379"},
  "clojure.contrib.io/with-out-append-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 515,
   :name "with-out-append-writer",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/515"},
  "clojure.contrib.sql/do-commands"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 83,
     :ns "clojure.contrib.sql",
     :updated_at "2011-03-03 18:37:41.0",
     :function "do-commands",
     :version 1,
     :created_at "2011-03-03 18:37:41.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(clojure.contrib.sql/with-connection conn\n  (clojure.contrib.sql/do-commands \"INSERT INTO users(id,email) VALUES (1,'bob@example.com')\"))"}],
   :id 1244,
   :name "do-commands",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1244"},
  "ring.middleware.file-info/wrap-file-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2668,
   :name "wrap-file-info",
   :ns "ring.middleware.file-info",
   :url "http://clojuredocs.org/v/2668"},
  "incanter.core/ncol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2748,
   :name "ncol",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2748"},
  "midje.unprocessed/in-any-order"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4369,
   :name "in-any-order",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4369"},
  "clojure.contrib.monads/set-val"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 798,
   :name "set-val",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/798"},
  "clj-swing.core/auto-setters"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5153,
   :name "auto-setters",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5153"},
  "circumspec.config/debug"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3627,
   :name "debug",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3627"},
  "leiningen.core/project"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3523,
   :name "project",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3523"},
  "clojure.contrib.seq-utils/rotations"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1180,
   :name "rotations",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1180"},
  "leiningen.jar/skip-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3554,
   :name "skip-file?",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3554"},
  "incanter.processing/ROUND"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3132,
   :name "ROUND",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3132"},
  "ring.middleware.cookies/wrap-cookies"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2651,
   :name "wrap-cookies",
   :ns "ring.middleware.cookies",
   :url "http://clojuredocs.org/v/2651"},
  "circumspec/testing-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3592,
   :name "testing-fn",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3592"},
  "clojure.test/*testing-vars*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6020,
   :name "*testing-vars*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6020"},
  "incanter.distributions/binomial-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5089,
   :name "binomial-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5089"},
  "clojure.core/chunk-first"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5413,
   :name "chunk-first",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5413"},
  "leiningen.classpath/classpath"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3504,
   :name "classpath",
   :ns "leiningen.classpath",
   :url "http://clojuredocs.org/v/3504"},
  "clojure.main/root-cause"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5918,
   :name "root-cause",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5918"},
  "swank.core.protocol/write-swank-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4259,
   :name "write-swank-message",
   :ns "swank.core.protocol",
   :url "http://clojuredocs.org/v/4259"},
  "clojure.contrib.base64/debug-repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3747,
   :name "debug-repl",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3747"},
  "circumspec.for-all/uppercase-ascii*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3678,
   :name "uppercase-ascii*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3678"},
  "clj-swing.text-field/*text-field-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5205,
   :name "*text-field-known-keys*",
   :ns "clj-swing.text-field",
   :url "http://clojuredocs.org/v/5205"},
  "swank.commands.basic/connection-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4074,
   :name "connection-info",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4074"},
  "circumspec.contrib-mocking/more-than"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3636,
   :name "more-than",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3636"},
  "swank.commands.contrib.swank-c-p-c/completions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4161,
   :name "completions",
   :ns "swank.commands.contrib.swank-c-p-c",
   :url "http://clojuredocs.org/v/4161"},
  "clojure.core/*allow-unresolved-vars*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5289,
   :name "*allow-unresolved-vars*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5289"},
  "clojure.core/ns-resolve"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-23 19:54:46.0",
     :user_id 106,
     :function "ns-resolve",
     :version "1.3.0",
     :created_at "2012-03-23 19:54:46.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "The appropriate value for the <code>env</code> arg is what you get from the implicit <code>&env</code> arg available to a macro."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "resolve",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1944",
     :line "3382",
     :arglists_comp "[sym]",
     :url_friendly_name "resolve",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-31 02:50:15.0",
     :function "ns-resolve",
     :version 1,
     :created_at "2012-01-31 02:50:15.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (defn f [n] (* n n n))\n#'user/f\nuser=> ((ns-resolve *ns* (symbol \"f\")) 10)\n1000"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-24 02:36:48.0",
     :function "ns-resolve",
     :version 1,
     :created_at "2012-09-24 02:36:48.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See also http://clojure.org/namespaces for information on namespaces in Clojure and how to inspect and manipulate them"}],
   :id 5639,
   :name "ns-resolve",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5639"},
  "clojure.contrib.monads/identity-m"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 61,
     :ns "clojure.contrib.monads",
     :updated_at "2011-05-28 15:31:45.0",
     :function "identity-m",
     :version 1,
     :created_at "2011-05-28 15:31:45.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(domonad identity-m\n   [a 1\n    b (inc a)\n    c (* a b)]\n    (+ a b c))"}],
   :id 816,
   :name "identity-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/816"},
  "circumspec.for-all/choose-from"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3656,
   :name "choose-from",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3656"},
  "lancet/cvs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3442,
   :name "cvs",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3442"},
  "leiningen.core/path->ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3528,
   :name "path->ns",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3528"},
  "clojure.contrib.seq/rec-cat"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1157,
   :name "rec-cat",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1157"},
  "incanter.charts/add-categories"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2770,
   :name "add-categories",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2770"},
  "clojure.contrib.sql/set-rollback-only"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1226,
   :name "set-rollback-only",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1226"},
  "circumspec.raw/dump-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3689,
   :name "dump-file",
   :ns "circumspec.raw",
   :url "http://clojuredocs.org/v/3689"},
  "clojure.contrib.agent-utils/capture-and-send"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 34,
   :name "capture-and-send",
   :ns "clojure.contrib.agent-utils",
   :url "http://clojuredocs.org/v/34"},
  "clojure.core/with-in-str"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-12 14:24:08.0",
     :function "with-in-str",
     :version 2,
     :created_at "2010-11-12 14:16:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Given you have a function that will read from *in*\n(defn prompt [question]\n  (println question)\n  (read-line))\n\nuser=> (prompt \"How old are you?\")\nHow old are you?\n34                   ; <== This is what you enter\n\"34\"                 ; <== This is returned by the function\n\n;; You can now simulate entering your age at the prompt by using with-in-str\n\nuser=> (with-in-str \"34\" (prompt \"How old are you?\"))\nHow old are you?\n\"34\"                 ; <== The function now returns immediately \n"}],
   :id 5843,
   :name "with-in-str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5843"},
  "incanter.charts/area-chart*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2764,
   :name "area-chart*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2764"},
  "clojure.core/prn-str"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "prn",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1650",
     :line "2848",
     :arglists_comp "[& more]",
     :url_friendly_name "prn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-10-13 23:30:11.0",
     :function "prn-str",
     :version 6,
     :created_at "2010-09-11 19:19:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x \"Hello!\\nMy name is George.\\n\")\n#'user/x\n\nuser=> (prn-str x)\n\"Hello!\\nMy name is George.\\n\\n\"\nnil\n"}],
   :id 5679,
   :name "prn-str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5679"},
  "swank.commands.inspector/*inspectee-content*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4211,
   :name "*inspectee-content*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4211"},
  "incanter.stats/sample-mvn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2730,
   :name "sample-mvn",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2730"},
  "fogus.me.trammel/all-numbers?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5263,
   :name "all-numbers?",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5263"},
  "clojure.contrib.datalog.literals/get-base-predicate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 218,
   :name "get-base-predicate",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/218"},
  "clojure.core/import"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-06 01:42:27.0",
     :user_id 41,
     :function "import",
     :version "1.2.0",
     :created_at "2010-12-06 01:42:27.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Good description of use/require/import here:\n\nhttp://blog.8thlight.com/articles/2010/12/6/clojure-libs-and-namespaces-require-use-import-and-ns"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "require",
     :updated_at "2011-09-02 12:18:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1928",
     :line "4809",
     :arglists_comp "[& args]",
     :url_friendly_name "require",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "use",
     :updated_at "2010-11-29 01:07:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/2057",
     :line "4871",
     :arglists_comp "[& args]",
     :url_friendly_name "use",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 7,
     :name "ns",
     :updated_at "2011-02-13 23:57:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1794",
     :line "4594",
     :arglists_comp "[name docstring? attr-map? references*]",
     :url_friendly_name "ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:54:20.0",
     :function "import",
     :version 3,
     :created_at "2010-07-13 12:25:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (import java.util.Date)\njava.util.Date\n\nuser=> (def *now* (Date.))\n#'user/*now*\n\nuser=> (str *now*)\n\"Tue Jul 13 17:53:54 IST 2010\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-02 17:43:44.0",
     :function "import",
     :version 1,
     :created_at "2011-01-02 17:43:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Multiple imports at once.\n(import '(java.util Date Calendar)\n        '(java.net URI ServerSocket)\n        java.sql.DriverManager)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-11-10 22:25:11.0",
     :function "import",
     :version 1,
     :created_at "2011-11-10 22:25:11.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; importing multiple classes in a namespace\n(ns foo.bar\n  (:import (java.util Date\n                      Calendar)\n           (java.util.logging Logger\n                              Level)))"}],
   :id 5551,
   :name "import",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5551"},
  "clojure.contrib.string/replace-re"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1334,
   :name "replace-re",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1334"},
  "clojure.core/->ArrayChunk"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5321,
   :name "->ArrayChunk",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5321"},
  "lancet/zip"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3392,
   :name "zip",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3392"},
  "clojure.zip/prev"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6113,
   :name "prev",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6113"},
  "clojure.contrib.io/*default-encoding*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 500,
   :name "*default-encoding*",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/500"},
  "incanter.processing/text-font"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3221,
   :name "text-font",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3221"},
  "clojure.core/add-classpath"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5338,
   :name "add-classpath",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5338"},
  "clojure.contrib.base64/quit-dr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3789,
   :name "quit-dr",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3789"},
  "clojure.walk/postwalk-demo"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6077,
   :name "postwalk-demo",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6077"},
  "incanter.processing/no-fill"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3146,
   :name "no-fill",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3146"},
  "clojure.contrib.sql.internal/special-counts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1249,
   :name "special-counts",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1249"},
  "swank.core/spawn-worker-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4072,
   :name "spawn-worker-thread",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4072"},
  "incanter.processing/quad"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3104,
   :name "quad",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3104"},
  "clj-swing.core/group-container-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5168,
   :name "group-container-args",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5168"},
  "incanter.processing/get-pixel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3022,
   :name "get-pixel",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3022"},
  "clojure.contrib.probabilities.finite-distributions/certainly"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1079,
   :name "certainly",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1079"},
  "swank.util.sys/user-home-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4261,
   :name "user-home-path",
   :ns "swank.util.sys",
   :url "http://clojuredocs.org/v/4261"},
  "lancet/rmic"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3427,
   :name "rmic",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3427"},
  "clojure.core/with-open"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:50:14.0",
     :function "with-open",
     :version 4,
     :created_at "2010-08-16 02:02:47.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Opens the file 'myfile.txt' and prints out the contents.  The \n;; 'with-open' ensures that the reader is closed at the end of the \n;; form.  \n;; \n;; Please note that reading a file a character at a time is not \n;; very efficient.\n\nuser=> (with-open [r (java.io.FileReader. \"myfile.txt\")] \n         (loop [c (.read r)] \n           (if (not= c -1)\n             (do \n               (print (char c)) \n               (recur (.read r))))))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-07 12:56:55.0",
     :function "with-open",
     :version 1,
     :created_at "2012-11-07 12:56:55.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn write-csv-file\n  \"Writes a csv file using a key and an s-o-s (sequence of sequences)\"\n  [out-sos out-file]\n\n  (spit out-file \"\" :append false)\n  (with-open [out-data (io/writer out-file)]\n      (csv/write-csv out-data out-sos)))\n\n"}],
   :id 5847,
   :name "with-open",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5847"},
  "circumspec.should/should"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3751,
   :name "should",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3751"},
  "incanter.processing/frame-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3097,
   :name "frame-count",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3097"},
  "clojure.core/print-str"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "println-str",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/2081",
     :line "3718",
     :arglists_comp "[& xs]",
     :url_friendly_name "println-str",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-12-06 20:46:48.0",
     :function "print-str",
     :version 9,
     :created_at "2010-09-11 19:06:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Create a string from the given items and store it in x.\nuser=> (def x (print-str 1 \"foo\" \\b \\a \\r {:a 2}))\n#'user/x\n\n;; It's a string.\nuser=> (string? x)\ntrue\n\n;; Notice that each item is separated by a space.\nuser=> x\n\"1 foo b a r {:a 2}\"\n\n"}],
   :id 5674,
   :name "print-str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5674"},
  "clojure.contrib.seq/frequencies"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1158,
   :name "frequencies",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1158"},
  "clojure.zip/next"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6110,
   :name "next",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6110"},
  "fogus.me.trammel/anything"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5265,
   :name "anything",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5265"},
  "clojure.java.io/make-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5892,
   :name "make-writer",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5892"},
  "lancet/javac"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3473,
   :name "javac",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3473"},
  "clojure.core/-cache-protocol-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5325,
   :name "-cache-protocol-fn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5325"},
  "incanter.processing/MIN_FLOAT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3225,
   :name "MIN_FLOAT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3225"},
  "clojure.core/ns"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-06 01:44:46.0",
     :user_id 41,
     :function "ns",
     :version "1.2.0",
     :created_at "2010-12-06 01:44:46.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Good description of use/require/import here:\n\nhttp://blog.8thlight.com/articles/2010/12/6/clojure-libs-and-namespaces-require-use-import-and-ns"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "use",
     :updated_at "2010-11-29 01:07:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/2057",
     :line "4871",
     :arglists_comp "[& args]",
     :url_friendly_name "use",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "require",
     :updated_at "2011-09-02 12:18:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1928",
     :line "4809",
     :arglists_comp "[& args]",
     :url_friendly_name "require",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "refer",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1963",
     :line "3257",
     :arglists_comp "[ns-sym & filters]",
     :url_friendly_name "refer",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "import",
     :updated_at "2011-01-02 17:43:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1621",
     :line "2617",
     :arglists_comp "[& import-symbols-or-lists]",
     :url_friendly_name "import",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-publics",
     :updated_at "2011-02-24 06:02:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/1561",
     :line "3232",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-publics",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "in-ns",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1965",
     :line nil,
     :arglists_comp "[name]",
     :url_friendly_name "in-ns",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "remove-ns",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1687",
     :line "3189",
     :arglists_comp "[sym]",
     :url_friendly_name "remove-ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:30:48.0",
     :function "ns",
     :version 6,
     :created_at "2010-07-13 17:58:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Generate a Java class\n(ns org.clojuredocs.test\n      (:gen-class))\n\n(defn -main [] (prn \"Hello, World!\"))\n\n\n;; After compilation:\nsh$ java -cp classes org.clojuredocs.test\nHello, World!\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:31:38.0",
     :function "ns",
     :version 4,
     :created_at "2010-09-19 19:16:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Let's create a namespace and then assign it as the current namespace\nuser=> (create-ns 'my-new-namespace)\n#&lt;Namespace my-new-namespace&gt;\n\nuser=> (ns 'my-new-namespace)\njava.lang.ClassCastException: clojure.lang.PersistentList cannot be cast to clojure.lang.Symbol (NO_SOURCE_FILE:26)\n;; oops, this is not the way to do it; if create-ns needs a symbol, ns does not\n\nuser=> (ns my-new-namespace)\nnil\n\nmy-new-namespace=>\n;; it worked as the current namespace is our newly created one\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:32:58.0",
     :function "ns",
     :version 4,
     :created_at "2010-09-20 18:15:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Generating a class so we can call Clojure from Java \n(ns com.domain.tiny\n  (:gen-class\n    :name com.domain.tiny\n    :methods [#^{:static true} [binomial [int int] double]]))\n\n(defn binomial\n  \"Calculate the binomial coefficient.\"\n  [n k]\n  (let [a (inc n)]\n    (loop [b 1\n           c 1]\n      (if (> b k)\n        c\n        (recur (inc b) (* (/ (- a b) b) c))))))\n\n(defn -binomial\n  \"A Java-callable wrapper around the 'binomial' function.\"\n  [n k]\n  (binomial n k))\n\n(defn -main []\n  (println (str \"(binomial 5 3): \" (binomial 5 3)))\n  (println (str \"(binomial 10042 111): \" (binomial 10042 111))))\n\n\n;; Calling from Java\nimport com.domain.tiny;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        System.out.println(\"(binomial 5 3): \" + tiny.binomial(5, 3));\n        System.out.println(\"(binomial 10042, 111): \" + tiny.binomial(10042, 111));\n    }\n}\n\n\n;; The result was:\n(binomial 5 3): 10.0\n(binomial 10042, 111): 4.9068389575068143E263\n\n\n;; Example was borrowed from clartaq @ Stack Overflow"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-05 16:58:15.0",
     :function "ns",
     :version 5,
     :created_at "2010-11-05 16:22:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Create a namespace named demo.namespace.\n(ns demo.namespace)\n\n;; Clojure recommends namespaces be at least \"two segments\" (ie, they should have at least one '.') otherwise it will create a class in the \"default package\", which is discouraged.\n\n;; If this declaration appears in a file named \"demo/namespace.clj\" present in your classpath, it is known as a \"lib\", \"demo/namespace.clj\" is the lib's \"root resource\". See http://clojure.org/libs\n\n;; From a clean repl you can load the lib using\nuser=>(require 'demo.namespace) \n; or\nuser=>(use 'demo.namespace)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-05 16:51:51.0",
     :function "ns",
     :version 5,
     :created_at "2010-11-05 16:42:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This example will illustrate changing between namespaces at the repl\n\n;; At the repl, the ns macro can be used to create a namespace, but it is used to change the current namespace (be careful of typos)\nuser=>(ns demo.namespace)\nnil\ndemo.namespace=> ; The prompt at the repl is now \"demo.namespace\" reflecting that the current namespace is no longer \"user\".\n\n;; Add a new function to demo.namespace\ndemo.namespace=>(defn foo [] (prn \"Hello from demo.namespace\"))\n#'demo.namespace/foo\n\n;; From within \"demo.namespace\" we can use foo without qualifying it\ndemo.namespace=>(foo)\n\"Hello from demo.namespace\"\nnil\n\n;; Switch back to the \"user\" namespace\ndemo.namespace=>(ns user)\nnil\n\n;; We can no longer use \"foo\" without qualification\nuser=> (foo)\njava.lang.Exception: Unable to resolve symbol: foo in this context (NO_SOURCE_FILE:4)\n\nuser=> (demo.namespace/foo)\n\"Hello from demo.namespace\"\nnil\n\n;; The public symbols of \"demo.namespace\" can be \"referred into\" the \"user\" namespace if desired\nuser=> (refer 'demo.namespace)\nnil\n\n;; foo is now an alias in the \"user\" namespace which refers to the \"demo.namespace/foo\" symbol\nuser=> (foo)\n\"Hello from demo.namespace\"\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-10 02:01:43.0",
     :function "ns",
     :version 1,
     :created_at "2010-11-10 02:01:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns rosettacode.24game\n  (:require [clojure.string :as str])\n  (:use clojure.test))\n\n(deftest test\n (is (= \"ABC\" (str/capitalize \"abc\")))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-13 23:57:47.0",
     :function "ns",
     :version 1,
     :created_at "2011-02-13 23:57:47.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Multiple required namespaces with aliases\n(ns demo.namespace\n  (:require [com.example.httplib :as httplib]\n            [com.example.otherlib :as otherlib]))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-11 03:48:33.0",
     :function "ns",
     :version 3,
     :created_at "2012-06-25 22:19:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; In clojure 1.4 and higher you can use the refer function from within\n;; a require which is equivalent to (:use foo only [...]) but still \n;; allows you to reference the required namespace:\n(ns my.ns.example\n    (:require [my.lib :refer [function1 function2]]))\n\n;; And :refer :all is equivalent to :use :\n(ns my.ns.example\n    (:require [my.lib :refer :all]))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-19 20:29:04.0",
     :function "ns",
     :version 1,
     :created_at "2013-01-19 20:29:04.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(ns foo.bar\n  (:refer-clojure :exclude [ancestors printf])\n  (:require [clojure.contrib sql sql.tests])\n  (:use [my.lib this that])\n  (:import [java.util Date Timer Random]\n    (java.sql Connection Statement)))"}],
   :id 5631,
   :name "ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5631"},
  "clojure.contrib.seq-utils/reductions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1178,
   :name "reductions",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1178"},
  "clj-swing.panel/scroll-panel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5224,
   :name "scroll-panel",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5224"},
  "clojure.core/ref-max-history"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ref",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1760",
     :line "1723",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "ref",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5710,
   :name "ref-max-history",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5710"},
  "clj-swing.core/<3"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5161,
   :name "<3",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5161"},
  "clojure.core/group-by"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "partition-by",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1603",
     :line "5554",
     :arglists_comp "[f coll]",
     :url_friendly_name "partition-by",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "frequencies",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1742",
     :line "5566",
     :arglists_comp "[coll]",
     :url_friendly_name "frequencies",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:28:19.0",
     :function "group-by",
     :version 3,
     :created_at "2010-07-13 21:50:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (group-by count [\"a\" \"as\" \"asd\" \"aa\" \"asdf\" \"qwer\"])\n{1 [\"a\"], 2 [\"as\" \"aa\"], 3 [\"asd\"], 4 [\"asdf\" \"qwer\"]}\n\nuser=> (group-by odd? (range 10))\n{false [0 2 4 6 8], true [1 3 5 7 9]}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-08 16:36:15.0",
     :function "group-by",
     :version 4,
     :created_at "2010-09-21 04:44:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; group by a primary key\nuser=> (group-by :user-id [{:user-id 1 :uri \"/\"} \n                           {:user-id 2 :uri \"/foo\"} \n                           {:user-id 1 :uri \"/account\"}])\n\n{1 [{:user-id 1, :uri \"/\"} {:user-id 1, :uri \"/account\"}],\n 2 [{:user-id 2, :uri \"/foo\"}]}\n"}],
   :id 5541,
   :name "group-by",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5541"},
  "clojure.core/rsubseq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "subseq",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/2102",
     :line "4026",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "subseq",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-12 01:26:02.0",
     :function "rsubseq",
     :version 1,
     :created_at "2010-10-12 01:26:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user> (rsubseq (sorted-set 1 2 3 4 5) < 3)\n(2 1)"}],
   :id 5737,
   :name "rsubseq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5737"},
  "clojure.core/keep"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "keep-indexed",
     :updated_at "2011-05-25 03:31:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1683",
     :line "5660",
     :arglists_comp "[f coll]",
     :url_friendly_name "keep-indexed",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 03:28:01.0",
     :function "keep",
     :version 4,
     :created_at "2010-07-13 18:38:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (keep even? (range 1 10))\n(false true false true false true false true false)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 13:43:16.0",
     :function "keep",
     :version 4,
     :created_at "2011-05-25 03:28:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; comparisons among keep, map and for.\n\nuser> (keep #(if (odd? %) %) (range 10))\n(1 3 5 7 9)\nuser> (map #(if (odd? %) %) (range 10))\n(nil 1 nil 3 nil 5 nil 7 nil 9)\nuser> (for [ x (range 10) :when (odd? x)] x)\n(1 3 5 7 9) \n\nuser> (keep #(if(even? %) %) (range 10))\n(0 2 4 6 8)\nuser> (map #(if (even? %) %) (range 10))\n(0 nil 2 nil 4 nil 6 nil 8 nil)\nuser> (for [ x (range 10) :when (even? x)] x)\n(0 2 4 6 8)\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 04:02:23.0",
     :function "keep",
     :version 6,
     :created_at "2011-05-25 03:28:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Sieve of Eratosthenes by using 'keep'.\n\n(defn keep-mcdr [f coll]\n  (lazy-seq\n     (when-let [x (first coll)]\n       (cons x  (keep-mcdr f (f x (rest coll)))))))\n\n(defn prime-number [n]\n  (cons 1\n\t(keep-mcdr\n\t (fn[x xs] (if (not-empty xs)\n\t\t     (keep #(if-not (zero? (rem % x)) %)\n\t\t\t   xs)))\n\t (range 2 n))))\n\nuser> (prime-number 100)\n(1 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97)\n"}],
   :id 5571,
   :name "keep",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5571"},
  "swank.util.concurrent.thread/dothread-keeping"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4049,
   :name "dothread-keeping",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4049"},
  "circumspec.colorize/colorize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3619,
   :name "colorize",
   :ns "circumspec.colorize",
   :url "http://clojuredocs.org/v/3619"},
  "clojure.contrib.seq/find-first"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1167,
   :name "find-first",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1167"},
  "clojure.contrib.test-is/are"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1395,
   :name "are",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1395"},
  "clojure.core/unchecked-multiply-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5813,
   :name "unchecked-multiply-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5813"},
  "incanter.charts/xy-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2787,
   :name "xy-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2787"},
  "swank.core/cause-restart-for"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3993,
   :name "cause-restart-for",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3993"},
  "clojure.contrib.accumulators/minimum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 20,
   :name "minimum",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/20"},
  "lancet/set-property!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3421,
   :name "set-property!",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3421"},
  "clojure.contrib.dataflow/*empty-value*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 136,
   :name "*empty-value*",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/136"},
  "circumspec.watch/watch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3767,
   :name "watch",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3767"},
  "incanter.processing/rotate-y"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3238,
   :name "rotate-y",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3238"},
  "clojure.contrib.sql.internal/find-connection*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1240,
   :name "find-connection*",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1240"},
  "incanter.processing/hint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3243,
   :name "hint",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3243"},
  "clj-swing.core/add-action-listener"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5155,
   :name "add-action-listener",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5155"},
  "clojure.pprint/get-pretty-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5935,
   :name "get-pretty-writer",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5935"},
  "clojure.core/while"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:14:09.0",
     :function "while",
     :version 3,
     :created_at "2010-07-30 20:41:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def a (atom 10))                                \n#'user/a\n\nuser=> (while (pos? @a) (do (println @a) (swap! a dec)))\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1\nnil"}],
   :id 5840,
   :name "while",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5840"},
  "clojure.contrib.def/defvar"
  {:comments
   [{:namespace_id 20,
     :ns "clojure.contrib.def",
     :updated_at "2011-11-15 02:58:41.0",
     :user_id 431,
     :function "defvar",
     :version "1.2.0",
     :created_at "2011-11-15 02:58:41.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body "In 1.3 instead of defvar use (def name doc init)\n\n"}],
   :see-alsos
   [{:namespace_id 20,
     :weight 0,
     :name "defvar-",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/25",
     :line "44",
     :arglists_comp "[name & decls]",
     :url_friendly_name "defvar-",
     :file "clojure/contrib/def.clj"}],
   :examples [],
   :id 31,
   :name "defvar",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/31"},
  "clojure.core/rand"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "rand-int",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1745",
     :line "3818",
     :arglists_comp "[n]",
     :url_friendly_name "rand-int",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "rand-nth",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/2055",
     :line "5591",
     :arglists_comp "[coll]",
     :url_friendly_name "rand-nth",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:40:10.0",
     :function "rand",
     :version 3,
     :created_at "2010-07-20 13:48:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Test `rand` never returns `n`:\nuser=> (some (partial <= 10) (take 100000 (repeatedly (fn [] (int (rand 10))))))\nnil\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 18:42:07.0",
     :function "rand",
     :version 1,
     :created_at "2010-10-05 18:42:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (rand)\n0.17469201779243182\n\nuser=> (rand 100)\n49.542391492950834"}],
   :id 5689,
   :name "rand",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5689"},
  "incanter.charts/trace-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2827,
   :name "trace-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2827"},
  "clojure.core/re-seq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "re-find",
     :updated_at "2011-08-03 05:05:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1773",
     :line "3799",
     :arglists_comp "[m]|[re s]",
     :url_friendly_name "re-find",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-groups",
     :updated_at "2011-08-03 05:30:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1679",
     :line "3762",
     :arglists_comp "[m]",
     :url_friendly_name "re-groups",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-pattern",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1496",
     :line "3745",
     :arglists_comp "[s]",
     :url_friendly_name "re-pattern",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-matcher",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1628",
     :line "3754",
     :arglists_comp "[re s]",
     :url_friendly_name "re-matcher",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-matches",
     :updated_at "2011-01-07 02:05:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1613",
     :line "3788",
     :arglists_comp "[re s]",
     :url_friendly_name "re-matches",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "split",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2471",
     :line "169",
     :arglists_comp "[s re]|[s re limit]",
     :url_friendly_name "split",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:51:18.0",
     :function "re-seq",
     :version 3,
     :created_at "2010-07-13 12:46:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (re-seq #\"\\d\" \"clojure 1.1.0\")\n(\"1\" \"1\" \"0\")\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:51:30.0",
     :function "re-seq",
     :version 3,
     :created_at "2010-07-13 15:28:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Get a sequence of words out of a string.\nuser=> (re-seq #\"\\w+\" \"mary had a little lamb\")\n(\"mary\" \"had\" \"a\" \"little\" \"lamb\")\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-16 01:40:13.0",
     :function "re-seq",
     :version 1,
     :created_at "2011-12-16 01:40:13.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Parenthesized groups in the regex cause each returned match to be a\n;; vector of matched strings.  See re-find for more examples.\nuser=> (def line \" RX pkts:18 err:5 drop:48\")\n#'user/line\n\nuser=> (re-seq #\"(\\S+):(\\d+)\" line)\n([\"pkts:18\" \"pkts\" \"18\"] [\"err:5\" \"err\" \"5\"] [\"drop:48\" \"drop\" \"48\"])\n"}],
   :id 5701,
   :name "re-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5701"},
  "clojure.contrib.fnmap.PersistentFnMap/-empty"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 323,
   :name "-empty",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/323"},
  "incanter.processing/curve"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3222,
   :name "curve",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3222"},
  "clojure.contrib.pprint.utilities/map-passing-context"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 846,
   :name "map-passing-context",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/846"},
  "clojure.core/dec'"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-22 14:33:12.0",
     :function "dec'",
     :version 1,
     :created_at "2012-04-22 14:33:12.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (dec' 0.1)\n-0.9\n\nuser=> (dec' 1)\n0\n\nuser=> (dec' 1.0)\n0.0"}],
   :id 5445,
   :name "dec'",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5445"},
  "clojure.contrib.map-utils/lazy-get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 690,
   :name "lazy-get",
   :ns "clojure.contrib.map-utils",
   :url "http://clojuredocs.org/v/690"},
  "midje.checkers/in-any-order"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4330,
   :name "in-any-order",
   :ns "midje.checkers",
   :url "http://clojuredocs.org/v/4330"},
  "incanter.stats/sample-beta"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3340,
   :name "sample-beta",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3340"},
  "clojure.contrib.pprint.pretty-writer/start-block"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 954,
   :name "start-block",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/954"},
  "clojure.contrib.monadic-io-streams/read-line"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 753,
   :name "read-line",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/753"},
  "clojure.core/rational?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:40:18.0",
     :function "rational?",
     :version 6,
     :created_at "2010-07-13 19:33:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (rational? 1)\ntrue\nuser=> (rational? 1.0)\nfalse\nuser=> (class 1.0)\njava.lang.Double\n\n;; Note that decimal? only returns true if n is a BigDecimal."}],
   :id 5694,
   :name "rational?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5694"},
  "clojure.core/bit-shift-right"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-17 00:38:17.0",
     :user_id 61,
     :function "bit-shift-right",
     :version "1.3.0",
     :created_at "2012-01-16 23:45:13.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "From the IRC channel, a way to get zero-fill bit-shift-right:\n\n<pre>06:08 &lt; mikera&gt; (defn &gt;&gt;&gt; [v bits] (bit-shift-right (bit-and 0xFFFFFFFF v) bits))</pre>\n\nThere's also an open ticket for a [built-in version](http://dev.clojure.org/jira/browse/CLJ-827)."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:30:40.0",
     :function "bit-shift-right",
     :version 4,
     :created_at "2010-07-24 20:38:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Convert number into bits:\nuser=> (defn bits [n s]\n         (take s\n               (map\n                 (fn [i] (bit-and 0x01 i))\n                 (iterate\n                   (fn [i] (bit-shift-right i 1))\n                   n))))\n#'user/bits\n\nuser=> (map (fn [n] (bits n 3)) (range 8))\n((0 0 0) (1 0 0) (0 1 0) (1 1 0) (0 0 1) (1 0 1) (0 1 1) (1 1 1))\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:14:47.0",
     :function "bit-shift-right",
     :version 4,
     :created_at "2010-07-28 10:44:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-shift-right 2r1101 0)\n13\nuser=> (bit-shift-right 2r1101 1)\n6\nuser=> (bit-shift-right 2r1101 2)\n3"}],
   :id 5388,
   :name "bit-shift-right",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5388"},
  "clojure.test/*stack-trace-depth*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6017,
   :name "*stack-trace-depth*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6017"},
  "clojure.contrib.string/partition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1338,
   :name "partition",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1338"},
  "clojure.contrib.repl-utils/add-local-javadoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 332,
   :name "add-local-javadoc",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/332"},
  "clojure.contrib.generic.math-functions/round"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 420,
   :name "round",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/420"},
  "circumspec.for-all/lowercase-ascii*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3663,
   :name "lowercase-ascii*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3663"},
  "clojure.contrib.string/capitalize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1335,
   :name "capitalize",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1335"},
  "ring.middleware.multipart-params/parse-multipart-params"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2676,
   :name "parse-multipart-params",
   :ns "ring.middleware.multipart-params",
   :url "http://clojuredocs.org/v/2676"},
  "lancet/property"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3486,
   :name "property",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3486"},
  "incanter.processing/NORMAL"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3168,
   :name "NORMAL",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3168"},
  "circumspec.report/failure-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3696,
   :name "failure-string",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3696"},
  "incanter.charts/set-title"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2786,
   :name "set-title",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2786"},
  "clojure.contrib.zip-filter/children"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1432,
   :name "children",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1432"},
  "circumspec/testing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3596,
   :name "testing",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3596"},
  "swank.commands.basic/backtrace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4077,
   :name "backtrace",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4077"},
  "clojure.contrib.string/swap-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1321,
   :name "swap-case",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1321"},
  "incanter.core/get-categories"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2867,
   :name "get-categories",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2867"},
  "incanter.core/log10"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2897,
   :name "log10",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2897"},
  "clojure.core/method-sig"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5611,
   :name "method-sig",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5611"},
  "incanter.processing/LEFT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3242,
   :name "LEFT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3242"},
  "clojure.contrib.pprint.pretty-writer/set-logical-block-callback"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 899,
   :name "set-logical-block-callback",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/899"},
  "clojure.core/true?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "false?",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1570",
     :line "431",
     :arglists_comp "[x]",
     :url_friendly_name "false_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:15:07.0",
     :function "true?",
     :version 3,
     :created_at "2010-07-13 19:41:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (true? true)\ntrue\nuser=> (true? 1)\nfalse\nuser=> (true? (= 1 1))\ntrue"}],
   :id 5797,
   :name "true?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5797"},
  "clojure.contrib.pprint.pretty-writer/end-block-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 906,
   :name "end-block-t",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/906"},
  "clojure.contrib.accumulators/empty-minimum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 21,
   :name "empty-minimum",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/21"},
  "incanter.processing/height"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3045,
   :name "height",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3045"},
  "incanter.processing/end-shape"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3090,
   :name "end-shape",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3090"},
  "clojure.pprint/with-pprint-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5946,
   :name "with-pprint-dispatch",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5946"},
  "clojure.core/str"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "pr",
     :updated_at "2011-09-07 03:48:35.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/2017",
     :line "2815",
     :arglists_comp "[]|[x]|[x & more]",
     :url_friendly_name "pr",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prn",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1650",
     :line "2848",
     :arglists_comp "[& more]",
     :url_friendly_name "prn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-28 06:55:35.0",
     :function "str",
     :version 6,
     :created_at "2010-07-15 04:00:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> \"some string\"\n\"some string\"\n\nuser=> (str)\n\"\"\nuser=> (str nil)\n\"\"\nuser=> (str 1)\n\"1\"\nuser=> (str 1 2 3)\n\"123\"\nuser=> (str 1 'symbol :keyword)\n\"1symbol:keyword\"\n\n;; A very common usage of str is to apply it to an existing collection:\nuser=> (apply str [1 2 3])\n\"123\"\n\n;; compare it with:\nuser=> (str [1 2 3])\n\"[1 2 3]\"\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-28 07:13:57.0",
     :function "str",
     :version 3,
     :created_at "2010-09-28 07:10:03.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Destructuring with a string, getting just a few characters from it\nuser=> (let [[first-char second-char] \"abcde\"] \n         (prn 'first= first-char) \n         (prn 'second= second-char))\nfirst= \\a\nsecond= \\b\nnil\n\n;; More destructuring with a string\nuser=> (let [[first-char second-char & rest-of-chars] \"abcde\"] \n         (prn 'first= first-char) \n         (prn 'second= second-char) \n         (prn 'rest= rest-of-chars))\nfirst= \\a\nsecond= \\b\nrest= (\\c \\d \\e)\nnil\n\n;; Destructuring, getting the first character of a string\n;; and then a reference to the entire string\nuser=> (let [[first-char :as all-the-string] \"abcde\"] \n         (prn 'first= first-char) \n         (prn 'all= all-the-string))\nfirst= \\a\nall= \"abcde\"\nnil"}],
   :id 5772,
   :name "str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5772"},
  "incanter.distributions/integer-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2947,
   :name "integer-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2947"},
  "midje.semi-sweet/user-file-position"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4339,
   :name "user-file-position",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4339"},
  "clojure.contrib.java-utils/write-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 531,
   :name "write-properties",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/531"},
  "clojure.contrib.error-kit/error"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 287,
   :name "error",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/287"},
  "clojure.contrib.repl-utils/apropos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 347,
   :name "apropos",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/347"},
  "incanter.processing/BLUR"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3164,
   :name "BLUR",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3164"},
  "clojure.core/primitives-classnames"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5668,
   :name "primitives-classnames",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5668"},
  "clojure.core/realized?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "promise",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1591",
     :line "5501",
     :arglists_comp "[]",
     :url_friendly_name "promise",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "delay",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1986",
     :line "619",
     :arglists_comp "[& body]",
     :url_friendly_name "delay",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-21 10:05:39.0",
     :function "realized?",
     :version 1,
     :created_at "2012-02-21 10:05:39.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Create a promise\nuser> (def p (promise))\n#'user/p ; p is our promise\n\n;; Check if was delivered/realized\nuser> (realized? p)\nfalse ; No yet\n\n;; Delivering the promise\nuser> (deliver p 42)\n#<core$promise$reify__5727@47122d: 42>\n\n;; Check again if it was delivered\nuser> (realized? p)\ntrue ; Yes!\n\n;; Deref to see what has been delivered\nuser> @p\n42\n\n;; Note that @ is shorthand for deref\nuser> (deref p)\n42"}],
   :id 5705,
   :name "realized?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5705"},
  "clojure.core/pop"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-10 10:05:52.0",
     :user_id 751,
     :function "pop",
     :version "1.3.0",
     :created_at "2012-10-10 09:04:15.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Small reminder:\n\n<br>\nDo not work for arbitrary seq but just for persistent types implementing clojure.lang.IPersistentStack (like clojure.lang.Persistent*).\n\n<br>\nExample:\n<pre>user&gt; (pop (cons 1 '()))\n; Evaluation aborted.\n</pre>\ndo not work because type is clojure.lang.Cons but\n\n<pre>user&gt; (pop (conj '() 1))\n()\n</pre>\nworks because type is clojure.lang.PersistentList."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:15:32.0",
     :function "pop",
     :version 3,
     :created_at "2010-08-20 09:19:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (peek [1 2 3])\n3\nuser=> (pop [1 2 3])\n[1 2]\nuser=> (peek '(1 2 3))\n1\nuser=> (pop '(1 2 3))\n(2 3)"}],
   :id 5660,
   :name "pop",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5660"},
  "lancet/copy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3400,
   :name "copy",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3400"},
  "clojure.contrib.pprint.utilities/prefix-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 897,
   :name "prefix-count",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/897"},
  "clojure.core/pcalls"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "pvalues",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1780",
     :line "5456",
     :arglists_comp "[& exprs]",
     :url_friendly_name "pvalues",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:16:18.0",
     :function "pcalls",
     :version 4,
     :created_at "2010-08-06 04:10:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (pcalls function-1 function-2 ...)\n\n(result1 result2 ...)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-08 21:30:04.0",
     :function "pcalls",
     :version 1,
     :created_at "2012-05-08 21:30:04.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; pcalls is implemented using Clojure futures.  See examples for 'future'\n;; for discussion of an undesirable 1-minute wait that can occur before\n;; your standalone Clojure program exits if you do not use shutdown-agents."}],
   :id 5656,
   :name "pcalls",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5656"},
  "clojure.core/meta"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "with-meta",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/1651",
     :line "186",
     :arglists_comp "[obj m]",
     :url_friendly_name "with-meta",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "*print-meta*",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/2041",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "*print-meta*",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:06:57.0",
     :function "meta",
     :version 5,
     :created_at "2010-08-02 12:24:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (meta #'first)\n{:ns #&lt;Namespace clojure.core&gt;, :name first, :file \"clojure/core.clj\", :line 39, :arglists ([coll]), :doc \"Returns the first item in the collection. Calls seq on its\\n    argument. If coll is nil, returns nil.\"}\n"}],
   :id 5610,
   :name "meta",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5610"},
  "clojure.contrib.complex-numbers/imag"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 49,
   :name "imag",
   :ns "clojure.contrib.complex-numbers",
   :url "http://clojuredocs.org/v/49"},
  "clojure.contrib.server-socket/server-def"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1190,
   :name "server-def",
   :ns "clojure.contrib.server-socket",
   :url "http://clojuredocs.org/v/1190"},
  "clojure.core/char-escape-string"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 05:07:17.0",
     :function "char-escape-string",
     :version 1,
     :created_at "2011-08-21 05:07:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; simple examples\n\nuser=> (char-escape-string \\newline)\n\"\\\\n\"\nuser=> (char-escape-string \\c) ; no escape sequence for 'c'\nnil\nuser=> (char-escape-string \\tab)\n\"\\\\t\"\nuser=> (char-escape-string \\backspace)\n\"\\\\b\"\nuser=>"}],
   :id 5405,
   :name "char-escape-string",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5405"},
  "clojure.core/methods"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 02:50:45.0",
     :user_id 41,
     :function "methods",
     :version "1.2.0",
     :created_at "2010-10-05 02:50:45.0",
     :library "Clojure Core",
     :library_id 3,
     :body "Not the most useful output format I've ever seen. :-)"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-method",
     :updated_at "2011-08-21 02:30:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1528",
     :line "1364",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "remove-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prefer-method",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1896",
     :line "1370",
     :arglists_comp "[multifn dispatch-val-x dispatch-val-y]",
     :url_friendly_name "prefer-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prefers",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1836",
     :line "1388",
     :arglists_comp "[multifn]",
     :url_friendly_name "prefers",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 02:50:06.0",
     :function "methods",
     :version 1,
     :created_at "2010-10-05 02:50:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (methods print-dup) \n  \n{nil #<core$fn__4813 clojure.core$fn__4813@1e929ba3>, java.lang.Class #<core$fn__4905 clojure.core$fn__4905@4d8ef117>, java.lang.Integer #<core$fn__4887 clojure.core$fn__4887@699dd97b>, clojure.lang.Symbol #<core$fn__4839 clojure.core$fn__4839@3b961a84>, clojure.lang.IPersistentCollection #<core$fn__4857 clojure.core$fn__4857@c7f5bf9>, java.util.Collection #<core$fn__4853 clojure.core$fn__4853@1286d597>, clojure.lang.ISeq #<core$fn__4847 clojure.core$fn__4847@7bfd25ce>, java.util.regex.Pattern #<core$fn__4916 clojure.core$fn__4916@1e646bfb>, clojure.lang.Namespace #<core$fn__4918 clojure.core$fn__4918@54d1f0ad>, clojure.lang.IPersistentList #<core$fn__4849 clojure.core$fn__4849@75f0f8ff>, clojure.lang.IPersistentMap #<core$fn__4878 clojure.core$fn__4878@44f1b25e>, clojure.lang.PersistentHashSet #<core$fn__4897 clojure.core$fn__4897@2d97d09f>, java.util.Map #<core$fn__4874 clojure.core$fn__4874@2c18b492>, clojure.lang.LazilyPersistentVector #<core$fn__4901 clojure.core$fn__4901@3403f5a0>, clojure.lang.Var #<core$fn__4843 clojure.core$fn__4843@37f808e6>, java.lang.Number #<core$fn__4824 clojure.core$fn__4824@3a252a17>, java.lang.Boolean #<core$fn__4834 clojure.core$fn__4834@4f65cbd2>, java.math.BigDecimal #<core$fn__4893 clojure.core$fn__4893@5b0010ec>, java.lang.String #<core$fn__4863 clojure.core$fn__4863@2025b64d>, java.lang.Character #<core$fn__4885 clojure.core$fn__4885@7669521>, clojure.lang.Ratio #<core$fn__4891 clojure.core$fn__4891@6feb139e>, clojure.lang.Keyword #<core$fn__4820 clojure.core$fn__4820@738bf6bf>, clojure.lang.PersistentHashMap #<core$fn__4895 clojure.core$fn__4895@3f8771dc>, clojure.lang.PersistentVector #<core$fn__4899 clojure.core$fn__4899@74914a0a>, java.lang.Double #<core$fn__4889 clojure.core$fn__4889@3b3e3940>, clojure.lang.Fn #<core$fn__4828 clojure.core$fn__4828@41d753b7>}\n"}],
   :id 5612,
   :name "methods",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5612"},
  "incanter.core/log"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2886,
   :name "log",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2886"},
  "net.licenser.sandbox/dot-maker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5114,
   :name "dot-maker",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5114"},
  "incanter.core/to-dummies"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2849,
   :name "to-dummies",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2849"},
  "swank.core/local-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4075,
   :name "local-bindings",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4075"},
  "incanter.processing/OTHER"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3042,
   :name "OTHER",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3042"},
  "clojure.contrib.accumulators/empty-product"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 32,
   :name "empty-product",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/32"},
  "clojure.core/pr-str"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "pr",
     :updated_at "2011-09-07 03:48:35.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/2017",
     :line "2815",
     :arglists_comp "[]|[x]|[x & more]",
     :url_friendly_name "pr",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "read-string",
     :updated_at "2012-08-20 22:21:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1707",
     :line "2894",
     :arglists_comp "[s]",
     :url_friendly_name "read-string",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-22 17:01:26.0",
     :function "pr-str",
     :version 6,
     :created_at "2010-09-11 19:13:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x [1 2 3 4 5])\n#'user/x\nuser=> x\n[1 2 3 4 5]\n\n\n;; Turn that data into a string...\nuser=> (pr-str x)\n\"[1 2 3 4 5]\"\n\n\n;; ...and turn that string back into data!\nuser=> (read-string (pr-str x))\n[1 2 3 4 5]\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-05 04:18:44.0",
     :function "pr-str",
     :version 1,
     :created_at "2012-09-05 04:18:44.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; you can think of pr-str as the inverse of read-string\n;; turn string into symbols\nuser=> (read-string \"(a b foo :bar)\")\n(a b foo :bar)\n\n;;turn symbols into a string\nuser=> (pr-str '(a b foo :bar))\n\"(a b foo :bar)\""}],
   :id 5665,
   :name "pr-str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5665"},
  "swank.core/doall-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3987,
   :name "doall-seq",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3987"},
  "clojure.contrib.string/replace-first-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1327,
   :name "replace-first-by",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1327"},
  "incanter.processing/DARKEST"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3169,
   :name "DARKEST",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3169"},
  "clojure.contrib.jmx/register-mbean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 555,
   :name "register-mbean",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/555"},
  "clojure.contrib.probabilities.monte-carlo/sample"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1097,
   :name "sample",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1097"},
  "clojure.contrib.set/superset?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1198,
   :name "superset?",
   :ns "clojure.contrib.set",
   :url "http://clojuredocs.org/v/1198"},
  "clojure.pprint/pprint-newline"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5940,
   :name "pprint-newline",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5940"},
  "swank.core.connection/write-to-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4203,
   :name "write-to-connection",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4203"},
  "clojure.contrib.datalog.softstrat/get-all-relations"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 158,
   :name "get-all-relations",
   :ns "clojure.contrib.datalog.softstrat",
   :url "http://clojuredocs.org/v/158"},
  "leiningen.pom/pom"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3542,
   :name "pom",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3542"},
  "incanter.stats/euclidean-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3365,
   :name "euclidean-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3365"},
  "net.cgrand.enlive-html/add-class"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 198,
     :ns "net.cgrand.enlive-html",
     :updated_at "2011-06-17 05:24:23.0",
     :function "add-class",
     :version 1,
     :created_at "2011-06-17 05:24:23.0",
     :library "enlive",
     :lib_version "1.0.0-SNAPSHOT",
     :library_id 8,
     :body "(add-class \"toggable\" \"hide\")"}],
   :id 3807,
   :name "add-class",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3807"},
  "net.cgrand.enlive-html/lefts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3802,
   :name "lefts",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3802"},
  "midje.semi-sweet/expect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4338,
   :name "expect",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4338"},
  "swank.commands.contrib.swank-c-p-c.internal/split-compound-prefix-match?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4160,
   :name "split-compound-prefix-match?",
   :ns "swank.commands.contrib.swank-c-p-c.internal",
   :url "http://clojuredocs.org/v/4160"},
  "leiningen.pom/github-urls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3570,
   :name "github-urls",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3570"},
  "clojure.contrib.jmx.Bean/-getAttribute"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 579,
   :name "-getAttribute",
   :ns "clojure.contrib.jmx.Bean",
   :url "http://clojuredocs.org/v/579"},
  "clojure.inspector/atom?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "isa?",
     :updated_at "2011-08-10 13:56:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1711",
     :line "4400",
     :arglists_comp "[child parent]|[h child parent]",
     :url_friendly_name "isa_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 101,
     :ns "clojure.inspector",
     :updated_at "2011-08-19 13:58:53.0",
     :function "atom?",
     :version 1,
     :created_at "2011-08-19 13:58:53.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; atom? returns true if the form passed does not \n;; implement IPersistentCollection. The atom referred \n;; here is not the atom used in managing mutable state  \n\nuser=> (use `[clojure.inspector :include (atom?)])\n\nuser=> (atom? 1)\ntrue\n\nuser=> (atom? \\a)\ntrue\n\nuser=> (atom? \"hello world\")\ntrue\n\nuser=> (atom? :keyword)\ntrue\n\nuser=> (atom? nil)\ntrue\n\nuser=> (atom? '())\nfalse\n\nuser=> (atom? [1, 3, 5])\nfalse\n\nuser=> (atom? #{\\a \\e \\i \\o \\u})\nfalse\n\nuser=> (atom? {:x 16 :y 25})\nfalse"}],
   :id 5863,
   :name "atom?",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5863"},
  "clojure.contrib.apply-macro/apply-macro"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 36,
   :name "apply-macro",
   :ns "clojure.contrib.apply-macro",
   :url "http://clojuredocs.org/v/36"},
  "clojure.contrib.pprint/pprint-logical-block"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1031,
   :name "pprint-logical-block",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1031"},
  "clojure.contrib.pprint/*simple-dispatch*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 982,
   :name "*simple-dispatch*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/982"},
  "lancet/targets"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3485,
   :name "targets",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3485"},
  "fogus.me.trammel/provide-contracts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5267,
   :name "provide-contracts",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5267"},
  "circumspec.watch/load-source-namespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3778,
   :name "load-source-namespace",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3778"},
  "swank.commands.inspector/*inspector-history*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4238,
   :name "*inspector-history*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4238"},
  "clojure.contrib.mock/report-problem"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5255,
   :name "report-problem",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5255"},
  "net.cgrand.enlive-html/any"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3907,
   :name "any",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3907"},
  "incanter.charts/set-background-alpha"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2806,
   :name "set-background-alpha",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2806"},
  "incanter.infix/+precedence-table+"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2959,
   :name "+precedence-table+",
   :ns "incanter.infix",
   :url "http://clojuredocs.org/v/2959"},
  "clojure.core/lazy-seq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "lazy-cat",
     :updated_at "2011-01-17 14:43:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1599",
     :line "3572",
     :arglists_comp "[& colls]",
     :url_friendly_name "lazy-cat",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 1,
     :name "realized?",
     :updated_at "2012-02-21 10:05:39.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:09:44.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5705",
     :line "6502",
     :arglists_comp "[x]",
     :url_friendly_name "realized_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "doall",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1806",
     :line "2456",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "doall",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-05 13:32:06.0",
     :function "lazy-seq",
     :version 4,
     :created_at "2010-08-09 02:29:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The following defines a lazy-seq of all positive numbers.  Note that \n;; the lazy-seq allows us to make a recursive call in a safe way because\n;; the call does not happen immediately but instead creates a closure.\n\nuser=> (defn positive-numbers \n\t([] (positive-numbers 1))\n\t([n] (cons n (lazy-seq (positive-numbers (inc n))))))\n#'user/positive-numbers\n\nuser=> (take 5 (positive-numbers))\n(1 2 3 4 5)\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-05 13:32:50.0",
     :function "lazy-seq",
     :version 5,
     :created_at "2011-11-23 23:55:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; A lazy-seq of Fibonacci numbers (fn = fn-1 + fn-2)\n;; The producer function takes exactly two parameters\n;; (because we need the last 2 elements to produce a new one)\nuser=> (defn fib [a b] (cons a (lazy-seq (fib b (+ b a)))))\n\nuser=> (take 5 (fib 1 1))\n(1 1 2 3 5)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-26 15:53:44.0",
     :function "lazy-seq",
     :version 1,
     :created_at "2012-02-26 15:53:44.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; It might be easier to think about the producer function as a function\n;; that, given element n, produces element n+1 via a recursive call to \n;; itself, wrapped with lazy-seq to delay its execution\n;; We might also provide no-argument version of the function that calls \n;; itself for the first element(s) of the sequence being generated.\n;; => variant of fibonaci with a no-arg version and using cons first:\n(defn sum-last-2 \n   ([] (sum-last-2 1 2)) \n   ([n m] (cons n (lazy-seq (sum-last-2 m (+ n m))))))\n\nuser=> (take 6 (sum-last-2))\n(1 2 3 5 8 13)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-18 15:52:14.0",
     :function "lazy-seq",
     :version 2,
     :created_at "2012-12-07 13:45:31.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; An example combining lazy sequences with higher order functions\n;; Generate prime numbers using trial division.\n;; Note that the starting set of sieved numbers should be\n;; the set of integers starting with 2 i.e., (iterate inc 2) \n(defn sieve [s]\n  (cons (first s)\n        (lazy-seq (sieve (filter #(not= 0 (mod % (first s)))\n                                 (rest s))))))\n\nuser=> (take 20 (sieve (iterate inc 2)))\n(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71)\n"}],
   :id 5579,
   :name "lazy-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5579"},
  "incanter.processing/no-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3174,
   :name "no-loop",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3174"},
  "clojure.core/destructure"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5467,
   :name "destructure",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5467"},
  "clojure.contrib.monads/state-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 818,
   :name "state-t",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/818"},
  "clojure.contrib.core/.?."
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 88,
   :name ".?.",
   :ns "clojure.contrib.core",
   :url "http://clojuredocs.org/v/88"},
  "clojure.contrib.http.agent/done?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 457,
   :name "done?",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/457"},
  "net.cgrand.enlive-html/zip-select-fragments*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3854,
   :name "zip-select-fragments*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3854"},
  "clojure.contrib.duck-streams/pwd"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 268,
   :name "pwd",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/268"},
  "clojure.contrib.pprint/set-pprint-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1033,
   :name "set-pprint-dispatch",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1033"},
  "leiningen.compile/find-native-lib-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3508,
   :name "find-native-lib-path",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3508"},
  "swank.core/make-restart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4069,
   :name "make-restart",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4069"},
  "clojure.core/extends?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "defprotocol",
     :updated_at "2010-11-15 06:13:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2062",
     :line "576",
     :arglists_comp "[name & opts+sigs]",
     :url_friendly_name "defprotocol",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-15 22:33:12.0",
     :function "extends?",
     :version 1,
     :created_at "2012-05-15 22:33:12.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (defprotocol Area (get-area [this]))\nArea\n\nuser=> (defrecord Rectangle [width height]\n                  Area\n                  (get-area [this]\n                    (* width height)))\nuser.Rectangle\n\n(extends? Area Rectangle)\ntrue\n"}],
   :id 5500,
   :name "extends?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5500"},
  "clojure.core/await-for"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "await",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1943",
     :line "2471",
     :arglists_comp "[& agents]",
     :url_friendly_name "await",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5372,
   :name "await-for",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5372"},
  "clj-swing.document/plain-str-ref-document"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5178,
   :name "plain-str-ref-document",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5178"},
  "leiningen.jar/copy-to-jar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3551,
   :name "copy-to-jar",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3551"},
  "clojure.contrib.stream-utils/stream-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1305,
   :name "stream-m",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1305"},
  "clojure.core/reduce"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-10 13:45:10.0",
     :user_id 28,
     :function "reduce",
     :version "1.2.0",
     :created_at "2010-07-10 13:45:10.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "clojure.core/reduce seems to be a special case of a function that's defined twice in core.clj, and the first definition (at the line cited above: 773) is just a temporary definition; the real definition is later at line 5323, which contains the docstring."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "reductions",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1811",
     :line "5576",
     :arglists_comp "[f coll]|[f init coll]",
     :url_friendly_name "reductions",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 6,
     :name "apply",
     :updated_at "2011-07-16 14:07:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1987",
     :line "535",
     :arglists_comp "[f args* argseq]",
     :url_friendly_name "apply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "frequencies",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1742",
     :line "5566",
     :arglists_comp "[coll]",
     :url_friendly_name "frequencies",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:16:52.0",
     :function "reduce",
     :version 3,
     :created_at "2010-07-03 12:37:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (reduce + [1 2 3 4 5])\n15\nuser=> (reduce + [])\n0\nuser=> (reduce + 1 [])\n1\nuser=> (reduce + 1 [2 3])\n6"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-15 02:29:07.0",
     :function "reduce",
     :version 2,
     :created_at "2010-07-08 16:42:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";converting a vector to a set\nuser=> (reduce conj #{} [:a :b :c])\n#{:a :c :b}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-31 16:05:32.0",
     :function "reduce",
     :version 6,
     :created_at "2010-07-13 15:33:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Create a word frequency map out of a large string s.\n\n;; `s` is a long string containing a lot of words :)\n(reduce #(assoc %1 %2 (inc (%1 %2 0)))\n        {}\n        (re-seq #\"\\w+\" s))\n\n; (This can also be done using the `frequencies` function.)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:39:40.0",
     :function "reduce",
     :version 7,
     :created_at "2010-07-13 17:19:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Calculate primes until 1000\n\nuser=> (reduce\n         (fn [primes number]\n           (if (some zero? (map (partial mod number) primes))\n             primes\n             (conj primes number)))\n         [2]\n         (take 1000 (iterate inc 3)))\n\n[2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:39:52.0",
     :function "reduce",
     :version 3,
     :created_at "2010-07-14 20:12:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Add one sequence to another:\nuser=> (reduce conj [1 2 3] [4 5 6])\n[1 2 3 4 5 6]\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-02 23:02:01.0",
     :function "reduce",
     :version 2,
     :created_at "2012-01-02 22:51:30.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Combine a set of collections into a single collection\nuser=> (reduce into [[1 2 3] [:a :b :c] '([4 5] 6)])\n[1 2 3 :a :b :c [4 5] 6]"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 13:02:08.0",
     :function "reduce",
     :version 1,
     :created_at "2012-04-12 13:02:08.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn key-pres?\n    \"This function accepts a value (cmp-val) and a vector of vectors\n    (parsed output from clojure-csv) and returns the match value\n    back if found and nil if not found. \n\n    Using reduce, the function searches every vector row to see \n    if cmp-val is at the col-idx location in the vector.\"\n\n    [cmp-val cmp-idx csv-data]\n    (reduce\n        (fn [ret-rc csv-row]\n            (if (= cmp-val (nth csv-row col-idx nil))\n                    (conj ret-rc cmp-val)))\n        [] \n        csv-data))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 13:10:50.0",
     :function "reduce",
     :version 2,
     :created_at "2012-04-12 13:07:01.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn reduce-csv-row\n    \"Accepts a csv-row (a vector) a list of columns to extract, \n     and reduces (and returns) a csv-row to a subset based on \n     selection using the values in col-nums (a vector of integer \n     vector positions.)\"\n\n    [csv-row col-nums]\n\n    (reduce\n        (fn [out-csv-row col-num]\n            ; Don't consider short vectors containing junk.\n            (if-not (<= (count csv-row) 1)\n                (conj out-csv-row (nth csv-row col-num nil))))\n        []\n        col-nums))\n\n"}],
   :id 5706,
   :name "reduce",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5706"},
  "incanter.processing/rotate-z"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3143,
   :name "rotate-z",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3143"},
  "clojure.set/rename-keys"
  {:comments [],
   :see-alsos
   [{:namespace_id 111,
     :weight 1,
     :name "rename",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2461",
     :line "89",
     :arglists_comp "[xrel kmap]",
     :url_friendly_name "rename",
     :file "clojure/set.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2012-10-15 13:18:44.0",
     :function "rename-keys",
     :version 4,
     :created_at "2010-07-10 22:00:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (rename-keys {:a 1, :b 2} {:a :new-a, :b :new-b})\n{:new-a 1, :new-b 2}\n\n\n;; The behavior when the second map contains a key not in the first is interesting.\n;; I suspect you shouldn't depend on it. (Clojure 1.1 - no longer happens in 1.2.1)\n\nuser=> (rename-keys {:a 1} {:b :new-b})\n{ :a 1, :new-b nil}\n"}
    {:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2011-05-13 17:34:28.0",
     :function "rename-keys",
     :version 4,
     :created_at "2011-05-12 21:52:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; You need to be careful about key collisions.  You probably shouldn't \n;; depend on the exact behavior.\nuser=> (rename-keys {:a 1 :b 2} {:a :b})\n{:b 1}\n\nuser=> (rename-keys  {:a 1 :b 2}  {:a :b :b :a})\n{:a 1}\n\n;; You can work around key collisions by using an array-map to control\n;; the order of the renamings.\nuser=> (rename-keys  {:a 1 :b 2 :c 3}  (array-map :a :tmp :b :a :tmp :b))\n{:b 1, :a 2, :c 3}\n"}],
   :id 5986,
   :name "rename-keys",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5986"},
  "net.cgrand.enlive-html/annotate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3803,
   :name "annotate",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3803"},
  "incanter.charts/qq-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2829,
   :name "qq-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2829"},
  "clojure.core/line-seq"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:36:10.0",
     :function "line-seq",
     :version 5,
     :created_at "2010-07-23 22:12:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Count lines of a file (loses head):\nuser=> (with-open [rdr (clojure.java.io/reader \"/etc/passwd\")]\n         (count (line-seq rdr)))\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-04-03 16:40:56.0",
     :function "line-seq",
     :version 1,
     :created_at "2011-04-03 16:40:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(import '(java.io BufferedReader StringReader))\n\n;; line terminators are stripped\nuser=> (line-seq (BufferedReader. (StringReader. \"1\\n2\\n\\n3\")))\n(\"1\" \"2\" \"\" \"3\")\n\n;; empty string gives nil\nuser=> (line-seq (BufferedReader. (StringReader. \"\")))\nnil\n"}],
   :id 5582,
   :name "line-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5582"},
  "clojure.core/pvalues"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "pmap",
     :updated_at "2011-08-13 09:51:59.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1952",
     :line "5426",
     :arglists_comp "[f coll]|[f coll & colls]",
     :url_friendly_name "pmap",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:25:25.0",
     :function "pvalues",
     :version 3,
     :created_at "2010-07-28 06:04:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; expressions are calculated in parallel\n\nuser=> (pvalues (expensive-calc-1) (expensive-calc-2))\n(2330 122)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-08 21:30:20.0",
     :function "pvalues",
     :version 1,
     :created_at "2012-05-08 21:30:20.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; pvaules is implemented using Clojure futures.  See examples for 'future'\n;; for discussion of an undesirable 1-minute wait that can occur before\n;; your standalone Clojure program exits if you do not use shutdown-agents."}],
   :id 5687,
   :name "pvalues",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5687"},
  "clojure.core/dosync"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "sync",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1574",
     :line "1906",
     :arglists_comp "[flags-ignored-for-now & body]",
     :url_friendly_name "sync",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ref",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1760",
     :line "1723",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "ref",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "locking",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1971",
     :line "1254",
     :arglists_comp "[x & body]",
     :url_friendly_name "locking",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:22:30.0",
     :function "dosync",
     :version 4,
     :created_at "2010-07-17 08:30:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Keep dosync body free of side-effects:\n(defn my-thread-unsafe-fn [important-ref]\n    (let [start-work (ref false)]\n       (dosync\n           (when (not @important-ref)\n                ;\"If a conflict occurs between 2 transactions \n                ;trying to modify the same reference, \n                ;one of them will be retried.\"\n                ;http://clojure.org/concurrent_programming\n                (ref-set important-ref true)\n                (ref-set start-work true)))\n        (when @start-work \n             ;launch side-effects here\n            )))\n"}],
   :id 5477,
   :name "dosync",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5477"},
  "swank.commands.basic/frame-source-location-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4048,
   :name "frame-source-location-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4048"},
  "clojure.contrib.gen-html-docs/generate-toggle-namespace-script"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 336,
   :name "generate-toggle-namespace-script",
   :ns "clojure.contrib.gen-html-docs",
   :url "http://clojuredocs.org/v/336"},
  "clojure.core/remove-watch"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "add-watch",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1539",
     :line "1613",
     :arglists_comp "[reference key fn]",
     :url_friendly_name "add-watch",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5722,
   :name "remove-watch",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5722"},
  "net.cgrand.xml/comment?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3951,
   :name "comment?",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3951"},
  "clojure.core/doto"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 17:37:14.0",
     :function "doto",
     :version 1,
     :created_at "2010-12-29 17:37:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Note that even though println returns nil, doto still returns the date object\nuser> (doto (java.util.HashMap.)\n            (.put \"a\" 1)\n            (.put \"b\" 2)\n            (println :printed))\n#<HashMap {b=2, a=1}> :printed\n#<HashMap {b=2, a=1}>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 15:26:59.0",
     :function "doto",
     :version 2,
     :created_at "2011-08-21 15:26:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; quick demonstration of using a Collections function on the resulting ArrayList\n\nuser=> (def al (doto (java.util.ArrayList.) (.add 11) (.add 3)(.add 7)))\n#'user/al\nuser=> al\n#<ArrayList [11, 3, 7]>\nuser=> (java.util.Collections/sort al)\nnil\nuser=> al\n#<ArrayList [3, 7, 11]>\nuser=>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-30 12:33:02.0",
     :function "doto",
     :version 2,
     :created_at "2012-06-15 10:58:33.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; careful when calling 'dotimes' from within a 'doto' statement\r\nuser=> (doto (java.util.ArrayList.)\r\n             (.add -2)\r\n             (.add -1)\r\n             (dotimes [i 3] (.add i)))\r\njava.lang.IllegalArgumentException: dotimes requires a vector for its binding (NO_SOURCE_FILE:1)\r\n; what has happened is that (java.util.ArrayList.) has secretly become the first argument to 'dotimes' and thus the exception informs us that it can't find the binding vector required for 'dotimes' to expand. You can cure this behaviour by simply using 'do' instead of 'doto' or by wrapping the call to 'dotimes' in a function. e.g:\r\n\r\n;using 'let' with implicit 'do' instead of 'doto'\r\nuser=> (let [al (java.util.ArrayList.)]\r\n         (.add al -2)\r\n         (.add al -1)\r\n         (dotimes [i 3] (.add al i))\r\n         al);return the ArrayList\r\n#<ArrayList [-2, -1, 0, 1, 2]>  ;exactly what we intended\r\n\r\n;wrapping 'dotimes' in a function literal\r\nuser=>(doto (java.util.ArrayList.)\r\n            (.add -2)\r\n            (.add -1)\r\n            (#(dotimes [i 3] (.add % i))))\r\n#<ArrayList [-2, -1, 0, 1, 2]>  ;exactly what we intended again\r\n"}],
   :id 5479,
   :name "doto",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5479"},
  "clojure.contrib.mmap/buffer-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 721,
   :name "buffer-stream",
   :ns "clojure.contrib.mmap",
   :url "http://clojuredocs.org/v/721"},
  "clojure.java.shell/*sh-env*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5906,
   :name "*sh-env*",
   :ns "clojure.java.shell",
   :url "http://clojuredocs.org/v/5906"},
  "clojure.stacktrace/print-trace-element"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5995,
   :name "print-trace-element",
   :ns "clojure.stacktrace",
   :url "http://clojuredocs.org/v/5995"},
  "clojure.contrib.datalog.literals/literal-appropriate?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 210,
   :name "literal-appropriate?",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/210"},
  "clojure.contrib.pprint.utilities/prerr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 843,
   :name "prerr",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/843"},
  "incanter.processing/OVERLAY"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3163,
   :name "OVERLAY",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3163"},
  "incanter.stats/sample-gamma"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2734,
   :name "sample-gamma",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2734"},
  "clojure.core/namespace-munge"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5619,
   :name "namespace-munge",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5619"},
  "clojure.contrib.accumulators/product"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 30,
   :name "product",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/30"},
  "clojure.contrib.combinatorics/lex-permutations"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2011-01-09 23:15:41.0",
     :function "lex-permutations",
     :version 1,
     :created_at "2011-01-09 23:15:41.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "Clojure=> (lex-permutations [1 2 3])\n([1 2 3] [1 3 2] [2 1 3] [2 3 1] [3 1 2] [3 2 1])\nClojure=> (lex-permutations [1 1 2])\n([1 1 2] [1 2 1] [2 1 1])\n"}],
   :id 5246,
   :name "lex-permutations",
   :ns "clojure.contrib.combinatorics",
   :url "http://clojuredocs.org/v/5246"},
  "leiningen.pom/make-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3546,
   :name "make-model",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3546"},
  "clojure.java.shell/*sh-dir*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5905,
   :name "*sh-dir*",
   :ns "clojure.java.shell",
   :url "http://clojuredocs.org/v/5905"},
  "incanter.charts/add-polygon"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2809,
   :name "add-polygon",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2809"},
  "clj-ssh.ssh/with-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1467,
   :name "with-connection",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1467"},
  "clojure.contrib.zip-filter/rightmost?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1439,
   :name "rightmost?",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1439"},
  "clojure.core/split-at"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "split-with",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1614",
     :line "2224",
     :arglists_comp "[pred coll]",
     :url_friendly_name "split-with",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "split",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2471",
     :line "169",
     :arglists_comp "[s re]|[s re limit]",
     :url_friendly_name "split",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:17:14.0",
     :function "split-at",
     :version 3,
     :created_at "2010-08-11 00:40:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (split-at 2 [1 2 3 4 5])\n[(1 2) (3 4 5)]"}],
   :id 5770,
   :name "split-at",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5770"},
  "clojure.contrib.pprint/*symbol-map*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 915,
   :name "*symbol-map*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/915"},
  "incanter.processing/point"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3038,
   :name "point",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3038"},
  "clojure.contrib.classpath/classpath"
  {:comments [],
   :see-alsos
   [{:namespace_id 5,
     :weight 1,
     :name "classpath",
     :updated_at "2012-05-14 23:52:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/42",
     :line "23",
     :arglists_comp "[]",
     :url_friendly_name "classpath",
     :file "clojure/contrib/classpath.clj"}
    {:namespace_id 5,
     :weight 0,
     :name "classpath-jarfiles",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/41",
     :line "35",
     :arglists_comp "[]",
     :url_friendly_name "classpath-jarfiles",
     :file "clojure/contrib/classpath.clj"}
    {:namespace_id 5,
     :weight 0,
     :name "classpath-directories",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/40",
     :line "30",
     :arglists_comp "[]",
     :url_friendly_name "classpath-directories",
     :file "clojure/contrib/classpath.clj"}],
   :examples
   [{:namespace_id 5,
     :ns "clojure.contrib.classpath",
     :updated_at "2012-05-14 23:52:05.0",
     :function "classpath",
     :version 1,
     :created_at "2012-05-14 23:52:05.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; assuming that the clojure.contrib/java.classpath .jar\n;; is in your classpath (https://github.com/clojure/java.classpath/)\n\nuser=> (require '[clojure.java.classpath :as cp])\nnil\nuser=> (cp/classpath)\n(#<File .> #<File /Users/klauer/.lein/self-installs/leiningen-2.0.0-preview3-standalone.jar>)\nuser=> "}],
   :id 42,
   :name "classpath",
   :ns "clojure.contrib.classpath",
   :url "http://clojuredocs.org/v/42"},
  "midje.unprocessed/expect*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4349,
   :name "expect*",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4349"},
  "net.cgrand.enlive-html/transform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3902,
   :name "transform",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3902"},
  "clojure.contrib.types/constructor-form"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1421,
   :name "constructor-form",
   :ns "clojure.contrib.types",
   :url "http://clojuredocs.org/v/1421"},
  "clojure.core/load"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "load-file",
     :updated_at "2011-08-21 16:43:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1984",
     :line nil,
     :arglists_comp "[name]",
     :url_friendly_name "load-file",
     :file nil}
    {:namespace_id 99,
     :weight 0,
     :name "*read-eval*",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1648",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "*read-eval*",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-12 20:42:42.0",
     :function "load",
     :version 2,
     :created_at "2011-06-12 20:39:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; file located at src/address_book/core.clj\n\n(load \"address_book/core\")"}],
   :id 5586,
   :name "load",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5586"},
  "clojure.core/ns-imports"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ns-map",
     :updated_at "2010-10-25 23:35:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1997",
     :line "3216",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 23:34:44.0",
     :function "ns-imports",
     :version 1,
     :created_at "2010-10-25 23:34:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (ns-imports 'clojure.core)\n{ClassVisitor clojure.asm.ClassVisitor, ProcessBuilder java.lang.ProcessBuilder, Enum java.lang.Enum, SuppressWarnings java.lang.SuppressWarnings, Throwable java.lang.Throwable, InterruptedException ...chop...}"}],
   :id 5633,
   :name "ns-imports",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5633"},
  "clojure.contrib.datalog.literals/display-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 208,
   :name "display-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/208"},
  "clojure.contrib.jmx/with-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 561,
   :name "with-connection",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/561"},
  "clojure.contrib.datalog.literals/negative-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 217,
   :name "negative-vars",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/217"},
  "incanter.core/$"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2779,
   :name "$",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2779"},
  "net.licenser.sandbox.safe-fns/safe-functions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5137,
   :name "safe-functions",
   :ns "net.licenser.sandbox.safe-fns",
   :url "http://clojuredocs.org/v/5137"},
  "clojure.contrib.set/proper-subset?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1199,
   :name "proper-subset?",
   :ns "clojure.contrib.set",
   :url "http://clojuredocs.org/v/1199"},
  "circumspec.contrib-mocking/validate-counts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3644,
   :name "validate-counts",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3644"},
  "circumspec.utils/pop-optional-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3748,
   :name "pop-optional-args",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3748"},
  "clojure.contrib.base64/inc-counter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3795,
   :name "inc-counter",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3795"},
  "incanter.processing/GREEN_MASK"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3027,
   :name "GREEN_MASK",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3027"},
  "incanter.stats/auto-correlation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5091,
   :name "auto-correlation",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/5091"},
  "clojure.core/deref"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "atom",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/2028",
     :line "1767",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "atom",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ref",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1760",
     :line "1723",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "ref",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:17:45.0",
     :function "deref",
     :version 3,
     :created_at "2010-07-30 20:47:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def a (atom 0))\n#'user/a\nuser=> @a\n0\nuser=> (deref a)\n0\n\nuser=> (def b (ref 1))\n#'user/b\nuser=> @b\n1\nuser=> (deref b)\n1\n\nuser=> (def c (agent 2))\n#'user/c\nuser=> @c\n2\nuser=> (deref c)\n2\n\nuser=> (def d (future 3))\n#'user/d\nuser=> @d\n3\nuser=> (deref d)\n3"}],
   :id 5464,
   :name "deref",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5464"},
  "clojure.contrib.logging/log-uncapture!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 637,
   :name "log-uncapture!",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/637"},
  "clojure.walk/postwalk-replace"
  {:comments [],
   :see-alsos
   [{:namespace_id 118,
     :weight 1,
     :name "prewalk-replace",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/2561",
     :line "111",
     :arglists_comp "[smap form]",
     :url_friendly_name "prewalk-replace",
     :file "clojure/walk.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "replace",
     :updated_at "2011-05-10 18:46:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1831",
     :line "3979",
     :arglists_comp "[smap coll]",
     :url_friendly_name "replace",
     :file "clojure/core.clj"}],
   :examples [],
   :id 6078,
   :name "postwalk-replace",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6078"},
  "incanter.processing/triangle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3142,
   :name "triangle",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3142"},
  "clojure.contrib.monads/m-when-not"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 771,
   :name "m-when-not",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/771"},
  "swank.core.server/slime-secret-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4276,
   :name "slime-secret-path",
   :ns "swank.core.server",
   :url "http://clojuredocs.org/v/4276"},
  "clojure.contrib.generic.comparison/<"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 400,
   :name "<",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/400"},
  "lancet/unjar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3449,
   :name "unjar",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3449"},
  "clojure.test/run-tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6037,
   :name "run-tests",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6037"},
  "ring.middleware.stacktrace/wrap-stacktrace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2704,
   :name "wrap-stacktrace",
   :ns "ring.middleware.stacktrace",
   :url "http://clojuredocs.org/v/2704"},
  "clojure.contrib.pprint/write"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 596,
   :name "write",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/596"},
  "incanter.processing/mouse-x"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3237,
   :name "mouse-x",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3237"},
  "clojure.core/complement"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "not",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/2092",
     :line "443",
     :arglists_comp "[x]",
     :url_friendly_name "not",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:24:18.0",
     :function "complement",
     :version 5,
     :created_at "2010-07-28 06:37:53.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; a simple not-empty? predicate\nuser=> (def not-empty? (complement empty?))\n#'user/not-empty?\nuser=> (not-empty? [])\nfalse\nuser=> (not-empty? [1 2])\ntrue\n\n\n;; a slightly more complex example\n;; this function takes two arguments, and sometimes returns nil\n\nuser=> (defn contains-char? [the-string, the-char]\n         (some #(= the-char %) the-string))\n#'user/contains-char?\n\nuser=> (contains-char? \"abc\" \\b)\ntrue\nuser=> (contains-char? \"abc\" \\j)\nnil\n\n;; define the complement, to check if a char is absent\nuser=> (def does-not-contain-char? (complement contains-char?))\n#'user/does-not-contain-char?\n\n;; our complement does exactly what we expect\nuser=> (does-not-contain-char? \"abc\" \\b)\nfalse\nuser=> (does-not-contain-char? \"abc\" \\j)\ntrue\n"}],
   :id 5429,
   :name "complement",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5429"},
  "clojure.core/sorted-set-by"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "sorted-set",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2099",
     :line "350",
     :arglists_comp "[& keys]",
     :url_friendly_name "sorted-set",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-map-by",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1783",
     :line "343",
     :arglists_comp "[comparator & keyvals]",
     :url_friendly_name "sorted-map-by",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "compare",
     :updated_at "2011-08-17 00:13:50.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/1932",
     :line "682",
     :arglists_comp "[x y]",
     :url_friendly_name "compare",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-13 00:44:07.0",
     :function "sorted-set-by",
     :version 1,
     :created_at "2010-10-13 00:44:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user> (sorted-set-by > 3 5 8 2 1)\n#{8 5 3 2 1}"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-20 17:46:37.0",
     :function "sorted-set-by",
     :version 1,
     :created_at "2012-11-20 17:46:37.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Be cautious about comparison functions that only compare part of\n;; the objects:\nuser=> (defn second-< [x y]\n         (< (second x) (second y)))\nuser=> (sorted-set-by second-< [:a 1] [:b 1] [:c 1])\n#{[:a 1]}\n\n;; Where did the other elements go?\n\n;; Replacing < with <= might look like a fix, but doesn't work,\n;; either:\nuser=> (defn second-<= [x y]\n         (<= (second x) (second y)))\nuser=> (def s2 (sorted-set-by second-<= [:a 1] [:b 1] [:c 1]))\n#'user/s2\nuser=> s2\n#{[:c 1] [:b 1] [:a 1]}\n;; So far, so good, but set membership tests can't find the elements.\nuser=> (contains? s2 [:b 1])\nfalse\nuser=> (s2 [:c 1])\nnil\n\n;; Here is one way to write a good comparison function.  When the two\n;; objects are equal in the parts we care about, use the tie-breaker\n;; 'compare' on the whole values to give them a consistent order that\n;; is only equal if the entire values are equal.\nuser=> (defn second-<-with-tie-break [x y]\n         (let [c (compare (second x) (second y))]\n           (if (not= c 0)\n             c\n             ;; Otherwise we don't care as long as ties are broken\n             ;; consistently.\n             (compare x y))))\nuser=> (def s3 (sorted-set-by second-<-with-tie-break [:a 1] [:b 1] [:c 1]))\n#'user/s3\nuser=> s3\n#{[:a 1] [:b 1] [:c 1]}\nuser=> (contains? s3 [:b 1])\ntrue\nuser=> (s3 [:c 1])\n[:c 1]\n;; All good now!"}],
   :id 5766,
   :name "sorted-set-by",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5766"},
  "clojure.core/assert"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:15:50.0",
     :function "assert",
     :version 3,
     :created_at "2010-07-30 20:45:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (assert true)\nnil\n\nuser=> (assert false)\njava.lang.AssertionError: Assert failed: false (NO_SOURCE_FILE:0)\n\nuser=> (assert nil)\njava.lang.AssertionError: Assert failed: nil (NO_SOURCE_FILE:0)\n\nuser=> (assert 0)\nnil\n\nuser=> (assert [1 2 3])\nnil\n\nuser=> (assert \"foo\")\nnil"}],
   :id 5365,
   :name "assert",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5365"},
  "clojure.contrib.datalog.literals/negated-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 236,
   :name "negated-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/236"},
  "clojure.core/min"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:18:09.0",
     :function "min",
     :version 3,
     :created_at "2010-07-17 18:46:59.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (min 1 2 3 4 5)  \n1\nuser=> (min 5 4 3 2 1)\n1\nuser=> (min 100)\n100"}],
   :id 5613,
   :name "min",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5613"},
  "swank.loader/all-swank-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4284,
   :name "all-swank-ns",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4284"},
  "leiningen.install/container"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3548,
   :name "container",
   :ns "leiningen.install",
   :url "http://clojuredocs.org/v/3548"},
  "net.cgrand.enlive-html/attr="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3904,
   :name "attr=",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3904"},
  "swank.util/deep-replace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4117,
   :name "deep-replace",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4117"},
  "circumspec.for-all/alpha-ascii"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3659,
   :name "alpha-ascii",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3659"},
  "net.licenser.sandbox.jvm/net.licenser.sandbox.jvm.proxy$java.lang.Object$PrivilegedAction$5d874c2b"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5118,
   :name
   "net.licenser.sandbox.jvm.proxy$java.lang.Object$PrivilegedAction$5d874c2b",
   :ns "net.licenser.sandbox.jvm",
   :url "http://clojuredocs.org/v/5118"},
  "clojure.contrib.math/ceil"
  {:comments [],
   :see-alsos
   [{:namespace_id 55,
     :weight 0,
     :name "round",
     :updated_at "2010-10-20 04:41:51.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:53:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/701",
     :line "153",
     :arglists_comp "[n]",
     :url_friendly_name "round",
     :file "clojure/contrib/math.clj"}
    {:namespace_id 55,
     :weight 0,
     :name "floor",
     :updated_at "2010-10-20 04:41:51.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:53:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/700",
     :line "129",
     :arglists_comp "[n]",
     :url_friendly_name "floor",
     :file "clojure/contrib/math.clj"}],
   :examples [],
   :id 705,
   :name "ceil",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/705"},
  "swank.commands.contrib.swank-c-p-c.internal/delimited-compound-prefix-match?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4166,
   :name "delimited-compound-prefix-match?",
   :ns "swank.commands.contrib.swank-c-p-c.internal",
   :url "http://clojuredocs.org/v/4166"},
  "incanter.processing/begin-camera"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3014,
   :name "begin-camera",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3014"},
  "incanter.core/trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2893,
   :name "trace",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2893"},
  "clojure.contrib.macro-utils/mexpand-1"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 665,
   :name "mexpand-1",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/665"},
  "clojure.contrib.string/substring?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "subs",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1913",
     :line "3940",
     :arglists_comp "[s start]|[s start end]",
     :url_friendly_name "subs",
     :file "clojure/core.clj"}],
   :examples [],
   :id 1328,
   :name "substring?",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1328"},
  "clojure.contrib.str-utils2/contains?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 7,
     :name "some",
     :updated_at "2011-08-31 02:17:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1541",
     :line "2045",
     :arglists_comp "[pred coll]",
     :url_friendly_name "some",
     :file "clojure/core.clj"}],
   :examples [],
   :id 1289,
   :name "contains?",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1289"},
  "ring.util.codec/base64-encode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2657,
   :name "base64-encode",
   :ns "ring.util.codec",
   :url "http://clojuredocs.org/v/2657"},
  "clojure.core/not"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "complement",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1584",
     :line "1101",
     :arglists_comp "[f]",
     :url_friendly_name "complement",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:18:41.0",
     :function "not",
     :version 3,
     :created_at "2010-07-28 06:24:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (not true)\nfalse\nuser=> (not false)\ntrue\n;; acts as complement of `boolean`\nuser=> (boolean \"a string\")\ntrue\nuser=> (not \"a string\")\nfalse\nuser=> (boolean 1)\ntrue\nuser=> (not 1)\nfalse"}],
   :id 5626,
   :name "not",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5626"},
  "incanter.infix/+translation-table+"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2962,
   :name "+translation-table+",
   :ns "incanter.infix",
   :url "http://clojuredocs.org/v/2962"},
  "incanter.distributions/cdf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2939,
   :name "cdf",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2939"},
  "clojure.contrib.ns-utils/ns-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 736,
   :name "ns-vars",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/736"},
  "clojure.core/set-error-handler!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "agent-error",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1671",
     :line "1638",
     :arglists_comp "[a]",
     :url_friendly_name "agent-error",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "restart-agent",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1754",
     :line "1645",
     :arglists_comp "[a new-state & options]",
     :url_friendly_name "restart-agent",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-15 22:55:08.0",
     :function "set-error-handler!",
     :version 4,
     :created_at "2012-02-15 22:51:48.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def bond (agent 7))\n\n(defn err-handler-fn [ag ex]\n  (println \"evil error occured: \" ex \" and we still have value \" @ag))\n\n(set-error-handler! bond err-handler-fn)\n\n;;division by zero:\n\n(send bond (fn [x] (/ x 0)))\n=>evil error occured:  #<ArithmeticException java.lang.ArithmeticException: \n=>Divide by zero>  and we still have value  7\n\n(send bond inc)\n=>FAILURE ;;Agent is failed, needs restart, but keeps the last OK value\n\n@bond\n=>7\n\n(restart-agent bond 7) ;; or replace 7 with @ag\n\n(send bond inc)\n=>#<Agent@88d00c6: 7> ;;because of async update\n\n@bond\n=>8\n"}],
   :id 5749,
   :name "set-error-handler!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5749"},
  "net.licenser.sandbox.matcher/class-matcher"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5124,
   :name "class-matcher",
   :ns "net.licenser.sandbox.matcher",
   :url "http://clojuredocs.org/v/5124"},
  "incanter.stats/mean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2735,
   :name "mean",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2735"},
  "lancet/get-property-class"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3478,
   :name "get-property-class",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3478"},
  "clojure.core/-reset-methods"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5326,
   :name "-reset-methods",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5326"},
  "clj-ssh.ssh/shell-channel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1477,
   :name "shell-channel",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1477"},
  "clojure.core/*1"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "*2",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/1549",
     :line "5025",
     :arglists_comp "",
     :url_friendly_name "*2",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "*3",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1531",
     :line "5030",
     :arglists_comp "",
     :url_friendly_name "*3",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:55:42.0",
     :function "*1",
     :version 3,
     :created_at "2010-07-13 12:05:52.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> \"Hello!\"\n\"Hello!\"\n\nuser=> *1\n\"Hello!\"\n"}],
   :id 5285,
   :name "*1",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5285"},
  "clojure.contrib.condition/print-stack-trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 56,
   :name "print-stack-trace",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/56"},
  "swank.commands.basic/create-repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3979,
   :name "create-repl",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3979"},
  "incanter.processing/red"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3099,
   :name "red",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3099"},
  "clojure.contrib.io/input-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 509,
   :name "input-stream",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/509"},
  "clojure.contrib.pprint/init-navigator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 968,
   :name "init-navigator",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/968"},
  "clojure.java.javadoc/add-local-javadoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5902,
   :name "add-local-javadoc",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5902"},
  "clojure.contrib.generic/nulary-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 382,
   :name "nulary-type",
   :ns "clojure.contrib.generic",
   :url "http://clojuredocs.org/v/382"},
  "clojure.contrib.mock/no-matching-function-signature"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5252,
   :name "no-matching-function-signature",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5252"},
  "circumspec.report.dot/dot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3701,
   :name "dot",
   :ns "circumspec.report.dot",
   :url "http://clojuredocs.org/v/3701"},
  "clojure.contrib.logging/*impl-name*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 645,
   :name "*impl-name*",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/645"},
  "clojure.core/accessor"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-12 15:04:05.0",
     :function "accessor",
     :version 1,
     :created_at "2010-11-12 15:04:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defstruct car-struct :make :model :year :color)\n\n(def car (struct car-struct \"Toyota\" \"Prius\" 2010))\n\n(def make (accessor car-struct :make))\n\nuser=> (make car)  ; Same as both (car :make) and (:make car)\n\"Toyota\"           \n\n"}],
   :id 5336,
   :name "accessor",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5336"},
  "clojure.core/rand-int"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "rand",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1629",
     :line "3811",
     :arglists_comp "[]|[n]",
     :url_friendly_name "rand",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "int",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/2001",
     :line "733",
     :arglists_comp "[x]",
     :url_friendly_name "int",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-23 11:43:35.0",
     :function "rand-int",
     :version 4,
     :created_at "2010-08-02 12:18:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (rand-int 30)\n10\n\nuser=> (rand-int 30)\n7\n\n;compare with \nuser=> (int (rand 30))\n"}],
   :id 5690,
   :name "rand-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5690"},
  "incanter.stats/quantile-normal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2771,
   :name "quantile-normal",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2771"},
  "clojure.contrib.sql/insert-rows"
  {:comments [],
   :see-alsos
   [{:namespace_id 83,
     :weight 0,
     :name "insert-values",
     :updated_at "2010-10-20 04:41:57.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:59:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1241",
     :line "126",
     :arglists_comp "[table column-names & value-groups]",
     :url_friendly_name "insert-values",
     :file "clojure/contrib/sql.clj"}],
   :examples [],
   :id 1251,
   :name "insert-rows",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1251"},
  "clojure.contrib.base64/quit-dr-exception"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3796,
   :name "quit-dr-exception",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3796"},
  "clojure.core/bound-fn*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "bound-fn",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1525",
     :line "1525",
     :arglists_comp "[& fntail]",
     :url_friendly_name "bound-fn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-14 17:06:00.0",
     :function "bound-fn*",
     :version 1,
     :created_at "2012-03-14 17:06:00.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def ^:dynamic *some-var* nil)\n\n(defn f [] (println *some-var*))\n\n;; run f without a new binding\nuser=> (f)\nnil\nnil\n\n;; run f with a new binding\nuser=> (binding [*some-var* \"hello\"]\n         (f))\nhello\nnil\n\n;; run f in a thread with a new binding\nuser=> (binding [*some-var* \"goodbye\"]\n         (.start (Thread. f)))\nnil\nnil\n\n;; run a bound f in a thread with a new binding\nuser=> (binding [*some-var* \"goodbye\"]\n         (.start (Thread. (bound-fn* f))))\ngoodbye\nnil\n"}],
   :id 5395,
   :name "bound-fn*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5395"},
  "clojure.reflect/->Field"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5951,
   :name "->Field",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5951"},
  "incanter.core/factorial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2870,
   :name "factorial",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2870"},
  "clojure.core/re-find"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "re-groups",
     :updated_at "2011-08-03 05:30:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1679",
     :line "3762",
     :arglists_comp "[m]",
     :url_friendly_name "re-groups",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-matcher",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1628",
     :line "3754",
     :arglists_comp "[re s]",
     :url_friendly_name "re-matcher",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-pattern",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1496",
     :line "3745",
     :arglists_comp "[s]",
     :url_friendly_name "re-pattern",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "re-seq",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1792",
     :line "3777",
     :arglists_comp "[re s]",
     :url_friendly_name "re-seq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "re-matches",
     :updated_at "2011-01-07 02:05:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1613",
     :line "3788",
     :arglists_comp "[re s]",
     :url_friendly_name "re-matches",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-12-16 00:41:00.0",
     :function "re-find",
     :version 4,
     :created_at "2010-07-13 12:37:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def *matcher* (re-matcher #\"\\d+\" \"abc12345def\"))\n#'user/*matcher*\n\nuser=> (re-find *matcher*)\n\"12345\"\n\n;; If you only want the first match, it is shorter to call re-find with the\n;; pattern and the string to search, rather than explicitly creating a matcher\n;; as above.\nuser=> (re-find #\"\\d+\" \"abc12345def\")\n\"12345\"\n\n;; If you want all matches as a sequence, use re-seq.  Creating a matcher\n;; explicitly with re-matcher and passing it to re-find is only the best way\n;; if you want to write a loop that iterates through all matches, and do not\n;; want to use re-seq for some reason.\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-03 05:05:29.0",
     :function "re-find",
     :version 1,
     :created_at "2011-08-03 05:05:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; re-find can be used to iterate through re matches in the string\n\nuser=> (def phone-number \"672-345-456-3212\")\n#'user/phone-number\n\nuser=> (def matcher (re-matcher #\"\\d+\" phone-number))\n#'user/matcher\n\nuser=> (re-find matcher)\n\"672\"\n\nuser=> (re-find matcher)\n\"345\"\n\nuser=> (re-find matcher)\n\"456\"\n\nuser=> (re-find matcher)\n\"3212\"\n\n;; when there's no more valid matches, nil is returned\nuser=> (re-find matcher)\nnil"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-16 01:36:20.0",
     :function "re-find",
     :version 1,
     :created_at "2011-12-16 01:36:20.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; When there are parenthesized groups in the pattern and re-find\n;; finds a match, it returns a vector.  The first item is the part of\n;; the string that matches the entire pattern, and each successive\n;; item are the parts of the string that matched the 1st, 2nd,\n;; etc. parenthesized groups.  Groups are numbered by the order in\n;; which their left parenthesis occurs in the string, from left to\n;; right.\nuser=> (def line \" RX packets:1871074138 errors:5 dropped:48 overruns:9\")\n#'user/line\n\nuser=> (re-find #\"(\\S+):(\\d+)\" line)\n[\"packets:1871074138\" \"packets\" \"1871074138\"]\n\n;; groups can nest\nuser=> (re-find #\"(\\S+:(\\d+)) \\S+:\\d+\" line)\n[\"packets:1871074138 errors:5\" \"packets:1871074138\" \"1871074138\"]\n\n;; If there is no match, re-find always returns nil, whether there are\n;; parenthesized groups or not.\nuser=> (re-find #\"(\\S+):(\\d+)\" \":2 numbers but not 1 word-and-colon: before\")\nnil\n\n;; A parenthesized group can have nil as its result if it is part of\n;; an 'or' (separated by | in the regex), and another alternative is\n;; the one that matches.\nuser=> (re-find #\"(\\D+)|(\\d+)\" \"word then number 57\")\n[\"word then number \" \"word then number \" nil]\n\nuser=> (re-find #\"(\\D+)|(\\d+)\" \"57 number then word\")\n[\"57\" nil \"57\"]\n\n;; It is also possible for a group to match the empty string.\nuser=> (re-find #\"(\\d*)(\\S)\\S+\" \"lots o' digits 123456789\")\n[\"lots\" \"\" \"l\"]\n\n;; If you want to use parentheses to group a part of the regex, but\n;; have no interest in capturing the string it matches, you can follow\n;; the left paren with ?: to prevent capturing.\nuser=> (re-find #\"(?:\\S+):(\\d+)\" line)\n[\"packets:1871074138\" \"1871074138\"]\n\n;; re-matches also behaves this way, and re-seq returns a sequence of\n;; matches, where each one can be a vector like re-find returns.\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-12 19:56:19.0",
     :function "re-find",
     :version 1,
     :created_at "2012-01-12 19:56:19.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;It's possible to get variables out of your string with regexp\n\nuser=> (re-find #\"(\\d\\d\\d) (USD)\" \"450 USD\")\n[\"450 USD\" \"450\" \"USD\"]\nuser=> (nth *1 1)\n\"450\"\n\n;;thanks kotarak @ stackoverflow.com for this one"}],
   :id 5696,
   :name "re-find",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5696"},
  "clojure.contrib.pprint/write-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 942,
   :name "write-out",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/942"},
  "clojure.contrib.datalog.database/database-merge-parallel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 173,
   :name "database-merge-parallel",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/173"},
  "clojure.contrib.monads/sequence-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 799,
   :name "sequence-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/799"},
  "incanter.processing/blend"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3150,
   :name "blend",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3150"},
  "circumspec.context/test-function-metadata"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3631,
   :name "test-function-metadata",
   :ns "circumspec.context",
   :url "http://clojuredocs.org/v/3631"},
  "clojure.contrib.http.agent/success?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 478,
   :name "success?",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/478"},
  "clojure.core/coll?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1664",
     :line "131",
     :arglists_comp "[x]",
     :url_friendly_name "seq_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "list?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1801",
     :line "4973",
     :arglists_comp "[x]",
     :url_friendly_name "list_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sequential?",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1522",
     :line "5000",
     :arglists_comp "[coll]",
     :url_friendly_name "sequential_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-30 07:12:11.0",
     :function "coll?",
     :version 5,
     :created_at "2010-08-02 12:03:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (coll? {})\ntrue\n\nuser=> (coll? #{})\ntrue\n\nuser=> (coll? [])\ntrue\n\nuser=> (coll? ())\ntrue\n\nuser=> (coll? 4)\nfalse\n\nuser=> (coll? \"fred\")\nfalse\n\nuser=> (coll? true)\nfalse\n\nuser=> (coll? nil)\nfalse\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-20 10:40:20.0",
     :function "coll?",
     :version 1,
     :created_at "2010-11-20 10:40:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (coll? {:a 10 :b 20}) ; map is a collection of map-entries\ntrue"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-25 21:08:12.0",
     :function "coll?",
     :version 2,
     :created_at "2012-04-09 17:47:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; contrast to example code for sequential?\n;;\nuser> (coll? '(1 2 3))\ntrue\nuser> (coll? [1 2 3])\ntrue\nuser> (coll? (range 1 5))\ntrue\nuser> (coll? 1)\nfalse\nuser> (coll? {:a 2 :b 1})   \ntrue\nuser> (coll? {:a 2 :b 1})  ; in contrast to sequential?, coll? returns true for a hash map\ntrue\nuser> (sequential? {:a 2 :b 1})\nfalse"}],
   :id 5421,
   :name "coll?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5421"},
  "swank.commands.basic/sldb-abort"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4039,
   :name "sldb-abort",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4039"},
  "swank.commands.basic/untrace-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3978,
   :name "untrace-all",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3978"},
  "clojure.inspector/collection-tag"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5864,
   :name "collection-tag",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5864"},
  "clj-ssh.ssh/with-default-session-options"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1489,
   :name "with-default-session-options",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1489"},
  "net.cgrand.enlive-html/text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3859,
   :name "text",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3859"},
  "ring.middleware.session.cookie/cookie-store"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2703,
   :name "cookie-store",
   :ns "ring.middleware.session.cookie",
   :url "http://clojuredocs.org/v/2703"},
  "clojure.contrib.graph/self-recursive-sets"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 436,
   :name "self-recursive-sets",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/436"},
  "clojure.core/defmacro"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-24 11:36:38.0",
     :user_id 106,
     :function "defmacro",
     :version "1.3.0",
     :created_at "2012-03-23 20:27:27.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "The body of a macro has two implicitly bound symbols: <code>&amp;form</code> and <code>&amp;env</code>.  They work like two extra unnamed args.  The names begin with '&amp;' to avoid name clashes with normal user-defined symbols.  The value of <code>&amp;form</code> is the form of the original macro call before macro expansion.  There's useful meta-data on <code>&amp;form</code>. The value of <code>&amp;env</code> is the \"environment\", which is basically a map of lexical bindings.  The keys of <code>&amp;env</code> are the lexically bound symbols.  The values are internal compiler details, and probably aren't useful for user code.\n\n\nSee also:\n[http://blog.jayfields.com/2011/02/clojure-and.html](http://blog.jayfields.com/2011/02/clojure-and.html)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-22 11:34:24.0",
     :user_id 720,
     :function "defmacro",
     :version "1.3.0",
     :created_at "2012-09-22 11:34:24.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Due to syntax-quote resolving symbols (see the [Clojure reader docs](http://clojure.org/reader)), you won't be able to include a regular `let` statement inside a macro, i.e.:\n\n<pre>(defmacro m [] `(let [x 1] x))\n(m) ; => CompilerException java.lang.RuntimeException: Can't let qualified name: user/x, compiling:(NO_SOURCE_PATH:1)</pre>\n\nWe can see why:\n\n<pre>(macroexpand-1 '(m)) ; => (clojure.core/let [user/x 1] user/x)</pre>\nThe syntax-quote has resolved `x` to `user/x`â€”which can't be `let`. This is a good thing, as it's signalling to us that we should use gensyms by appending `#`:\n\n<pre>(defmacro m [] `(let [x# 1] x#))\n(m) ; => 1\n(macroexpand-1 '(m)) ; => (clojure.core/let [x__383__auto__ 1] x__383__auto__)</pre>"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "macroexpand",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1874",
     :line "3098",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "macroexpand-1",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1808",
     :line "3091",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand-1",
     :file "clojure/core.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "macroexpand-all",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2560",
     :line "127",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand-all",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 16:04:24.0",
     :function "defmacro",
     :version 2,
     :created_at "2010-10-07 15:59:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defmacro with-tree [tree & body]\n  \"works on a JTree and restores its expanded paths after executing body\"\n  `(let [tree# ~tree\n         root# (.getRoot (.getModel tree#))\n         expanded# (if-let [x# (.getExpandedDescendants\n                                tree# (TreePath. root#))]\n                     (enumeration-seq x#)\n                     ())\n         selectionpaths# (. selectionmodel# getSelectionPaths)]\n     ~@body\n     (doseq [path# expanded#]\n       (.expandPath tree# path#))))\n\n;; usage:\n\n(with-tree *one-jtree-instance*\n   ;; some code here...\n  )"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-20 03:51:14.0",
     :function "defmacro",
     :version 1,
     :created_at "2012-01-20 03:51:14.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defmacro unless [pred a b]\n  `(if (not ~pred) ~a ~b))\n\n;; usage:\n\n(unless false (println \"Will print\") (println \"Will not print\"))"}],
   :id 5450,
   :name "defmacro",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5450"},
  "clojure.contrib.pprint.column-writer/get-max-column"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 937,
   :name "get-max-column",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/937"},
  "net.cgrand.enlive-html/zip-pred"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3811,
   :name "zip-pred",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3811"},
  "lancet/mail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3443,
   :name "mail",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3443"},
  "clojure.core/ns-name"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-26 04:09:33.0",
     :function "ns-name",
     :version 2,
     :created_at "2012-01-26 04:05:54.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; get the namespace name as string\nuser=> (ns-name (the-ns 'user))\nuser\n"}],
   :id 5636,
   :name "ns-name",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5636"},
  "clojure.contrib.fnmap.PersistentFnMap/-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 329,
   :name "-count",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/329"},
  "clojure.core/ref"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "alter",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1649",
     :line "1857",
     :arglists_comp "[ref fun & args]",
     :url_friendly_name "alter",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ref-set",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1701",
     :line "1868",
     :arglists_comp "[ref val]",
     :url_friendly_name "ref-set",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "add-watch",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1539",
     :line "1613",
     :arglists_comp "[reference key fn]",
     :url_friendly_name "add-watch",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dosync",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/1564",
     :line "3993",
     :arglists_comp "[& exprs]",
     :url_friendly_name "dosync",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "commute",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1600",
     :line "1837",
     :arglists_comp "[ref fun & args]",
     :url_friendly_name "commute",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "ensure",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1898",
     :line "1897",
     :arglists_comp "[ref]",
     :url_friendly_name "ensure",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:03:41.0",
     :function "ref",
     :version 9,
     :created_at "2010-08-02 12:58:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (ref [])\n#&lt;ref@5fafa486: []&gt;\n\nuser=> (ref 1 :validator pos?)\n#&lt;Ref@6c484c6b: 1&gt;\n"}],
   :id 5708,
   :name "ref",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5708"},
  "clojure.contrib.monadic-io-streams/read-char"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 756,
   :name "read-char",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/756"},
  "circumspec.test/test-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3733,
   :name "test-name",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3733"},
  "clojure.contrib.io/as-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 507,
   :name "as-file",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/507"},
  "clojure.core/class?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "class",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:45.0",
     :added nil,
     :url "http://clojuredocs.org/v/1791",
     :line "2651",
     :arglists_comp "[x]",
     :url_friendly_name "class",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 20:31:51.0",
     :function "class?",
     :version 1,
     :created_at "2010-10-07 20:31:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (class? 1)\nfalse\n\nuser=> (class? java.lang.String)\ntrue\n\nuser=> (class? [])\nfalse"}],
   :id 5418,
   :name "class?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5418"},
  "incanter.distributions/neg-binomial-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5090,
   :name "neg-binomial-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5090"},
  "clojure.contrib.io/reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 502,
   :name "reader",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/502"},
  "clj-ssh.ssh/ssh-sftp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1474,
   :name "ssh-sftp",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1474"},
  "clojure.reflect/->Constructor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5950,
   :name "->Constructor",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5950"},
  "clojure.contrib.macro-utils/defsymbolmacro"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 672,
   :name "defsymbolmacro",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/672"},
  "clojure.contrib.string/split-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1326,
   :name "split-lines",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1326"},
  "clojure.contrib.logging/enabled?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 653,
   :name "enabled?",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/653"},
  "circumspec.locator/sort-key"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3687,
   :name "sort-key",
   :ns "circumspec.locator",
   :url "http://clojuredocs.org/v/3687"},
  "clojure.contrib.dataflow/add-cells"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 112,
   :name "add-cells",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/112"},
  "circumspec.for-all/famous-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3658,
   :name "famous-string",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3658"},
  "lancet/set-properties!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3448,
   :name "set-properties!",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3448"},
  "clojure.core/bit-not"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:19:02.0",
     :function "bit-not",
     :version 4,
     :created_at "2010-07-28 10:33:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-not 2r0111)\n-8 \n\nuser=> (bit-not -2r1000)\n7"}],
   :id 5384,
   :name "bit-not",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5384"},
  "clojure.core/take"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "drop",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2018",
     :line "2172",
     :arglists_comp "[n coll]",
     :url_friendly_name "drop",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "take-while",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1958",
     :line "2162",
     :arglists_comp "[pred coll]",
     :url_friendly_name "take-while",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "take-last",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/2047",
     :line "2189",
     :arglists_comp "[n coll]",
     :url_friendly_name "take-last",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "take-nth",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/2040",
     :line "3320",
     :arglists_comp "[n coll]",
     :url_friendly_name "take-nth",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-28 09:24:30.0",
     :function "take",
     :version 6,
     :created_at "2010-07-11 20:24:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (take 3 '(1 2 3 4 5 6))\n(1 2 3)\n\nuser=> (take 3 [1 2 3 4 5 6])\n(1 2 3)\n\nuser=> (take 3 [1 2])\n(1 2)\n\nuser=> (take 1 [])\n()"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:19:48.0",
     :function "take",
     :version 6,
     :created_at "2010-07-29 23:02:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (take 3 (drop 5 (range 1 11)))\n(6 7 8)"}],
   :id 5784,
   :name "take",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5784"},
  "incanter.core/set-data"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2813,
   :name "set-data",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2813"},
  "clojure.contrib.sql.internal/with-query-results*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1232,
   :name "with-query-results*",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1232"},
  "swank.commands.inspector/ref-pop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4223,
   :name "ref-pop",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4223"},
  "clojure.pprint/pprint-tab"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5941,
   :name "pprint-tab",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5941"},
  "net.cgrand.xml/content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3953,
   :name "content",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3953"},
  "clojure.contrib.stream-utils/pick"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1295,
   :name "pick",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1295"},
  "clojure.core/compile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5428,
   :name "compile",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5428"},
  "circumspec.report/error-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3691,
   :name "error-string",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3691"},
  "clojure.pprint/simple-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5945,
   :name "simple-dispatch",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5945"},
  "clojure.contrib.properties/read-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1118,
   :name "read-properties",
   :ns "clojure.contrib.properties",
   :url "http://clojuredocs.org/v/1118"},
  "clj-swing.document/str-insert"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5180,
   :name "str-insert",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5180"},
  "midje.unprocessed/arg-matcher-maker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4363,
   :name "arg-matcher-maker",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4363"},
  "clojure.contrib.test-is/do-report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5080,
   :name "do-report",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/5080"},
  "incanter.stats/cdf-exp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3283,
   :name "cdf-exp",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3283"},
  "clojure.contrib.datalog.util/map-values"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 197,
   :name "map-values",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/197"},
  "clojure.core/special-symbol?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-24 19:52:15.0",
     :function "special-symbol?",
     :version 2,
     :created_at "2012-11-24 19:49:46.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (clojure-version)\n\"1.4.0\"\n;; the set of special symbols for this clojure-version are the following:\nuser=> (keys (. clojure.lang.Compiler specials))\n(deftype* new quote & var set! monitor-enter recur . case* clojure.core/import* reify* do fn* throw monitor-exit letfn* finally let* loop* try catch if def)\n\n;; for example, \"def\" is not a function, not a macro, not even a var, but a special form:\nuser=> (fn? 'def)\nfalse\nuser=> (:macro (meta (find-var 'clojure.core/def)))\nnil\nuser=> (find-var 'clojure.core/def)\nnil\nuser=> (special-symbol? 'def)\ntrue\n\n;; while \"defn\" is not a special form but a macro:\nuser=> (special-symbol? 'defn)\nfalse\nuser=> (:macro (meta (find-var 'clojure.core/defn)))\ntrue\n"}],
   :id 5768,
   :name "special-symbol?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5768"},
  "incanter.processing/BLUE_MASK"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3151,
   :name "BLUE_MASK",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3151"},
  "leiningen.install/make-settings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3543,
   :name "make-settings",
   :ns "leiningen.install",
   :url "http://clojuredocs.org/v/3543"},
  "clojure.core/unchecked-byte"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5801,
   :name "unchecked-byte",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5801"},
  "clojure.contrib.probabilities.finite-distributions/cond-dist-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1080,
   :name "cond-dist-m",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1080"},
  "clojure.java.io/default-streams-impl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5884,
   :name "default-streams-impl",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5884"},
  "net.cgrand.enlive-html/attr-starts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3857,
   :name "attr-starts",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3857"},
  "ring.util.response/header"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2637,
   :name "header",
   :ns "ring.util.response",
   :url "http://clojuredocs.org/v/2637"},
  "clj-swing.combo-box/combo-box"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5166,
   :name "combo-box",
   :ns "clj-swing.combo-box",
   :url "http://clojuredocs.org/v/5166"},
  "clojure.test/test-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6041,
   :name "test-ns",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6041"},
  "ring.middleware.session.memory/memory-store"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2690,
   :name "memory-store",
   :ns "ring.middleware.session.memory",
   :url "http://clojuredocs.org/v/2690"},
  "clojure.contrib.logging/spy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 644,
   :name "spy",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/644"},
  "clojure.contrib.java-utils/as-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 532,
   :name "as-file",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/532"},
  "incanter.stats/chebyshev-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3367,
   :name "chebyshev-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3367"},
  "circumspec.utils/ns-wipe"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3759,
   :name "ns-wipe",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3759"},
  "incanter.charts/add-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2790,
   :name "add-image",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2790"},
  "swank.util.class-browse/top-level-classes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4144,
   :name "top-level-classes",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4144"},
  "net.cgrand.enlive-html/snippet*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3858,
   :name "snippet*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3858"},
  "clojure.contrib.monadic-io-streams/print"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 757,
   :name "print",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/757"},
  "incanter.stats/bigrams"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3306,
   :name "bigrams",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3306"},
  "clojure.contrib.generic.comparison/="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 401,
   :name "=",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/401"},
  "clojure.core/to-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "alength",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/2059",
     :line "2973",
     :arglists_comp "[array]",
     :url_friendly_name "alength",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "char-array",
     :updated_at "2010-12-29 18:12:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1563",
     :line "4160",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "char-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "int-array",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1730",
     :line "4191",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "int-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "long-array",
     :updated_at "2011-08-20 23:10:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1550",
     :line "4199",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "long-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-01 01:45:49.0",
     :function "to-array",
     :version 1,
     :created_at "2010-10-01 01:45:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (to-array [1 2 3])\n#&lt;Object[] [Ljava.lang.Object;@3a7e479a>\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-15 23:31:52.0",
     :function "to-array",
     :version 1,
     :created_at "2012-02-15 23:31:52.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def hello (to-array \"Hello World!\"))\n\n(aget hello 1)\n\\e\n\n(aset hello 1 \\b) ;;Mutability! Watch out!\n\\b\n\n(dotimes [n (alength hello)] (print (aget hello n)))\nHbllo World!"}],
   :id 5792,
   :name "to-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5792"},
  "clojure.repl/demunge"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 342,
     :ns "clojure.repl",
     :updated_at "2012-04-26 02:12:35.0",
     :function "demunge",
     :version 1,
     :created_at "2012-04-26 02:12:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (-> + class str demunge)\n\"class clojure.core/+\""}],
   :id 5967,
   :name "demunge",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5967"},
  "swank.commands.basic/invoke-restart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4108,
   :name "invoke-restart",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4108"},
  "clojure.core/juxt"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-05 01:27:51.0",
     :user_id 230,
     :function "juxt",
     :version "1.2.0",
     :created_at "2010-12-05 01:27:51.0",
     :library "Clojure Core",
     :library_id 3,
     :body "I kinda love this fn =)"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "partial",
     :updated_at "2010-11-14 13:52:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1951",
     :line "2003",
     :arglists_comp
     "[f arg1]|[f arg1 arg2]|[f arg1 arg2 arg3]|[f arg1 arg2 arg3 & more]",
     :url_friendly_name "partial",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 6,
     :name "comp",
     :updated_at "2011-08-21 18:12:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1850",
     :line "1936",
     :arglists_comp "[f]|[f g]|[f g h]|[f1 f2 f3 & fs]",
     :url_friendly_name "comp",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:28:07.0",
     :function "juxt",
     :version 3,
     :created_at "2010-07-15 10:06:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Extract values from a map.\n\nuser=> ((juxt :a :b) {:a 1 :b 2 :c 3 :d 4})\n[1 2]\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:28:24.0",
     :function "juxt",
     :version 4,
     :created_at "2010-07-15 10:07:53.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; \"Explode\" a value.\n\nuser=> ((juxt identity name) :keyword)\n[:keyword \"keyword\"]\n\n\n;; eg. to create a map:\n\nuser=> (into {} (map (juxt identity name) [:a :b :c :d]))\n{:a \"a\" :b \"b\" :c \"c\" :d \"d\"}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 02:14:06.0",
     :function "juxt",
     :version 4,
     :created_at "2010-07-27 07:18:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Get the first character and length of string\n\nuser=> ((juxt first count) \"Clojure Rocks\")\n[\\C 13]\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-16 21:08:51.0",
     :function "juxt",
     :version 1,
     :created_at "2012-07-16 21:08:51.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; sort list of maps by multiple values\nuser => (sort-by (juxt :a :b) [{:a 1 :b 3} {:a 1 :b 2} {:a 2 :b 1}]\n[{:a 1 :b 2} {:a 1 :b 3} {:a 2 :b 1}]"}],
   :id 5570,
   :name "juxt",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5570"},
  "incanter.processing/sphere-detail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3236,
   :name "sphere-detail",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3236"},
  "incanter.processing/mouse-y"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3232,
   :name "mouse-y",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3232"},
  "ring.util.servlet/servlet"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2622,
   :name "servlet",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2622"},
  "clojure.contrib.mock.test-adapter/returns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 729,
   :name "returns",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/729"},
  "clojure.contrib.macro-utils/macrolet"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 658,
   :name "macrolet",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/658"},
  "clojure.core/derive"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "parents",
     :updated_at "2011-08-21 16:03:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1834",
     :line "4421",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "parents",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "ancestors",
     :updated_at "2011-08-21 16:22:26.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1968",
     :line "4434",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "ancestors",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "descendants",
     :updated_at "2011-08-21 16:07:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1641",
     :line "4450",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "descendants",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "isa?",
     :updated_at "2011-08-10 13:56:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1711",
     :line "4400",
     :arglists_comp "[child parent]|[h child parent]",
     :url_friendly_name "isa_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "make-hierarchy",
     :updated_at "2011-08-20 20:11:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1637",
     :line "4367",
     :arglists_comp "[]",
     :url_friendly_name "make-hierarchy",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "underive",
     :updated_at "2011-08-21 14:30:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1964",
     :line "4498",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "underive",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-17 04:34:29.0",
     :function "derive",
     :version 1,
     :created_at "2011-06-17 04:34:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; derive let you build a hierarchy but parents/ancestors/descendants and isa? let you query the hierarchy\n(derive ::rect ::shape)\n(derive ::square ::rect)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-10 13:56:34.0",
     :function "derive",
     :version 1,
     :created_at "2011-08-10 13:56:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (derive ::Cat ::Feline)\nnil\n\nuser=> (derive ::Lion ::Feline)\nnil\n\nuser=> (isa? ::Lion ::Feline)\ntrue\n\nuser=> (isa? ::Tuna ::Feline)\nfalse"}],
   :id 5465,
   :name "derive",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5465"},
  "clojure.contrib.zip-filter/left-locs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1441,
   :name "left-locs",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1441"},
  "clojure.core/println-str"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "println",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/2015",
     :line "2865",
     :arglists_comp "[& more]",
     :url_friendly_name "println",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-12-06 21:02:27.0",
     :function "println-str",
     :version 7,
     :created_at "2010-09-11 19:08:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Create a newline-terminated string from the items and store it in x.\nuser=> (def x (println-str 1 \"foo\" \\b \\a \\r {:a 2}))\n#'user/x\n\n;; It's a string.\nuser=> (string? x)\ntrue\n\n;; Notice that the items are separated by a space.  Also, the newline string is\n;; platform-specific. See clojure.core/newline.\nuser=> x\n\"1 foo b a r {:a 2}\\r\\n\"\n"}],
   :id 5677,
   :name "println-str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5677"},
  "incanter.core/copy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2853,
   :name "copy",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2853"},
  "clojure.contrib.str-utils2/map-str"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 86,
     :ns "clojure.contrib.str-utils2",
     :updated_at "2010-11-12 14:41:43.0",
     :function "map-str",
     :version 1,
     :created_at "2010-11-12 14:41:43.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(require '[clojure.contrib.str-utils2 :as s])\n\nuser=> (s/map-str s/upper-case [\"foo\" \"bar\" \"zot\"])\n\"FOOBARZOT\""}],
   :id 1269,
   :name "map-str",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1269"},
  "net.licenser.sandbox.matcher/function-matcher"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5139,
   :name "function-matcher",
   :ns "net.licenser.sandbox.matcher",
   :url "http://clojuredocs.org/v/5139"},
  "clojure.core/not-empty"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "empty",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1524",
     :line "4101",
     :arglists_comp "[coll]",
     :url_friendly_name "empty",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-27 13:33:22.0",
     :function "not-empty",
     :version 1,
     :created_at "2011-07-27 13:33:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (not-empty [])\nnil\nuser=> (not-empty [1])\n[1]\nuser=> (not-empty [1 3 5])\n[1 3 5]"}],
   :id 5628,
   :name "not-empty",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5628"},
  "clojure.contrib.zip-filter.xml/text="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1448,
   :name "text=",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1448"},
  "swank.commands.basic/list-threads"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4041,
   :name "list-threads",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4041"},
  "clojure.core/repeatedly"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-09 19:31:33.0",
     :user_id 202,
     :function "repeatedly",
     :version "1.2.0",
     :created_at "2010-11-09 19:31:33.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "if the function you want to repeat doesn't have side effects and has an argument, 'iterate' may be what you are looking for."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "repeat",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1578",
     :line "2230",
     :arglists_comp "[x]|[n x]",
     :url_friendly_name "repeat",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "iterate",
     :updated_at "2011-07-16 14:14:30.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1749",
     :line "2241",
     :arglists_comp "[f x]",
     :url_friendly_name "iterate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "lazy-seq",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2044",
     :line "557",
     :arglists_comp "[& body]",
     :url_friendly_name "lazy-seq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dotimes",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1587",
     :line "2508",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "dotimes",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "doall",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1806",
     :line "2456",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "doall",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "rand-int",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1745",
     :line "3818",
     :arglists_comp "[n]",
     :url_friendly_name "rand-int",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "constantly",
     :updated_at "2011-07-16 14:10:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1856",
     :line "1112",
     :arglists_comp "[x]",
     :url_friendly_name "constantly",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-24 10:33:19.0",
     :function "repeatedly",
     :version 9,
     :created_at "2010-07-14 00:41:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";these two functions are equivalent \n\nuser=> (take 5 (repeatedly #(rand-int 11)))\n(6 6 3 9 8)\n\nuser=> (repeatedly 5 #(rand-int 11))\n(1 8 6 9 6)\n\n;compare with repeat\nuser=> (repeat 5 (int (rand 100)))\n(94 94 94 94 94)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-10-04 08:16:47.0",
     :function "repeatedly",
     :version 4,
     :created_at "2010-09-03 14:46:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn counter []  \n  (let [tick (atom 0)]\n    #(swap! tick inc)))\n\n(def tick (counter))\n\nuser=> (take 10 (repeatedly tick))\n(1 2 3 4 5 6 7 8 9 10)"}],
   :id 5724,
   :name "repeatedly",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5724"},
  "clojure.contrib.map-utils/deep-merge-with"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 693,
   :name "deep-merge-with",
   :ns "clojure.contrib.map-utils",
   :url "http://clojuredocs.org/v/693"},
  "incanter.stats/jaccard-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3363,
   :name "jaccard-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3363"},
  "clojure.contrib.seq-utils/rec-cat"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1174,
   :name "rec-cat",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1174"},
  "clojure.core/fn"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-15 23:21:08.0",
     :function "fn",
     :version 11,
     :created_at "2010-07-28 12:52:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; simple anonymous function passed to (map )\nuser=> (map (fn [x] (* x x)) (range 1 10))\n(1 4 9 16 25 36 49 64 81) \n\n;; anonymous function with a name.  not so anonymous now is it?\n;; this is useful in stack traces\n(fn add[a b] (+ a b))\n\n;; anonymous function with two params, the second is destructed\nuser=> (reduce (fn [m [k v]] (assoc m v k)) {} {:b 2 :a 1 :c 3})\n{2 :b, 1 :a, 3 :c} \n\n;; define and instantly call an anonymous function\nuser=> ((fn [a b c] (+ a b c)) 2 4 6)\n12\n\n;; define and instantly call an anonymous variadic function \n;; \"nums\" is a list here\nuser=> ((fn [& nums] (/ (apply + nums) (count nums))) 1 2 3 4)\n5/2 \n\n;; define and instantly call an anonymous mixed function\n;; \"nums\" is a list, while \"int\" is a number\nuser=> ((fn [int & nums] (+ int (/ (apply + nums) (count nums)))) 10 1 2 3 4)\n25/2 \n\n;; define and instantly call an anonymous overloaded function \n;; even though it is quite pointless\nuser=>  ((fn ([a] (inc a)) ([a b] (+ a b))) 3)\n4\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:47:43.0",
     :function "fn",
     :version 3,
     :created_at "2010-09-09 21:31:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; the shortcut form for (fn ) is #( )\n;; where parameters are referred by their index with the prefix %\n\n;; the equivalent of \nuser=> ((fn [a b c] (+ a b c)) 2 4 6)\n12\n\n;; is\nuser=> (#(+ %1 %2 %3) 2 4 6)\n12\n"}],
   :id 5518,
   :name "fn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5518"},
  "incanter.processing/create-output"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3059,
   :name "create-output",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3059"},
  "incanter.core/decomp-lu"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2900,
   :name "decomp-lu",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2900"},
  "incanter.stats/quantile-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3288,
   :name "quantile-t",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3288"},
  "clojure.contrib.string/chomp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1312,
   :name "chomp",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1312"},
  "clojure.contrib.pprint/*print-shared*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 963,
   :name "*print-shared*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/963"},
  "clojure.contrib.greatest-least/least"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 451,
   :name "least",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/451"},
  "clojure.contrib.probabilities.monte-carlo/n-sphere"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1103,
   :name "n-sphere",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1103"},
  "clojure.core/drop-last"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "drop",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2018",
     :line "2172",
     :arglists_comp "[n coll]",
     :url_friendly_name "drop",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop-while",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2075",
     :line "2199",
     :arglists_comp "[pred coll]",
     :url_friendly_name "drop-while",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:20:16.0",
     :function "drop-last",
     :version 3,
     :created_at "2010-07-28 12:23:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (drop-last [1 2 3 4])\n(1 2 3) \n\nuser=> (drop-last -1 [1 2 3 4])\n(1 2 3 4) \n\nuser=> (drop-last 0 [1 2 3 4])\n(1 2 3 4) \n\nuser=> (drop-last 2 [1 2 3 4])\n(1 2)\n\nuser=> (drop-last 5 [1 2 3 4])\n()"}],
   :id 5484,
   :name "drop-last",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5484"},
  "incanter.processing/create-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3004,
   :name "create-image",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3004"},
  "clojure.core/isa?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "derive",
     :updated_at "2011-08-10 13:56:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1595",
     :line "4462",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "derive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "instance?",
     :updated_at "2011-08-21 22:07:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1519",
     :line "124",
     :arglists_comp "[c x]",
     :url_friendly_name "instance_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "underive",
     :updated_at "2011-08-21 14:30:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1964",
     :line "4498",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "underive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "ancestors",
     :updated_at "2011-08-21 16:22:26.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1968",
     :line "4434",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "ancestors",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "parents",
     :updated_at "2011-08-21 16:03:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1834",
     :line "4421",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "parents",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "descendants",
     :updated_at "2011-08-21 16:07:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1641",
     :line "4450",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "descendants",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "make-hierarchy",
     :updated_at "2011-08-20 20:11:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1637",
     :line "4367",
     :arglists_comp "[]",
     :url_friendly_name "make-hierarchy",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-21 10:32:32.0",
     :function "isa?",
     :version 2,
     :created_at "2011-08-03 10:54:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (import 'java.util.PriorityQueue)\njava.util.PriorityQueue\n\nuser=> (bases PriorityQueue)\n(java.util.AbstractQueue java.io.Serializable)\n\nuser=> (import 'java.util.AbstractQueue)\njava.util.AbstractQueue\n\nuser=> (isa? PriorityQueue AbstractQueue)\ntrue\n\nuser=> (bases AbstractQueue)\n(java.util.AbstractCollection java.util.Queue)\n\nuser=> (isa? PriorityQueue java.util.AbstractCollection)\ntrue\n\nuser=> (isa? PriorityQueue java.util.Queue)\ntrue\n\nuser=> (isa? java.util.PriorityQueue java.util.TreeMap)\nfalse"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-21 10:38:20.0",
     :function "isa?",
     :version 2,
     :created_at "2011-08-10 13:56:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (derive ::Feline ::Animal)\nnil\nuser=> (derive ::Cat ::Feline)\nnil\n\nuser=> (derive ::Lion ::Feline)\nnil\n\nuser=> (isa? ::Lion ::Feline)\ntrue\n\nuser=> (isa? ::Lion ::Animal)\ntrue\n\nuser=> (isa? ::Tuna ::Feline)\nfalse"}],
   :id 5567,
   :name "isa?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5567"},
  "ring.util.response/content-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2638,
   :name "content-type",
   :ns "ring.util.response",
   :url "http://clojuredocs.org/v/2638"},
  "circumspec/test-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3597,
   :name "test-namespaces",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3597"},
  "clojure.core/*2"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "*1",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1746",
     :line "5020",
     :arglists_comp "",
     :url_friendly_name "*1",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "*3",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1531",
     :line "5030",
     :arglists_comp "",
     :url_friendly_name "*3",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:55:23.0",
     :function "*2",
     :version 3,
     :created_at "2010-07-13 12:07:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> \"Hello!\"\n\"Hello!\"\n\nuser=> \"Hello World!\"\n\"Hello World!\"\n\nuser=> [*1 *2]\n[\"Hello World!\" \"Hello!\"]\n"}],
   :id 5286,
   :name "*2",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5286"},
  "incanter.processing/radians"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3056,
   :name "radians",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3056"},
  "ring.adapter.jetty/run-jetty"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2627,
   :name "run-jetty",
   :ns "ring.adapter.jetty",
   :url "http://clojuredocs.org/v/2627"},
  "clojure.contrib.condition/stack-trace-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 58,
   :name "stack-trace-info",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/58"},
  "clojure.core/aset-byte"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:11:34.0",
     :function "aset-byte",
     :version 1,
     :created_at "2011-08-21 01:11:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 bytes and set one of the values to 127\n\nuser=> (def bs (byte-array 10))\n#'user/bs\nuser=> (vec bs)\n[0 0 0 0 0 0 0 0 0 0]\nuser=> (aset-byte bs 2 127)\n127\nuser=> (vec bs)\n[0 0 127 0 0 0 0 0 0 0]\nuser=>"}],
   :id 5358,
   :name "aset-byte",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5358"},
  "fogus.me.trammel/defcontract"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5035,
   :name "defcontract",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5035"},
  "leiningen.deps/deps"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3513,
   :name "deps",
   :ns "leiningen.deps",
   :url "http://clojuredocs.org/v/3513"},
  "swank.commands.basic/eval-and-grab-output"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4024,
   :name "eval-and-grab-output",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4024"},
  "clojure.contrib.mock.test-adapter/has-matching-signature?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 726,
   :name "has-matching-signature?",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/726"},
  "clojure.contrib.str-utils2/upper-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1273,
   :name "upper-case",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1273"},
  "clojure.core/vec"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "vector",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1693",
     :line "302",
     :arglists_comp "[]|[a]|[a b]|[a b c]|[a b c d]|[a b c d & args]",
     :url_friendly_name "vector",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1723",
     :line "155",
     :arglists_comp "[x]",
     :url_friendly_name "vector_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector-of",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1503",
     :line "452",
     :arglists_comp "[t]",
     :url_friendly_name "vector-of",
     :file "clojure/gvec.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-30 21:59:11.0",
     :function "vec",
     :version 3,
     :created_at "2010-07-13 19:43:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (vec '(1 2 3))\n[1 2 3]\n\nuser=> (vec [1 2 3])\n[1 2 3]\n\nuser=> (vec '())\n[]\n\nuser=> (vec nil)\n[]"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-14 21:21:05.0",
     :function "vec",
     :version 1,
     :created_at "2012-04-14 21:21:05.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Warning.  If the arg is a Java array, then the returned vector will alias it,\n;; and modifying the array will thus modify the vector.  To avoid this, do\n;; not modify the array after the vec call.  One way to guarantee this is to\n;; make a copy of the array, call vec on the new array, and then lose all\n;; references to the copy so it cannot be accessed in any way.\n\nuser=> (def a (to-array (repeat 4 0)))\n#'user/a\nuser=> (seq a)\n(0 0 0 0)\nuser=> (def v (vec a))\n#'user/v\nuser=> v\n[0 0 0 0]\n\n;; Now change a, and v changes, too, since they share state.\nuser=> (aset a 2 -5)\n-5\nuser=> v\n[0 0 -5 0]\n\n;; One way to avoid this\nuser=> (def v (vec (aclone a)))\n#'user/v\nuser=> v\n[0 0 -5 0]\nuser=> (aset a 2 -20)\n-20\nuser=> v\n[0 0 -5 0]\n"}],
   :id 5832,
   :name "vec",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5832"},
  "swank.clj-contrib.macroexpand/macroexpand-all*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3963,
   :name "macroexpand-all*",
   :ns "swank.clj-contrib.macroexpand",
   :url "http://clojuredocs.org/v/3963"},
  "incanter.processing/PDF"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3261,
   :name "PDF",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3261"},
  "circumspec.runner/pending-result"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3730,
   :name "pending-result",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3730"},
  "clojure.core/conj"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "cons",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1873",
     :line "22",
     :arglists_comp "[x seq]",
     :url_friendly_name "cons",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-04 10:52:44.0",
     :function "conj",
     :version 8,
     :created_at "2010-07-17 18:37:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (conj [1 2 3] 4)\n[1 2 3 4]\n\nuser=> (conj '(1 2 3) 4)\n(4 1 2 3)\n\nuser=> (conj [\"a\" \"b\" \"c\"] \"d\")\n[\"a\" \"b\" \"c\" \"d\"]\n\nuser=> (conj [1 2] 3 4)               \n[1 2 3 4]\n\nuser=> (conj [[1 2] [3 4]] [5 6])       \n[[1 2] [3 4] [5 6]]\n\n;; Maps only take vectors of length exactly 2\nuser=> (conj {1 2, 3 4} [5 6])\n{5 6, 1 2, 3 4}\n\nuser=> (conj {:firstname \"John\" :lastname \"Doe\"} {:age 25 :nationality \"Chinese\"})\n{:nationality \"Chinese\", :age 25, :firstname \"John\", :lastname \"Doe\"}\n\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-19 12:03:22.0",
     :function "conj",
     :version 2,
     :created_at "2012-07-19 12:02:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";conjoin shows similar behaviour to cons\n(conj [\"a\" \"b\" \"c\"] [\"a\" \"b\" \"c\"] )\nuser=> [a b c [a b c]]"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-08 09:44:03.0",
     :function "conj",
     :version 1,
     :created_at "2012-10-08 09:44:03.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; conj nil with x or xs\nuser=> (conj nil 3)\n(3)\nuser=> (conj nil 3 4)\n(4 3)"}],
   :id 5433,
   :name "conj",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5433"},
  "clojure.core/long-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "longs",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1514",
     :line "4242",
     :arglists_comp "[xs]",
     :url_friendly_name "longs",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 14:46:59.0",
     :function "long-array",
     :version 4,
     :created_at "2011-08-20 23:10:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a long array using long-array and show it can be used\n;; with the standard Java Arrays functions binarySearch and fill\n;; note the needed coercions\n\nuser=> (def is (long-array (range 3 20)))\n#'user/is\nuser=> (vec is)\n[3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19]\nuser=> (java.util.Arrays/binarySearch is (long 10))\n7\nuser=> (java.util.Arrays/fill is 3 8 (long 99))\nnil\nuser=> (vec is)\n[3 4 5 99 99 99 99 99 11 12 13 14 15 16 17 18 19]\nuser=>"}],
   :id 5593,
   :name "long-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5593"},
  "swank.core/*sldb-level*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4082,
   :name "*sldb-level*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4082"},
  "incanter.censored/truncated-variance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2749,
   :name "truncated-variance",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2749"},
  "clojure.core/boolean-array"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 14:50:03.0",
     :function "boolean-array",
     :version 2,
     :created_at "2011-08-20 23:29:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of Java boolean's using boolean-array\n;; and demonstrate that it can be used for input into the standard\n;; Java Arrays.fill function\n\nuser=> (def bs (boolean-array (map even? (range 3 10))))\n#'user/bs\nuser=> (type bs)\n[Z\nuser=> (vec bs)\n[false true false true false true false]\nuser=> (java.util.Arrays/fill bs 3 7 false)\nnil\nuser=> (vec bs)\n[false true false false false false false]\nuser=>"}],
   :id 5392,
   :name "boolean-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5392"},
  "incanter.processing/with-translation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3073,
   :name "with-translation",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3073"},
  "incanter.bayes/sample-model-params"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2743,
   :name "sample-model-params",
   :ns "incanter.bayes",
   :url "http://clojuredocs.org/v/2743"},
  "clojure.core/send"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "shutdown-agents",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1924",
     :line "1716",
     :arglists_comp "[]",
     :url_friendly_name "shutdown-agents",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "send-off",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1663",
     :line "1593",
     :arglists_comp "[a f & args]",
     :url_friendly_name "send-off",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:20:44.0",
     :function "send",
     :version 3,
     :created_at "2010-08-24 00:31:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def my-agent (agent 100))\n#'user/my-agent\nuser=> @my-agent\n100\n\n;; Note the following happens asynchronously in a thread\n;; pool\nuser=> (send my-agent + 100)\n#<Agent@5afc0f5: 200>\n\n;; Assuming the addition has completed the value will\n;; now be updated when we look at it.\nuser=> @my-agent\n200"}],
   :id 5741,
   :name "send",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5741"},
  "clojure.contrib.http.agent/result"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 481,
   :name "result",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/481"},
  "swank.commands.basic/apropos-list-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4102,
   :name "apropos-list-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4102"},
  "incanter.processing/bezier-vertex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3259,
   :name "bezier-vertex",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3259"},
  "net.cgrand.enlive-html/let-select"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3918,
   :name "let-select",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3918"},
  "incanter.processing/open"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3003,
   :name "open",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3003"},
  "clojure.contrib.map-utils/safe-get-in"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 692,
   :name "safe-get-in",
   :ns "clojure.contrib.map-utils",
   :url "http://clojuredocs.org/v/692"},
  "incanter.distributions/*test-statistic-iterations*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2946,
   :name "*test-statistic-iterations*",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2946"},
  "clojure.contrib.io/with-in-reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 497,
   :name "with-in-reader",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/497"},
  "leiningen.test/test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3581,
   :name "test",
   :ns "leiningen.test",
   :url "http://clojuredocs.org/v/3581"},
  "clojure.repl/thread-stopper"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5978,
   :name "thread-stopper",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5978"},
  "clojure.contrib.datalog.magic/seed-predicate-for-insertion"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 243,
   :name "seed-predicate-for-insertion",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/243"},
  "clojure.contrib.math/lcm"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 55,
     :ns "clojure.contrib.math",
     :updated_at "2012-11-01 18:16:19.0",
     :function "lcm",
     :version 1,
     :created_at "2012-11-01 18:16:19.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user=> (lcm 2 3)\n6\n\nuser=> (lcm 2 4)\n4\n\nuser=> (reduce lcm [2 3 4 5])\n60"}],
   :id 703,
   :name "lcm",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/703"},
  "clojure.contrib.repl-ln/stream-repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1147,
   :name "stream-repl",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1147"},
  "ring.middleware.static/wrap-static"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2711,
   :name "wrap-static",
   :ns "ring.middleware.static",
   :url "http://clojuredocs.org/v/2711"},
  "clojure.contrib.dataflow/update-values"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 105,
   :name "update-values",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/105"},
  "clojure.contrib.test-is/deftest"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1369,
   :name "deftest",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1369"},
  "clojure.core/newline"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-01 18:23:36.0",
     :function "newline",
     :version 1,
     :created_at "2012-03-01 18:23:36.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; This is equivalent to System.out.println() in Java\nuser> (newline)\n\nnil"}],
   :id 5621,
   :name "newline",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5621"},
  "clojure.contrib.seq-utils/shuffle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1177,
   :name "shuffle",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1177"},
  "clojure.contrib.datalog.magic/adorn-query"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 238,
   :name "adorn-query",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/238"},
  "swank.rpc/encode-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4313,
   :name "encode-message",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4313"},
  "lancet/cvsversion"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3437,
   :name "cvsversion",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3437"},
  "clojure.core/spit"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "slurp",
     :updated_at "2011-08-25 12:50:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1753",
     :line "5365",
     :arglists_comp "[f & opts]",
     :url_friendly_name "slurp",
     :file "clojure/core.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "writer",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2142",
     :line "98",
     :arglists_comp "[x & opts]",
     :url_friendly_name "writer",
     :file "clojure/java/io.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "load-file",
     :updated_at "2011-08-21 16:43:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1984",
     :line nil,
     :arglists_comp "[name]",
     :url_friendly_name "load-file",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:21:26.0",
     :function "spit",
     :version 3,
     :created_at "2010-07-29 19:59:52.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (spit \"blubber.txt\" \"test\")\nnil\nuser=> (slurp \"blubber.txt\")\n\"test\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:49:36.0",
     :function "spit",
     :version 3,
     :created_at "2010-09-08 12:06:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (spit \"event.log\" \"test 1\\n\" :append true)\nnil\n\nuser=> (spit \"event.log\" \"test 2\\n\" :append true)\nnil\n\nuser=> (println (slurp \"event.log\"))\ntest 1\ntest 2\n\nnil\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-22 15:00:58.0",
     :function "spit",
     :version 2,
     :created_at "2012-04-18 17:41:33.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn append-to-file\n  \"Uses spit to append to a file specified with its name as a string, or\n   anything else that writer can take as an argument.  s is the string to\n   append.\"     \n  [file-name s]\n  (spit file-name s :append true))"}],
   :id 5769,
   :name "spit",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5769"},
  "circumspec.runner/report-tally"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3729,
   :name "report-tally",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3729"},
  "clojure.contrib.string/drop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1340,
   :name "drop",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1340"},
  "clojure.contrib.sql/insert-records"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1234,
   :name "insert-records",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1234"},
  "net.cgrand.enlive-html/but-node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3813,
   :name "but-node",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3813"},
  "incanter.internal/combine-with"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2879,
   :name "combine-with",
   :ns "incanter.internal",
   :url "http://clojuredocs.org/v/2879"},
  "clojure.contrib.generic/root-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 52,
   :name "root-type",
   :ns "clojure.contrib.generic",
   :url "http://clojuredocs.org/v/52"},
  "incanter.processing/DXF"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3186,
   :name "DXF",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3186"},
  "clojure.contrib.zip-filter.xml/xml1->"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1443,
   :name "xml1->",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1443"},
  "clojure.contrib.str-utils2/docodepoints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1279,
   :name "docodepoints",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1279"},
  "clojure.contrib.lazy-xml/parse-trim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 617,
   :name "parse-trim",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/617"},
  "swank.commands.basic/xref"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3988,
   :name "xref",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3988"},
  "clojure.contrib.logging/*logging-agent*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 651,
   :name "*logging-agent*",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/651"},
  "clojure.contrib.str-utils2/repeat"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1266,
   :name "repeat",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1266"},
  "incanter.processing/arc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3190,
   :name "arc",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3190"},
  "clojure.contrib.seq-utils/separate"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 77,
     :ns "clojure.contrib.seq-utils",
     :updated_at "2010-09-26 03:27:41.0",
     :function "separate",
     :version 3,
     :created_at "2010-07-27 17:20:43.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user=> (separate even? [1 2 3 4 5 6 7])\n[(2 4 6) (1 3 5 7)]\n\nuser=> (let [[big small] (separate #(> % 100) [1 200 50 765 1287])]\n           (println \"big:\" big)\n           (println \"small:\" small))\nbig: (200 765 1287)\nsmall: (1 50)\nnil\n"}],
   :id 1170,
   :name "separate",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1170"},
  "incanter.stats/tabulate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3289,
   :name "tabulate",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3289"},
  "clojure.core/doseq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "doall",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1806",
     :line "2456",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "doall",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dorun",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1526",
     :line "2442",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "dorun",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 6,
     :name "for",
     :updated_at "2011-05-10 18:07:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1548",
     :line "3582",
     :arglists_comp "[seq-exprs body-expr]",
     :url_friendly_name "for",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dotimes",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1587",
     :line "2508",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "dotimes",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-27 22:23:10.0",
     :function "doseq",
     :version 3,
     :created_at "2010-07-22 07:07:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (doseq [x [1 2 3] \n               y [1 2 3]] \n         (prn (* x y)))\n1\n2\n3\n2\n4\n6\n3\n6\n9\nnil\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-27 22:23:22.0",
     :function "doseq",
     :version 4,
     :created_at "2010-07-22 07:08:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (doseq [[x y] (map list [1 2 3] [1 2 3])] \n         (prn (* x y)))\n1\n4\n9\nnil\n\n;; where\nuser=> (map list [1 2 3] [1 2 3])\n((1 1) (2 2) (3 3))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-27 22:27:20.0",
     :function "doseq",
     :version 5,
     :created_at "2010-07-22 07:22:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (doseq [[[a b] [c d]] (map list {:1 1 :2 2} {:3 3 :4 4})] \n         (prn (* b d)))\n3\n8\nnil\n\n;; where\nuser=> (map list {:1 1 :2 2} {:3 3 :4 4})\n(([:1 1] [:3 3]) ([:2 2] [:4 4]))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-18 09:39:14.0",
     :function "doseq",
     :version 5,
     :created_at "2010-07-22 09:58:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (doseq [[k v] (map identity {:1 1 :2 2 :3 3})] \n         (prn k v))\n:1 1\n:2 2\n:3 3\nnil\n\n;; where\nuser=> (map identity {:1 1 :2 2 :3 3})\n([:1 1] [:2 2] [:3 3])\n\n;; or simply\nuser=> (doseq [[k v] {:1 1 :2 2 :3 3}]\n         (prn k v))\n:1 1\n:3 3\n:2 2\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-15 19:43:42.0",
     :function "doseq",
     :version 1,
     :created_at "2011-02-15 19:43:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; Multiple sequences results in a Cartesian cross of their values.\nuser=> (doseq [a [1 2]\n               b [3 4]]\n         (println a b))\n1 3\n1 4\n2 3\n2 4\nnil"}],
   :id 5476,
   :name "doseq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5476"},
  "clojure.contrib.mock.test-adapter/make-count-checker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 743,
   :name "make-count-checker",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/743"},
  "clojure.contrib.pprint/pprint-atom"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 934,
   :name "pprint-atom",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/934"},
  "clojure.reflect/->Method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5953,
   :name "->Method",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5953"},
  "circumspec.report.nested/indent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3708,
   :name "indent",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3708"},
  "clojure.contrib.str-utils2/partial"
  {:comments
   [{:namespace_id 86,
     :ns "clojure.contrib.str-utils2",
     :updated_at "2012-12-13 04:07:47.0",
     :user_id 794,
     :function "partial",
     :version "1.2.0",
     :created_at "2012-12-13 04:07:47.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "Where has this gone in the new modular contrib libraries?\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "partial",
     :updated_at "2010-11-14 13:52:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1951",
     :line "2003",
     :arglists_comp
     "[f arg1]|[f arg1 arg2]|[f arg1 arg2 arg3]|[f arg1 arg2 arg3 & more]",
     :url_friendly_name "partial",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 86,
     :ns "clojure.contrib.str-utils2",
     :updated_at "2012-04-19 19:03:28.0",
     :function "partial",
     :version 1,
     :created_at "2012-04-19 19:03:28.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(def s1 [[:000-00-0000 \"TYPE 1\" \"JACKSON\" \"FRED\"]\n         [:000-00-0001 \"TYPE 2\" \"SIMPSON\" \"HOMER\"]\n         [:000-00-0002 \"TYPE 4\" \"SMITH\" \"SUSAN\"]])\n\n(def cols [0 2 3])\n\n(defn f1 \n  [s1 col] \n  (map #(get-in s1 [% col] nil) (range (count s1))))\n\n(apply interleave (map (partial f1 s1) cols))\n(:000-00-0000 \"JACKSON\" \"FRED\" :000-00-0001 \"SIMPSON\" \"HOMER\" :000-00-0002 \"SMITH\" \"SUSAN\")"}],
   :id 1282,
   :name "partial",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1282"},
  "circumspec.contrib-mocking/make-arg-checker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3640,
   :name "make-arg-checker",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3640"},
  "incanter.processing/DEG_TO_RAD"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3072,
   :name "DEG_TO_RAD",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3072"},
  "leiningen.compile/get-by-pattern"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3509,
   :name "get-by-pattern",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3509"},
  "net.cgrand.enlive-html/prepend"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3889,
   :name "prepend",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3889"},
  "clojure.contrib.http.connection/start-http-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 486,
   :name "start-http-connection",
   :ns "clojure.contrib.http.connection",
   :url "http://clojuredocs.org/v/486"},
  "clojure.core/byte"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "byte-array",
     :updated_at "2011-08-21 13:51:48.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1993",
     :line "4152",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "byte-array",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "bytes",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1945",
     :line "4212",
     :arglists_comp "[xs]",
     :url_friendly_name "bytes",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "short",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1576",
     :line "2690",
     :arglists_comp "[x]",
     :url_friendly_name "short",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-22 16:54:09.0",
     :function "byte",
     :version 5,
     :created_at "2010-09-06 15:45:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x (byte-array [(byte 0x43) \n                           (byte 0x6c)\n                           (byte 0x6f)\n                           (byte 0x6a)\n                           (byte 0x75)\n                           (byte 0x72)\n                           (byte 0x65)\n                           (byte 0x21)]))\n#'user/x\n\nuser=> (String. x)\n\"Clojure!\"\n"}],
   :id 5398,
   :name "byte",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5398"},
  "clojure.core/replace"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-27 21:01:59.0",
     :user_id 14,
     :function "replace",
     :version "1.2.0",
     :created_at "2010-07-27 21:01:59.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The behaviour for vectors was a little strange for me. I'd say replace \"selects\" from \"smap\" the indexes which are in \"coll\""}],
   :see-alsos
   [{:namespace_id 118,
     :weight 1,
     :name "prewalk-replace",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/2561",
     :line "111",
     :arglists_comp "[smap form]",
     :url_friendly_name "prewalk-replace",
     :file "clojure/walk.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "postwalk-replace",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2559",
     :line "119",
     :arglists_comp "[smap form]",
     :url_friendly_name "postwalk-replace",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-06 00:41:55.0",
     :function "replace",
     :version 5,
     :created_at "2010-07-27 20:54:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (replace [:zeroth :first :second :third :fourth] [0 2 4 0])\n[:zeroth :second :fourth :zeroth]\n\nuser=> (replace [10 9 8 7 6] [0 2 4])\n[10 8 6]"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-06 00:42:31.0",
     :function "replace",
     :version 2,
     :created_at "2011-05-10 18:46:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (replace '{0 ZERO, 1 ONE, 2 TWO} '(This is the code â€” 0 1 2 0))\n(This is the code â€” ZERO ONE TWO ZERO)\n\nuser=> (replace {2 :two, 4 :four} [4 2 3 4 5 6 2])\n[:four :two 3 :four 5 6 :two]\n"}],
   :id 5725,
   :name "replace",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5725"},
  "clojure.main/repl-caught"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5914,
   :name "repl-caught",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5914"},
  "leiningen.help/help"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3537,
   :name "help",
   :ns "leiningen.help",
   :url "http://clojuredocs.org/v/3537"},
  "incanter.stats/permute"
  {:comments
   [{:namespace_id 159,
     :ns "incanter.stats",
     :updated_at "2010-07-24 18:24:16.0",
     :user_id 101,
     :function "permute",
     :version "1.2.3-SNAPSHOT",
     :created_at "2010-07-24 18:24:16.0",
     :library "incanter",
     :library_id 5,
     :body "Typo in documentation (perm x) should be (permute x)"}],
   :see-alsos [],
   :examples [],
   :id 3324,
   :name "permute",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3324"},
  "incanter.stats/sample-poisson"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3335,
   :name "sample-poisson",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3335"},
  "clojure.contrib.string/replace-char"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1313,
   :name "replace-char",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1313"},
  "clojure.string/reverse"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2011-06-12 17:25:11.0",
     :function "reverse",
     :version 2,
     :created_at "2010-12-09 09:39:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user> (reverse \"foo\")\n\"oof\""}
    {:namespace_id 345,
     :ns "clojure.string",
     :updated_at "2012-02-21 18:11:36.0",
     :function "reverse",
     :version 1,
     :created_at "2012-02-21 18:11:36.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; clojure.string/reverse correctly treats UTF-16 surrogate pairs\n;; as a unit, and does not reverse the 2 Java chars of the pair.  Good!\nuser=> (def s \"smily \\ud83d\\ude03.\")\n#'user/s\nuser=> (def x (str/reverse s))\n#'user/x\nuser=> (map #(format \"%04X\" (int %)) s)\n(\"0073\" \"006D\" \"0069\" \"006C\" \"0079\" \"0020\" \"D83D\" \"DE03\" \"002E\")\nuser=> (map #(format \"%04X\" (int %)) x)\n(\"002E\" \"D83D\" \"DE03\" \"0020\" \"0079\" \"006C\" \"0069\" \"006D\" \"0073\")\n"}],
   :id 6004,
   :name "reverse",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6004"},
  "net.licenser.sandbox.jvm/context"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5122,
   :name "context",
   :ns "net.licenser.sandbox.jvm",
   :url "http://clojuredocs.org/v/5122"},
  "incanter.charts/stacked-bar-chart*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2823,
   :name "stacked-bar-chart*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2823"},
  "incanter.symbolic/deriv-fn*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3379,
   :name "deriv-fn*",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3379"},
  "circumspec.story/run-with-story"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3755,
   :name "run-with-story",
   :ns "circumspec.story",
   :url "http://clojuredocs.org/v/3755"},
  "clojure.contrib.jmx/operation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 571,
   :name "operation",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/571"},
  "incanter.processing/text-descend"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3128,
   :name "text-descend",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3128"},
  "clojure.contrib.generic.comparison/>"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 402,
   :name ">",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/402"},
  "incanter.processing/curve-point"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3185,
   :name "curve-point",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3185"},
  "clojure.contrib.test-is/compose-fixtures"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "use-fixtures",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/2501",
     :line "641",
     :arglists_comp "",
     :url_friendly_name "use-fixtures",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "join-fixtures",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/2490",
     :line "667",
     :arglists_comp "[fixtures]",
     :url_friendly_name "join-fixtures",
     :file "clojure/test.clj"}],
   :examples [],
   :id 1393,
   :name "compose-fixtures",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1393"},
  "net.cgrand.xml/net.cgrand.xml.proxy$org.xml.sax.ext.DefaultHandler2$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3958,
   :name "net.cgrand.xml.proxy$org.xml.sax.ext.DefaultHandler2$0",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3958"},
  "clojure.contrib.datalog.literals/positive?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 223,
   :name "positive?",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/223"},
  "clojure.contrib.repl-utils/run"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 355,
   :name "run",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/355"},
  "clojure.core/error-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5491,
   :name "error-mode",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5491"},
  "clojure.contrib.test-is/assert-any"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1390,
   :name "assert-any",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1390"},
  "clojure.contrib.accumulators/empty-queue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 16,
   :name "empty-queue",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/16"},
  "clojure.contrib.test-is/testing-contexts-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1368,
   :name "testing-contexts-str",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1368"},
  "circumspec.report/error?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3695,
   :name "error?",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3695"},
  "net.cgrand.xml/tag"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3950,
   :name "tag",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3950"},
  "clojure.java.io/Coercions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5878,
   :name "Coercions",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5878"},
  "leiningen.repl/repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3579,
   :name "repl",
   :ns "leiningen.repl",
   :url "http://clojuredocs.org/v/3579"},
  "swank.core.server/*connections*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4280,
   :name "*connections*",
   :ns "swank.core.server",
   :url "http://clojuredocs.org/v/4280"},
  "clojure.test.junit/start-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6062,
   :name "start-case",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6062"},
  "net.cgrand.enlive-html/attr?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3916,
   :name "attr?",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3916"},
  "clojure.core/when-let"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-02 00:24:28.0",
     :user_id 41,
     :function "when-let",
     :version "1.2.0",
     :created_at "2011-03-02 00:24:28.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The difference between when-let and if-let is that when-let doesn't have an else clause and and also accepts multiple forms so you don't need to use a (do...)."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "if-let",
     :updated_at "2011-05-19 15:27:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1953",
     :line "1403",
     :arglists_comp "[bindings then]|[bindings then else & oldform]",
     :url_friendly_name "if-let",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "when",
     :updated_at "2011-07-27 13:21:24.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2050",
     :line "419",
     :arglists_comp "[test & body]",
     :url_friendly_name "when",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "when-not",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1657",
     :line "425",
     :arglists_comp "[test & body]",
     :url_friendly_name "when-not",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-16 19:52:16.0",
     :function "when-let",
     :version 4,
     :created_at "2010-08-11 12:12:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Very useful when working with sequences. Capturing the return value \n;; of `seq` brings a performance gain in subsequent `first`/`rest`/`next`\n;; calls. Also the block is guarded by `nil` punning.\n\n(defn drop-one\n  [coll]\n  (when-let [s (seq coll)]\n    (rest s)))\n\nuser=> (drop-one [1 2 3])\n(2 3)\nuser=> (drop-one [])\nnil\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:03:15.0",
     :function "when-let",
     :version 1,
     :created_at "2012-04-12 22:03:15.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5838,
   :name "when-let",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5838"},
  "clojure.contrib.dataflow/get-source-cells"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 122,
   :name "get-source-cells",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/122"},
  "clojure.contrib.repl-utils/get-source"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 339,
   :name "get-source",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/339"},
  "clojure.core/*print-dup*"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-08-06 19:46:24.0",
     :user_id 117,
     :function "*print-dup*",
     :version "1.2.0",
     :created_at "2010-08-06 19:46:24.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "It is sometimes preferable (depending on the size of the structure you're serializing) to wrap the `(with-out-writer ...)` inside a `(dorun (with-out-writer ...) nil)` in order to suppress the output at your REPL."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-22 19:37:09.0",
     :user_id 239,
     :function "*print-dup*",
     :version "1.2.0",
     :created_at "2010-12-22 19:33:46.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Note, I'm making changes to deserialize, there are a few typos."}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-22 19:34:18.0",
     :function "*print-dup*",
     :version 5,
     :created_at "2010-08-06 19:43:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; `*print-dup*` is very handy when we want to write clojure code/data\n;; to a file to read it in later.\n\n(defn serialize\n  \"Print a data structure to a file so that we may read it in later.\"\n  [data-structure #^String filename]\n  (with-out-writer\n    (java.io.File. filename)\n    (binding [*print-dup* true] (prn data-structure))))\n\n\n;; This allows us to then read in the structure at a later time, like so:\n(defn deserialize [filename]\n  (with-open [r (PushbackReader. (FileReader. filename))]\n    (read r)))\n\n\n(def *configuration-options* (deserialize \"config.clj\"))\n\nuser=> *configuration-options*\n{:name \"Fred\", :age \"23\"}\n"}],
   :id 5304,
   :name "*print-dup*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5304"},
  "incanter.stats/detabulate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3293,
   :name "detabulate",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3293"},
  "clojure.contrib.str-utils2/reverse"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1278,
   :name "reverse",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1278"},
  "incanter.core/choose"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2875,
   :name "choose",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2875"},
  "incanter.stats/pdf-neg-binomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3292,
   :name "pdf-neg-binomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3292"},
  "clojure.contrib.seq/reductions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1160,
   :name "reductions",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1160"},
  "clojure.contrib.datalog.database/datalog-database"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 172,
   :name "datalog-database",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/172"},
  "incanter.infix/defop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2855,
   :name "defop",
   :ns "incanter.infix",
   :url "http://clojuredocs.org/v/2855"},
  "incanter.processing/BOTTOM"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3065,
   :name "BOTTOM",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3065"},
  "net.cgrand.enlive-html/odd"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3867,
   :name "odd",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3867"},
  "incanter.stats/cosine-similarity"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3328,
   :name "cosine-similarity",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3328"},
  "clojure.core/with-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5841,
   :name "with-bindings",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5841"},
  "clojure.contrib.datalog/run-work-plan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 144,
   :name "run-work-plan",
   :ns "clojure.contrib.datalog",
   :url "http://clojuredocs.org/v/144"},
  "net.licenser.sandbox/state-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5123,
   :name "state-tester",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5123"},
  "clj-swing.list/list-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5219,
   :name "list-model",
   :ns "clj-swing.list",
   :url "http://clojuredocs.org/v/5219"},
  "lancet/tar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3415,
   :name "tar",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3415"},
  "incanter.processing/directional-light"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3051,
   :name "directional-light",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3051"},
  "clojure.core/*3"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "*1",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1746",
     :line "5020",
     :arglists_comp "",
     :url_friendly_name "*1",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "*2",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/1549",
     :line "5025",
     :arglists_comp "",
     :url_friendly_name "*2",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:54:45.0",
     :function "*3",
     :version 3,
     :created_at "2010-07-13 12:09:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> \"Hello!\"\n\"Hello!\"\n\nuser=> \"Hello World!\"\n\"Hello World!\"\n\nuser=> \"Hi Everyone!\"\n\"Hi Everyone!\"\n\nuser=> [*1 *2 *3]\n[\"Hi Everyone!\" \"Hello World!\" \"Hello!\"]\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:55:01.0",
     :function "*3",
     :version 3,
     :created_at "2010-07-13 12:12:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (range 5)\n(0 1 2 3 4)\nuser=> (last *1)\n4\nuser=> (last *2)\n4\nuser=> (last *3)\n4\n"}],
   :id 5287,
   :name "*3",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5287"},
  "swank.core/eval-from-control"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3973,
   :name "eval-from-control",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3973"},
  "lancet/antcall"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3438,
   :name "antcall",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3438"},
  "clojure.contrib.mock.test-adapter/expect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 742,
   :name "expect",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/742"},
  "clojure.contrib.mock/calls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5227,
   :name "calls",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5227"},
  "clojure.core/pop-thread-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5662,
   :name "pop-thread-bindings",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5662"},
  "clojure.contrib.error-kit/continue-with"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 277,
   :name "continue-with",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/277"},
  "clojure.core/quot"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "rem",
     :updated_at "2011-08-24 14:31:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1604",
     :line "1010",
     :arglists_comp "[num div]",
     :url_friendly_name "rem",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "mod",
     :updated_at "2011-08-24 14:32:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/2003",
     :line "2734",
     :arglists_comp "[num div]",
     :url_friendly_name "mod",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-13 07:45:55.0",
     :function "quot",
     :version 5,
     :created_at "2010-07-24 10:22:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; (quot m n) is the value of m/n, rounded towards 0 to the nearest integer.\n;; m, n need not be integers.\n\nuser=> (quot 10 3)\n3\n\nuser=> (quot 11 3)\n3\n\nuser=> (quot 12 3)\n4\n\nuser=> (quot -5.9 3)\n-1.0\n\nuser=> (quot 10 -3)\n-3\n\nuser=> (quot 15 0)\nArithmeticException / by zero  clojure.lang.Numbers.quotient (Numbers.java:1764)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-17 16:15:27.0",
     :function "quot",
     :version 2,
     :created_at "2011-09-17 16:14:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; note that the \"/\" function and the quot function are not equivalent\n\nuser=> (= (/ 4 2) (quot 4 2))\ntrue\n\nuser=> (= (/ 3 2) (quot 3 2))\nfalse\n"}],
   :id 5688,
   :name "quot",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5688"},
  "net.cgrand.enlive-html/only-of-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3817,
   :name "only-of-type",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3817"},
  "clj-ssh.ssh/ssh"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1475,
   :name "ssh",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1475"},
  "clojure.contrib.io/with-out-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 521,
   :name "with-out-writer",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/521"},
  "clojure.contrib.test-is/*load-tests*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1396,
   :name "*load-tests*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1396"},
  "incanter.core/asin"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2911,
   :name "asin",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2911"},
  "clojure.core/with-local-vars"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-08 15:24:13.0",
     :function "with-local-vars",
     :version 1,
     :created_at "2012-03-08 15:24:13.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; with-local-vars allows you to write more imperative-style code, for cases\n;; where you really want to.  factorial isn't a case where it helps, but\n;; it is short and familiar.  Note that (var-get acc) can be abbreviated\n;; as @acc\nuser=> (defn factorial [x]\n         (with-local-vars [acc 1, cnt x]\n           (while (> @cnt 0)\n             (var-set acc (* @acc @cnt))\n             (var-set cnt (dec @cnt)))\n           @acc))\n#'user/factorial\nuser=> (factorial 7)\n5040\n"}],
   :id 5845,
   :name "with-local-vars",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5845"},
  "clojure.pprint/*print-miser-width*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5924,
   :name "*print-miser-width*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5924"},
  "incanter.charts/pie-chart*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2825,
   :name "pie-chart*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2825"},
  "clojure.contrib.generic.math-functions/abs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 413,
   :name "abs",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/413"},
  "leiningen.core/task-not-found"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3525,
   :name "task-not-found",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3525"},
  "clojure.contrib.string/codepoints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1325,
   :name "codepoints",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1325"},
  "clojure.contrib.http.agent/buffer-bytes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 483,
   :name "buffer-bytes",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/483"},
  "clojure.contrib.miglayout/components"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 709,
   :name "components",
   :ns "clojure.contrib.miglayout",
   :url "http://clojuredocs.org/v/709"},
  "leiningen.compile/native-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3515,
   :name "native-names",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3515"},
  "swank.util.concurrent.thread/thread-alive?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4058,
   :name "thread-alive?",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4058"},
  "clojure.contrib.monadic-io-streams/skip-chars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 761,
   :name "skip-chars",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/761"},
  "clojure.contrib.complex-numbers/complex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 53,
   :name "complex",
   :ns "clojure.contrib.complex-numbers",
   :url "http://clojuredocs.org/v/53"},
  "clojure.contrib.error-kit/raise"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 292,
   :name "raise",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/292"},
  "clj-ssh.ssh/connected?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1482,
   :name "connected?",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1482"},
  "clj-swing.frame/frame"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5215,
   :name "frame",
   :ns "clj-swing.frame",
   :url "http://clojuredocs.org/v/5215"},
  "clojure.core/nthnext"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 06:58:58.0",
     :user_id 67,
     :function "nthnext",
     :version "1.2.0",
     :created_at "2011-05-25 05:01:52.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "`nthnext` is similar to `drop`.\nBut `nthnext` is <i>eager</i>, while `drop` is <i>lazy</i>.<p>\nAlso parameters are in opposite order."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "nth",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/1851",
     :line "740",
     :arglists_comp "[coll index]|[coll index not-found]",
     :url_friendly_name "nth",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2018",
     :line "2172",
     :arglists_comp "[n coll]",
     :url_friendly_name "drop",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 1,
     :name "nthrest",
     :updated_at "2012-06-04 06:36:54.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:08:31.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5644",
     :line "2755",
     :arglists_comp "[coll n]",
     :url_friendly_name "nthrest",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:00:10.0",
     :function "nthnext",
     :version 3,
     :created_at "2010-08-05 11:42:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (nthnext (range 10) 3)\n(3 4 5 6 7 8 9)\n\nuser=> (nthnext [] 3)\nnil\n\n"}],
   :id 5643,
   :name "nthnext",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5643"},
  "clojure.string/upper-case"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "lower-case",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2470",
     :line "163",
     :arglists_comp "[s]",
     :url_friendly_name "lower-case",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "capitalize",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/2482",
     :line "146",
     :arglists_comp "[s]",
     :url_friendly_name "capitalize",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2012-03-28 09:21:50.0",
     :function "upper-case",
     :version 3,
     :created_at "2010-08-20 10:16:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.string/upper-case \"MiXeD cAsE\")\n\"MIXED CASE\""}],
   :id 6011,
   :name "upper-case",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6011"},
  "clojure.contrib.monadic-io-streams/println"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "print",
     :updated_at "2010-12-29 17:53:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1668",
     :line "2857",
     :arglists_comp "[& more]",
     :url_friendly_name "print",
     :file "clojure/core.clj"}],
   :examples [],
   :id 766,
   :name "println",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/766"},
  "clojure.zip/rights"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6118,
   :name "rights",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6118"},
  "clojure.java.browse/browse-url"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 102,
     :ns "clojure.java.browse",
     :updated_at "2010-09-26 02:42:29.0",
     :function "browse-url",
     :version 3,
     :created_at "2010-08-31 09:05:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (use 'clojure.java.browse)\n\nuser=> (browse-url \"http://clojuredocs.org\")\n"}],
   :id 5877,
   :name "browse-url",
   :ns "clojure.java.browse",
   :url "http://clojuredocs.org/v/5877"},
  "clojure.contrib.str-utils2/lower-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1265,
   :name "lower-case",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1265"},
  "clj-ssh.ssh/*default-identity*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1468,
   :name "*default-identity*",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1468"},
  "lancet/macrodef"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3495,
   :name "macrodef",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3495"},
  "clojure.contrib.seq/partition-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1163,
   :name "partition-all",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1163"},
  "clojure.core/inc'"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5554,
   :name "inc'",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5554"},
  "swank.loader/clj-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4286,
   :name "clj-file?",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4286"},
  "leiningen.pom/make-pom-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3560,
   :name "make-pom-properties",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3560"},
  "clojure.contrib.dataflow/build-dataflow"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 135,
   :name "build-dataflow",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/135"},
  "clojure.contrib.generic.math-functions/atan2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 418,
   :name "atan2",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/418"},
  "clojure.contrib.string/replace-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1324,
   :name "replace-by",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1324"},
  "net.cgrand.enlive-html/union"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3814,
   :name "union",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3814"},
  "incanter.core/cos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2924,
   :name "cos",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2924"},
  "incanter.core/half-vectorize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2728,
   :name "half-vectorize",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2728"},
  "swank.commands.inspector/reset-inspector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4231,
   :name "reset-inspector",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4231"},
  "clojure.contrib.pprint/level-exceeded"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 856,
   :name "level-exceeded",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/856"},
  "incanter.core/gamma"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2862,
   :name "gamma",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2862"},
  "clojure.test.tap/print-tap-diagnostic"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6068,
   :name "print-tap-diagnostic",
   :ns "clojure.test.tap",
   :url "http://clojuredocs.org/v/6068"},
  "leiningen.core/aliases"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3524,
   :name "aliases",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3524"},
  "circumspec.context/describe"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3629,
   :name "describe",
   :ns "circumspec.context",
   :url "http://clojuredocs.org/v/3629"},
  "incanter.stats/discordant-pairs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3314,
   :name "discordant-pairs",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3314"},
  "swank.loader/all-files-in-directory"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4297,
   :name "all-files-in-directory",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4297"},
  "clojure.core/keep-indexed"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "map-indexed",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1974",
     :line "5618",
     :arglists_comp "[f coll]",
     :url_friendly_name "map-indexed",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "keep",
     :updated_at "2011-05-25 03:28:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2108",
     :line "5638",
     :arglists_comp "[f coll]",
     :url_friendly_name "keep",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-05-16 10:29:13.0",
     :function "keep-indexed",
     :version 4,
     :created_at "2010-08-20 08:41:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (keep-indexed #(if (odd? %1) %2) [:a :b :c :d :e])\n(:b :d)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-12 10:07:17.0",
     :function "keep-indexed",
     :version 1,
     :created_at "2010-12-12 10:07:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (keep-indexed #(if (pos? %2) %1) [-9 0 29 -7 45 3 -8])\n(2 4 5)\n;; f takes 2 args: 'index' and 'value' where index is 0-based\n;; when f returns nil the index is not included in final result\nuser=> (keep-indexed (fn [idx v]\n                       (if (pos? v) idx)) [-9 0 29 -7 45 3 -8])\n(2 4 5)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-27 10:03:29.0",
     :function "keep-indexed",
     :version 3,
     :created_at "2011-05-25 03:31:08.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn position [x coll & {:keys [from-end all] :or {from-end false all false}}]\n  (cond\n   (true? from-end) (last (keep-indexed #(if (= x %2) %1) coll))\n   (true? all) (keep-indexed #(if (= x %2) %1) coll)\n   :else (first (keep-indexed #(if (= x %2) %1) coll))))\n\nuser> (position [1 1] [[1 0][1 1][2 3][1 1]])\n1\nuser> (position [1 1] [[1 0][1 1][2 3][1 1]] :from-end true)\n3\nuser> (position [1 1] [[1 0][1 1][2 3][1 1]] :all true)\n(1 3)\n\nuser> (def foo (shuffle (range 10)))\n#'user/foo\nuser> foo\n(5 8 9 1 2 7 0 6 3 4)\nuser> (position 5 foo)\n0\nuser> (position 0 foo)\n6"}],
   :id 5572,
   :name "keep-indexed",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5572"},
  "clojure.contrib.generic.comparison/>="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 404,
   :name ">=",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/404"},
  "clojure.contrib.pprint.pretty-writer/get-miser-width"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1017,
   :name "get-miser-width",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/1017"},
  "incanter.charts/set-background-default"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2826,
   :name "set-background-default",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2826"},
  "clj-ssh.ssh/ssh-exec"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1469,
   :name "ssh-exec",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1469"},
  "circumspec.runner/run-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3726,
   :name "run-test",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3726"},
  "swank.core/eval-in-emacs-package"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3976,
   :name "eval-in-emacs-package",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3976"},
  "clojure.contrib.monads/monad-transformer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 788,
   :name "monad-transformer",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/788"},
  "clojure.contrib.swing-utils/menu-constructor-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1351,
   :name "menu-constructor-dispatch",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1351"},
  "clojure.core/defn"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "def",
     :updated_at "2011-08-16 10:30:10.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5268",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "def",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "defn-",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1771",
     :line "3823",
     :arglists_comp "[name & decls]",
     :url_friendly_name "defn-",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:18:32.0",
     :function "defn",
     :version 5,
     :created_at "2010-07-14 19:42:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (defn foo [a b c]\n\t    (* a b c))\n#'user/foo\nuser=> (foo 1 2 3)\n6\n\nuser=> (defn bar [a b & [c]]\n         (if c\n           (* a b c)\n           (* a b 100)))\n#'user/bar\nuser=> (bar 5 6)\n3000\nuser=> (bar 5 6 2)\n60\n\nuser=> (defn baz [a b & {:keys [c d] :or {c 10 d 20}}]\n         (* a b c d))\n#'user/baz\nuser=> (baz 2 3)\n1200\nuser=> (baz 2 3 :c 5)\n600\nuser=> (baz 2 3 :c 5 :d 6)\n180\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:18:44.0",
     :function "defn",
     :version 4,
     :created_at "2010-07-15 10:11:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (defn bar\n         ([a b]   (bar a b 100))\n         ([a b c] (* a b c)))\n#'user/bar\nuser=> (bar 5 6)\n3000\nuser=> (bar 5 6 2)\n60\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-10-01 00:26:40.0",
     :function "defn",
     :version 6,
     :created_at "2010-07-29 19:44:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; You can use destructuring to have keyword arguments. This would be a\n;; pretty verbose version of map (in an example a bit more verbose than\n;; the first above):\n\n(defn keyworded-map [& {function :function sequence :sequence}]\n  (map function sequence))\n\n;; You can call it like this:\n\nuser=> (keyworded-map :sequence [1 2 3] :function #(+ % 2))\n(3 4 5)\n\n\n;; The declaration can be shortened with \":keys\" if your local variables \n;; should be named in the same way as your keys in the map:\n\n(defn keyworded-map [& {:keys [function sequence]}]\n  (map function sequence))\n"}],
   :id 5453,
   :name "defn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5453"},
  "incanter.processing/DILATE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3064,
   :name "DILATE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3064"},
  "clojure.core/assoc"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-13 11:54:12.0",
     :user_id 652,
     :function "assoc",
     :version "1.3.0",
     :created_at "2012-11-13 11:54:12.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Here is a version that will create a vector when the key is numerical.\nThis may be useful instead of throwing an IndexOutOfBoundsException.\n\n<pre>\n(defn assoc-in-idx [m [k & ks] v]\n  (let [value (get m k (when (number? (first ks)) []))\n\tm (if (and (vector? m) (number? k) (-> m count (< k)))\n\t    (reduce (fn [m _] (conj m nil)) m (range (count m) k))\n\t    m)\n\tv (if ks\n\t    (assoc-in-idx value ks v)\n\t    v)]\n    (assoc m k v)))\n</pre>\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc-in",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1757",
     :line "4939",
     :arglists_comp "[m [k & ks] v]",
     :url_friendly_name "assoc-in",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dissoc",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2091",
     :line "1164",
     :arglists_comp "[map]|[map key]|[map key & ks]",
     :url_friendly_name "dissoc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "merge",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/2101",
     :line "2268",
     :arglists_comp "[& maps]",
     :url_friendly_name "merge",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-08 18:04:54.0",
     :function "assoc",
     :version 4,
     :created_at "2010-07-12 09:55:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (assoc {} :key1 \"value\" :key2 \"another value\")\n{:key2 \"another value\", :key1 \"value\"}\n\nuser=> (assoc {:key1 \"old value1\" :key2 \"value2\"} :key1 \"value1\" :key3 \"value3\")\n{:key3 \"value3\", :key2 \"value2\", :key1 \"value1\"}\n\nuser=> (assoc [1 2 3] 0 10)\n[10 2 3]\n\nuser=> (assoc [1 2 3] 3 10)\n[1 2 3 10]\n\nuser=> (assoc [1 2 3] 4 10)\njava.lang.IndexOutOfBoundsException (NO_SOURCE_FILE:0)\n\n\n\n\n;; From http://clojure-examples.appspot.com/clojure.core/assoc"}],
   :id 5366,
   :name "assoc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5366"},
  "incanter.infix/formula"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2965,
   :name "formula",
   :ns "incanter.infix",
   :url "http://clojuredocs.org/v/2965"},
  "clojure.contrib.string/ltrim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1329,
   :name "ltrim",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1329"},
  "clojure.contrib.jmx/read"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 557,
   :name "read",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/557"},
  "clojure.contrib.logging/impl-get-log"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 629,
   :name "impl-get-log",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/629"},
  "lancet/loadproperties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3414,
   :name "loadproperties",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3414"},
  "clojure.contrib.mock/less-than"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5245,
   :name "less-than",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5245"},
  "incanter.core/symmetric-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2729,
   :name "symmetric-matrix",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2729"},
  "swank.util.java/instance-methods"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4135,
   :name "instance-methods",
   :ns "swank.util.java",
   :url "http://clojuredocs.org/v/4135"},
  "incanter.censored/censored-mean-lower"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2756,
   :name "censored-mean-lower",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2756"},
  "incanter.symbolic/chain-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3378,
   :name "chain-list",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3378"},
  "incanter.core/prod"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2913,
   :name "prod",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2913"},
  "net.cgrand.enlive-html/remove-class"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3920,
   :name "remove-class",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3920"},
  "clojure.main/stack-element-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5921,
   :name "stack-element-str",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5921"},
  "clojure.zip/vector-zip"
  {:comments [],
   :see-alsos
   [{:namespace_id 120,
     :weight 0,
     :name "seq-zip",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2594",
     :line "35",
     :arglists_comp "[root]",
     :url_friendly_name "seq-zip",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "xml-zip",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/2595",
     :line "53",
     :arglists_comp "[root]",
     :url_friendly_name "xml-zip",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "next",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/2579",
     :line "230",
     :arglists_comp "[loc]",
     :url_friendly_name "next",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "end?",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/2586",
     :line "258",
     :arglists_comp "[loc]",
     :url_friendly_name "end_q",
     :file "clojure/zip.clj"}],
   :examples
   [{:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2011-10-31 09:53:26.0",
     :function "vector-zip",
     :version 3,
     :created_at "2011-10-30 21:55:44.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "\n(require '[clojure.zip :as zip])\n\n(defn zip-map [f loc]\n  \" Map f over every node of the zipper.\n    The function received has the form (f node-value loc),\n    the node value and its location\"\n  (loop [z loc]\n    (if (zip/end? z)\n      (zip/root z) ; perhaps you can call zip/seq-zip or zip/vector-zip?\n      (recur (zip/next (zip/edit z f z))))))\n\n;; Multiply by 100 every node in the tree\nuser=> (zip-map (fn [n nx] (if (vector? n) n (* n 100) )) (vector-zip '[5 [10 20 30] [1 2 3] ]))\n;; Be careful! the returned result by zip/root is not a zipper anymore!\n[500 [1000 2000 3000] [100 200 300]]\n"}],
   :id 6122,
   :name "vector-zip",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6122"},
  "clojure.contrib.seq-utils/frequencies"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1176,
   :name "frequencies",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1176"},
  "incanter.charts/add-pointer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2792,
   :name "add-pointer",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2792"},
  "clojure.contrib.jmx.Bean/generate-mbean-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 580,
   :name "generate-mbean-info",
   :ns "clojure.contrib.jmx.Bean",
   :url "http://clojuredocs.org/v/580"},
  "clojure.contrib.string/tail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1344,
   :name "tail",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1344"},
  "swank.commands/slime-fn-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3968,
   :name "slime-fn-map",
   :ns "swank.commands",
   :url "http://clojuredocs.org/v/3968"},
  "swank.core.connection/with-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4197,
   :name "with-connection",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4197"},
  "circumspec.watch/test-namespaces-for-changed-source-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3786,
   :name "test-namespaces-for-changed-source-namespaces",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3786"},
  "incanter.processing/DELETE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3067,
   :name "DELETE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3067"},
  "clojure.contrib.find-namespaces/ns-decl?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 304,
   :name "ns-decl?",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/304"},
  "clojure.contrib.mock.test-adapter/times"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 730,
   :name "times",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/730"},
  "incanter.charts/set-theme-default"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2802,
   :name "set-theme-default",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2802"},
  "clojure.core/doall"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-10 13:13:32.0",
     :user_id 653,
     :function "doall",
     :version "1.3.0",
     :created_at "2012-07-10 13:13:20.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Shouldn't we use seq instead of coll in the function signature since we should really pass a sequence?"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "dorun",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1526",
     :line "2442",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "dorun",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 5,
     :name "doseq",
     :updated_at "2011-02-15 19:43:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1534",
     :line "2384",
     :arglists_comp "[seq-exprs & body]",
     :url_friendly_name "doseq",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:23:55.0",
     :function "doall",
     :version 4,
     :created_at "2010-07-30 20:51:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Nothing is printed because map returns a lazy-seq\nuser=> (def foo (map println [1 2 3]))\n#'user/foo\n\n;; doall forces the seq to be realized\nuser=> (def foo (doall (map println [1 2 3])))\n1\n2\n3\n#'user/foo\n\n;; where\n(doall (map println [1 2 3]))\n1\n2\n3\n(nil nil nil)"}],
   :id 5474,
   :name "doall",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5474"},
  "incanter.processing/ARGB"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2993,
   :name "ARGB",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2993"},
  "circumspec.for-all/list-of"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3674,
   :name "list-of",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3674"},
  "clojure.contrib.mock.test-adapter/incorrect-invocation-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 751,
   :name "incorrect-invocation-count",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/751"},
  "clojure.core/await"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "await-for",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/2107",
     :line "2492",
     :arglists_comp "[timeout-ms & agents]",
     :url_friendly_name "await-for",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 01:07:57.0",
     :function "await",
     :version 4,
     :created_at "2010-09-05 06:33:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(def *agnt* (agent {}))\n\nuser=> (send-off *agnt* (fn [state] \n                          (Thread/sleep 10000)\n                          (assoc state :done true)))\n#&lt;Agent@5db18235: {}&gt;\n\nuser=> (await *agnt*) ; blocks till the agent action is finished\nnil"}],
   :id 5371,
   :name "await",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5371"},
  "clojure.contrib.test-is/find-symbols"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1376,
   :name "find-symbols",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1376"},
  "clojure.contrib.monads/m-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 776,
   :name "m-map",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/776"},
  "clojure.contrib.trace/*trace-depth*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1408,
   :name "*trace-depth*",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1408"},
  "clojure.core/update-proxy"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-17 13:28:11.0",
     :function "update-proxy",
     :version 1,
     :created_at "2010-11-17 13:28:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; from http://groups.google.com/group/clojure/msg/71702435ccd1d189\nuser> (import java.util.Date)\njava.util.Date\n\nuser> (def d (proxy [Date] [] (toString [] \"hello\")))\n#'user/d\n\nuser> d\n#<Date$0 hello>\n\nuser> (.toString d)\n\"hello\"\n\nuser> (.toGMTString d)\n\"17 Nov 2010 12:57:28 GMT\"\n\nuser> (update-proxy d {\"toGMTString\" (fn [this] \"goodbye\")})\nnil\n\nuser> (.toGMTString d)\n\"goodbye\" "}],
   :id 5824,
   :name "update-proxy",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5824"},
  "swank.commands.contrib.swank-arglists/variable-desc-for-echo-area"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4159,
   :name "variable-desc-for-echo-area",
   :ns "swank.commands.contrib.swank-arglists",
   :url "http://clojuredocs.org/v/4159"},
  "clojure.contrib.zip-filter/right-locs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1436,
   :name "right-locs",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1436"},
  "swank.commands.basic/load-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4093,
   :name "load-file",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4093"},
  "clojure.core/send-off"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "send",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1842",
     :line "1583",
     :arglists_comp "[a f & args]",
     :url_friendly_name "send",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "shutdown-agents",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1924",
     :line "1716",
     :arglists_comp "[]",
     :url_friendly_name "shutdown-agents",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-10-03 21:17:42.0",
     :function "send-off",
     :version 4,
     :created_at "2010-10-01 01:42:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def my-agent (agent \"\"))\n#'user/my-agent\nuser=> @my-agent\n\"\"\n\n;; Note the following happens asynchronously in a thread\n;; pool\nuser=> (send my-agent #(slurp %2) \"file.txt\")\n#<Agent@13c6641: \"\">\n\n;; Assuming the action has been invoked the value will\n;; now be updated when we look at it.\nuser=> @my-agent\n\"file contents\"\n\n"}],
   :id 5742,
   :name "send-off",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5742"},
  "clojure.contrib.datalog.literals/conditional-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 230,
   :name "conditional-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/230"},
  "incanter.processing/MAX_INT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3214,
   :name "MAX_INT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3214"},
  "incanter.processing/spotlight"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3219,
   :name "spotlight",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3219"},
  "clojure.contrib.logging/*allow-direct-logging*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 628,
   :name "*allow-direct-logging*",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/628"},
  "clojure.core/get"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "map-indexed",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1974",
     :line "5618",
     :arglists_comp "[f coll]",
     :url_friendly_name "map-indexed",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:26:28.0",
     :function "get",
     :version 3,
     :created_at "2010-07-28 05:50:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (get [1 2 3] 1)\n2\nuser=> (get [1 2 3] 5)\nnil\nuser=> (get {:a 1 :b 2} :b)\n2\nuser=> (get {:a 1 :b 2} :z \"missing\")\n\"missing\"\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-19 06:57:38.0",
     :function "get",
     :version 1,
     :created_at "2011-12-19 06:57:38.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; to get an index of the element of a vector, use .indexOf\nuser=> (def v [\"one\" \"two\" \"three\" \"two\"])\n#'user/v\n\nuser=> (.indexOf v \"two\")\n1\n\nuser=> (.indexOf v \"foo\")\n-1\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-19 09:11:43.0",
     :function "get",
     :version 1,
     :created_at "2011-12-19 09:11:43.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (get (System/getenv) \"SHELL\")\n\"/bin/bash\"\n\nuser=> (get (System/getenv) \"PATH\")\n\"/usr/local/bin:/sbin:/usr/sbin:/usr/bin:/bin\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-23 01:45:56.0",
     :function "get",
     :version 1,
     :created_at "2012-06-23 01:45:56.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; 'get' is not the only option\nuser=> (def my-map {:a 1 :b 2 :c 3})\n\n;; maps act like functions\nuser=> (my-map :a)\n1\n\n;; even keys act like functions\nuser=> (:b my-map)\n2"}],
   :id 5535,
   :name "get",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5535"},
  "clojure.contrib.dataflow/print-dataflow"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 121,
   :name "print-dataflow",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/121"},
  "clojure.contrib.types/match"
  {:comments
   [{:namespace_id 93,
     :ns "clojure.contrib.types",
     :updated_at "2011-09-26 16:57:54.0",
     :user_id 393,
     :function "match",
     :version "1.2.0",
     :created_at "2011-09-26 16:57:54.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "This function isn't particularly useful for matching the length of lists or vectors. For example:\n\n<pre>\n(clojure.contrib.types/match [] [a] (prn a) _ (prn \"fail\"))\n</pre>\n\nFires an IndexOutOfBoundsException, which defeats the point of using pattern matching in the first place. If you include a '[]' clause before the single element clause - it matches that one erroneously so it doesn't match the correct pattern. For example:\n\n<pre>\n(clojure.contrib.types/match [\"hi\"] [] (prn \"nothing\") [a] (prn a) _ (prn \"fail\"))\n</pre>\n\nprints \"nothing\" when it should print \"hi\"\n"}],
   :see-alsos [],
   :examples [],
   :id 1419,
   :name "match",
   :ns "clojure.contrib.types",
   :url "http://clojuredocs.org/v/1419"},
  "incanter.processing/REPLACE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3080,
   :name "REPLACE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3080"},
  "incanter.processing/QUARTER_PI"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3125,
   :name "QUARTER_PI",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3125"},
  "clojure.contrib.datalog.database/datalog-relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 174,
   :name "datalog-relation",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/174"},
  "clojure.contrib.greatest-least/greatest-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 445,
   :name "greatest-by",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/445"},
  "incanter.charts/clear-background"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2788,
   :name "clear-background",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2788"},
  "net.cgrand.xml/element"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3949,
   :name "element",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3949"},
  "circumspec/describe"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3589,
   :name "describe",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3589"},
  "incanter.processing/model-x"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3220,
   :name "model-x",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3220"},
  "incanter.censored/censored-mean-upper"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2752,
   :name "censored-mean-upper",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2752"},
  "incanter.charts/sliders"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2822,
   :name "sliders",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2822"},
  "clojure.contrib.stream-utils/stream-drop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1310,
   :name "stream-drop",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1310"},
  "incanter.core/dim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2898,
   :name "dim",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2898"},
  "net.licenser.sandbox.tester/find-bad-forms"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5145,
   :name "find-bad-forms",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5145"},
  "clojure.contrib.swing-utils/do-swing-and-wait"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1360,
   :name "do-swing-and-wait",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1360"},
  "incanter.mongodb/fetch-dataset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2972,
   :name "fetch-dataset",
   :ns "incanter.mongodb",
   :url "http://clojuredocs.org/v/2972"},
  "clj-swing.panel/split-vertical"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5186,
   :name "split-vertical",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5186"},
  "net.licenser.sandbox.matcher/namespace-matcher"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5115,
   :name "namespace-matcher",
   :ns "net.licenser.sandbox.matcher",
   :url "http://clojuredocs.org/v/5115"},
  "net.cgrand.enlive-html/comment-node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3895,
   :name "comment-node",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3895"},
  "clojure.contrib.gen-html-docs/generate-documentation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 359,
   :name "generate-documentation",
   :ns "clojure.contrib.gen-html-docs",
   :url "http://clojuredocs.org/v/359"},
  "lancet/fileset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3455,
   :name "fileset",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3455"},
  "lancet/ant-concat"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3491,
   :name "ant-concat",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3491"},
  "incanter.core/trans"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2731,
   :name "trans",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2731"},
  "swank.core/control-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4017,
   :name "control-loop",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4017"},
  "lancet/gzip"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3462,
   :name "gzip",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3462"},
  "clojure.contrib.miglayout.internal/parse-item-constraints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 716,
   :name "parse-item-constraints",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/716"},
  "incanter.stats/concordant?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3349,
   :name "concordant?",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3349"},
  "clojure.core/not="
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:04:31.0",
     :function "not=",
     :version 5,
     :created_at "2010-08-02 12:41:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (not= 1 1)\nfalse\n\nuser=> (not= 1 2)\ntrue\n\nuser=> (not= true true)\nfalse\n\nuser=> (not= true false)\ntrue\n\nuser=> (not= true true true true)\nfalse\n\nuser=> (not= true true false true)\ntrue\n"}],
   :id 5630,
   :name "not=",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5630"},
  "clojure.contrib.condition/*full-stack-traces*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 61,
   :name "*full-stack-traces*",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/61"},
  "clojure.contrib.sql/update-or-insert-values"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1254,
   :name "update-or-insert-values",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1254"},
  "incanter.processing/load-pixels"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3013,
   :name "load-pixels",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3013"},
  "clojure.contrib.test-is/try-expr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1377,
   :name "try-expr",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1377"},
  "incanter.infix/infix-to-prefix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2904,
   :name "infix-to-prefix",
   :ns "incanter.infix",
   :url "http://clojuredocs.org/v/2904"},
  "lancet/-main"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3456,
   :name "-main",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3456"},
  "incanter.processing/sketch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3062,
   :name "sketch",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3062"},
  "swank.commands.inspector/inspector-call-nth-action"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4229,
   :name "inspector-call-nth-action",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4229"},
  "clojure.contrib.seq-utils/group-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1182,
   :name "group-by",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1182"},
  "circumspec.contrib-mocking/once"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3649,
   :name "once",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3649"},
  "incanter.processing/LINUX"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3213,
   :name "LINUX",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3213"},
  "clojure.core/create-ns"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "remove-ns",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1687",
     :line "3189",
     :arglists_comp "[sym]",
     :url_friendly_name "remove-ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "find-ns",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1899",
     :line "3177",
     :arglists_comp "[sym]",
     :url_friendly_name "find-ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:24:53.0",
     :function "create-ns",
     :version 3,
     :created_at "2010-09-19 18:47:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; If you try this, you're doing it wrong\nuser=> (create-ns my-new-namespace)\njava.lang.Exception: Unable to resolve symbol: my-new-namespace in this context (NO_SOURCE_FILE:2)\n\n\n;; Same deal, if you try this, you're doing it wrong\nuser=> (create-ns \"my-new-namespace\")\njava.lang.ClassCastException: java.lang.String cannot be cast to clojure.lang.Symbol (NO_SOURCE_FILE:0)\n\n\n;; This is how you do it\nuser=> (create-ns 'my-new-namespace)\n#&lt;Namespace my-new-namespace&gt;\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:37:37.0",
     :function "create-ns",
     :version 6,
     :created_at "2010-09-19 18:59:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Let's create a namespace and check for our result\n;; the new namespace will be \"my-new-namespace\"\n\n;; obviously, it does not exist yet, so looking for it, finds nothing\nuser=> (find-ns 'my-new-namespace) \nnil\n\n;; let's create it\nuser=> (create-ns 'my-new-namespace)\n#&lt;Namespace my-new-namespace&gt;\n\n;; now searching for it again will have a result\nuser=> (find-ns 'my-new-namespace)\n#&lt;Namespace my-new-namespace&gt;\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:25:28.0",
     :function "create-ns",
     :version 5,
     :created_at "2010-09-21 17:05:08.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; You can create a namespace, not switch to it and still work in, by storing it\n\n;; create the namespace\nuser=> (def for-later-use (create-ns 'my-namespace))\n#'user/for-later-use\n\n;; assign a value for a variable\nuser=> (intern for-later-use 'my-var \"some value\")\n#'my-namespace/my-var\n;; notice how the \"for-later-use\" symbol has been evaluated to the namespace it represents\n\n;; check the new variable\nuser=> my-namespace/my-var\n\"some value\"\n\n;; you can also work on a namespace by using the its name\n;; (but quoting it) instead of the return of \"create-ns\"\nuser=> (intern 'my-namespace 'my-var \"some other value\")\n#'my-namespace/my-var\n\n;; check the new assignment and see what's changed\nuser=> my-namespace/my-var\n\"some other value\"\n"}],
   :id 5441,
   :name "create-ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5441"},
  "leiningen.pom/read-git-head"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3573,
   :name "read-git-head",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3573"},
  "incanter.processing/push-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3217,
   :name "push-matrix",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3217"},
  "incanter.processing/mask"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3192,
   :name "mask",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3192"},
  "clojure.contrib.repl-ln/set-repl-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1135,
   :name "set-repl-name",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1135"},
  "clojure.contrib.pprint/pprint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 969,
   :name "pprint",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/969"},
  "leiningen.new/new"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3561,
   :name "new",
   :ns "leiningen.new",
   :url "http://clojuredocs.org/v/3561"},
  "clojure.contrib.zip-filter.xml/text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1445,
   :name "text",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1445"},
  "clojure.contrib.json/pprint-json"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 595,
   :name "pprint-json",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/595"},
  "lancet/presetdef"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3433,
   :name "presetdef",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3433"},
  "clojure.test/set-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6038,
   :name "set-test",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6038"},
  "swank.core/eval-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3984,
   :name "eval-for-emacs",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3984"},
  "clojure.contrib.profile/with-profile-data"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1111,
   :name "with-profile-data",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1111"},
  "clojure.core/descendants"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 16:07:53.0",
     :function "descendants",
     :version 1,
     :created_at "2011-08-21 16:07:53.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; simple example a toy poodle is a poodle is a dog is an animal\n\nuser=> (derive ::dog ::animal)\nnil\nuser=> (derive ::poodle ::dog)\nnil\nuser=> (derive ::toy_poodle ::poodle)\nnil\nuser=> (descendants ::animal)\n#{:user/toy_poodle :user/poodle :user/dog}\nuser=>"}],
   :id 5466,
   :name "descendants",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5466"},
  "clojure.core/ffirst"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "fnext",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1908",
     :line "102",
     :arglists_comp "[x]",
     :url_friendly_name "fnext",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nfirst",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/2005",
     :line "96",
     :arglists_comp "[x]",
     :url_friendly_name "nfirst",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:24:29.0",
     :function "ffirst",
     :version 4,
     :created_at "2010-07-28 12:33:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (ffirst '([]))\nnil \n\nuser=> (ffirst ['(a b c) '(b a c)])\na \n\nuser=> (ffirst '([a b c] [b a c]))\na"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:24:43.0",
     :function "ffirst",
     :version 3,
     :created_at "2010-07-28 12:34:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (first {:b 2 :a 1 :c 3})\n[:b 2] \n\nuser=> (ffirst {:b 2 :a 1 :c 3})\n:b"}],
   :id 5502,
   :name "ffirst",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5502"},
  "clojure.contrib.mmap/mmap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 720,
   :name "mmap",
   :ns "clojure.contrib.mmap",
   :url "http://clojuredocs.org/v/720"},
  "clojure.core/defrecord"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-04-15 14:56:11.0",
     :user_id 292,
     :function "defrecord",
     :version "1.2.0",
     :created_at "2011-04-15 14:56:11.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "http://tech.puredanger.com/2010/11/23/implementing-java-interfaces-with-clojure-records/"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "deftype",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/1933",
     :line "324",
     :arglists_comp "[name [& fields] & opts+specs]",
     :url_friendly_name "deftype",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "defstruct",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/1601",
     :line "3115",
     :arglists_comp "[name & keys]",
     :url_friendly_name "defstruct",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defprotocol",
     :updated_at "2010-11-15 06:13:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2062",
     :line "576",
     :arglists_comp "[name & opts+sigs]",
     :url_friendly_name "defprotocol",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-12-03 16:32:42.0",
     :function "defrecord",
     :version 3,
     :created_at "2010-10-05 14:33:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; from Stu's examples:\n\n(defrecord Person [fname lname address])\n-> user.Person\n\n(defrecord Address [street city state zip])\n-> user.Address\n\n(def stu (->Person \"Stu\" \"Halloway\"\n           (->Address \"200 N Mangum\"\n                      \"Durham\"\n                      \"NC\"\n                      27701)))\n-> #'user/stu\n\n(:lname stu)\n-> \"Halloway\"\n\n(-> stu :address :city)\n-> \"Durham\"\n\n(assoc stu :fname \"Stuart\")\n-> #:user.Person{:fname \"Stuart\", :lname \"Halloway\", :address #:user.Address{:street \"200 N Mangum\", :city \"Durham\", :state \"NC\", :zip 27701}}\n\n(update-in stu [:address :zip] inc)\n-> #:user.Person{:fname \"Stu\", :lname \"Halloway\", :address #:user.Address{:street \"200 N Mangum\", :city \"Durham\", :state \"NC\", :zip 27702}}"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-12-03 16:33:07.0",
     :function "defrecord",
     :version 5,
     :created_at "2010-11-24 03:56:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This example shows how to implement a Java interface in defrecord.\n;; We'll implement FileNameMap (because it has a simple interface, \n;; not for its real purpose).  \n\n(import java.net.FileNameMap)\n-> java.net.FileNameMap\n\n;; Define a record named Thing with a single field a.  Implement\n;; FileNameMap interface and provide an implementation for the single\n;; method:  String getContentTypeFor(String fileName)\n(defrecord Thing [a]\n  FileNameMap\n    (getContentTypeFor [this fileName] (str a \"-\" fileName)))\n-> user.Thing\n\n;; construct an instance of the record\n(def thing (->Thing \"foo\"))\n-> #'user/thing\n\n;; check that the instance implements the interface\n(instance? FileNameMap thing)\n-> true\n\n;; get all the interfaces for the record type\n(map #(println %) (.getInterfaces Thing))\n-> java.net.FileNameMap\n-> clojure.lang.IObj\n-> clojure.lang.ILookup\n-> clojure.lang.IKeywordLookup\n-> clojure.lang.IPersistentMap\n-> java.util.Map\n-> java.io.Serializable\n\n;; actually call the method on the thing instance and pass \"bar\"\n(.getContentTypeFor thing \"bar\")\n-> \"foo-bar\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-03 16:33:31.0",
     :function "defrecord",
     :version 5,
     :created_at "2011-09-26 21:38:52.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; prepare a protocol\nuser=> (defprotocol Fun-Time (drinky-drinky [_]))\nFun-Time\n\n;; define a record and extend the previous protocol, implementing its function\nuser=> (defrecord Someone [nick-name preffered-drink] Fun-Time (drinky-drinky [_] (str nick-name \"(having \" preffered-drink \"): uuumm\")))\nuser.Someone\n;; NOTE how 'nick-name' and 'preffered-drink' are symbols that are not declared anywhere, they are 'provided' inside the function\n\n;; instantiate the protocol once and store it\nuser=> (def dude (->Someone \"belun\" \"daiquiri\"))\n#'user/dude\n\n;; use the function defined inside the protocol on the protocol instance\nuser=> (drinky-drinky dude)\n\"belun(having daiquiri): uuumm\"\n\n\n;; courtessy of Howard Lewis Ship - http://java.dzone.com/articles/changes-cascade-and-cautionary"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-03 16:33:55.0",
     :function "defrecord",
     :version 3,
     :created_at "2011-10-23 18:34:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; If you define a defrecord in one namespace and want to use it\n; from another, first require the namespace and then import\n; the record as a regular class.\n; The require+import order makes sense if you consider that first\n; the namespace has to be compiled--which generates a class for\n; the record--and then the generated class must be imported.\n; (Thanks to raek in #clojure for the explanations!)\n\n; Namespace 1 in \"my/data.clj\", where a defrecord is declared\n(ns my.data)\n\n(defrecord Employee [name surname])\n\n\n; Namescape 2 in \"my/queries.clj\", where a defrecord is used\n(ns my.queries\n  (:require my.data)\n  (:import [my.data Employee]))\n\n(println\n  \"Employees named Albert:\"\n  (filter #(= \"Albert\" (.name %))\n    [(->Employee \"Albert\" \"Smith\")\n     (->Employee \"John\" \"Maynard\")\n     (->Employee \"Albert\" \"Cheng\")]))\n  "}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-25 15:28:28.0",
     :function "defrecord",
     :version 1,
     :created_at "2012-04-25 15:28:28.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; The map->Recordclass form works only in Clojure 1.3 or higher\n\n(defrecord Foo [a b])\n\n(defrecord Bar [a b c])\n\n(defrecord Baz [a c])\n\n(def f (Foo. 10 20))\n(println f)\n-> #user.Foo{:a 10, :b 20}\n\n(def r (map->Bar (merge f {:c 30})))\n(println r)\n-> #user.Bar{:a 10, :b 20, :c 30}\n\n(def z (map->Baz (merge f {:c 30})))\n(println z)\n-> #user.Baz{:a 10, :c 30, :b 20}"}],
   :id 5457,
   :name "defrecord",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5457"},
  "clojure.core/number?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "num",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/2034",
     :line "2662",
     :arglists_comp "[x]",
     :url_friendly_name "num",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:25:04.0",
     :function "number?",
     :version 4,
     :created_at "2010-07-13 19:30:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (number? 1)\ntrue\nuser=> (number? 1.0)\ntrue\nuser=> (number? :a)\nfalse\nuser=> (number? nil)\nfalse\nuser=> (number? \"23\")\nfalse"}],
   :id 5646,
   :name "number?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5646"},
  "swank.util.clojure/symbol-name-parts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3997,
   :name "symbol-name-parts",
   :ns "swank.util.clojure",
   :url "http://clojuredocs.org/v/3997"},
  "clojure.contrib.seq-utils/rand-elt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1187,
   :name "rand-elt",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1187"},
  "clojure.contrib.sql/drop-table"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1229,
   :name "drop-table",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1229"},
  "incanter.charts/get-series"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2766,
   :name "get-series",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2766"},
  "clojure.java.io/as-file"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "file",
     :updated_at "2010-12-29 17:45:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/2140",
     :line "395",
     :arglists_comp "[arg]|[parent child]|[parent child & more]",
     :url_friendly_name "file",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 104,
     :ns "clojure.java.io",
     :updated_at "2012-03-28 09:25:31.0",
     :function "as-file",
     :version 3,
     :created_at "2010-09-20 23:34:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (use 'clojure.java.io)\nuser=> (.exists (as-file \"myfile.txt\"))\nfalse"}],
   :id 5880,
   :name "as-file",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5880"},
  "clojure.core/nthrest"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-21 03:20:40.0",
     :user_id 61,
     :function "nthrest",
     :version "1.3.0",
     :created_at "2012-12-21 03:13:01.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "This differs from clojure.core/drop in that it immediately drops the head of the seq, instead of doing so on the first call to first or seq."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "drop",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2018",
     :line "2172",
     :arglists_comp "[n coll]",
     :url_friendly_name "drop",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nthnext",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/2006",
     :line "3393",
     :arglists_comp "[coll n]",
     :url_friendly_name "nthnext",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nth",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/1851",
     :line "740",
     :arglists_comp "[coll index]|[coll index not-found]",
     :url_friendly_name "nth",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-04 06:36:54.0",
     :function "nthrest",
     :version 1,
     :created_at "2012-06-04 06:36:54.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body "user=> (nthrest (range 10) 5)\n(5 6 7 8 9)"}],
   :id 5644,
   :name "nthrest",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5644"},
  "clojure.contrib.http.agent/server-error?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 475,
   :name "server-error?",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/475"},
  "incanter.processing/SCREEN"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3197,
   :name "SCREEN",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3197"},
  "circumspec.test/=>-assertion?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3725,
   :name "=>-assertion?",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3725"},
  "clojure.core/loaded-libs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5590,
   :name "loaded-libs",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5590"},
  "clojure.contrib.io/default-streams-impl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 504,
   :name "default-streams-impl",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/504"},
  "clojure.string/lower-case"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "upper-case",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/2473",
     :line "157",
     :arglists_comp "[s]",
     :url_friendly_name "upper-case",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "capitalize",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/2482",
     :line "146",
     :arglists_comp "[s]",
     :url_friendly_name "capitalize",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2012-03-28 09:25:55.0",
     :function "lower-case",
     :version 3,
     :created_at "2010-08-20 10:17:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.string/lower-case \"MiXeD cAsE\")\n\"mixed case\""}],
   :id 6001,
   :name "lower-case",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6001"},
  "swank.commands.basic/source-location-for-frame"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4015,
   :name "source-location-for-frame",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4015"},
  "clojure.contrib.fcase/instance-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 303,
   :name "instance-case",
   :ns "clojure.contrib.fcase",
   :url "http://clojuredocs.org/v/303"},
  "clojure.core/max-key"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "max",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1903",
     :line "912",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "max",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:26:14.0",
     :function "max-key",
     :version 3,
     :created_at "2010-08-20 10:07:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (max-key count \"asd\" \"bsd\" \"dsd\" \"long word\")\n\"long word\""}],
   :id 5605,
   :name "max-key",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5605"},
  "clojure.contrib.fnmap.PersistentFnMap/-iterator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 320,
   :name "-iterator",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/320"},
  "incanter.core/$map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2926,
   :name "$map",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2926"},
  "circumspec.report.dot/report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3702,
   :name "report",
   :ns "circumspec.report.dot",
   :url "http://clojuredocs.org/v/3702"},
  "clojure.core/alter"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-27 22:19:13.0",
     :user_id 469,
     :function "alter",
     :version "1.3.0",
     :created_at "2011-12-27 20:56:19.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "I was fooling around with how exactly ref works with maps. Since the example here uses a vector, I thought maybe some of you might want to see a short example using a map.\n\nIn an aggregator I'm working on, I want to keep a record of how many sources and how many articles I've aggregated. Instead of using an atom for each, I'll reference a map called \"counts.\" Here's a simple little function that increments and returns the new value of the counter stored in the map:\n\n<pre> (def counts (ref {:articles 0 :sources 0}))\n(defn inc-ref [ref type]\n\"increment a map value with key type stored in ref\"\n\t(dosync\n\t (alter ref assoc type (inc (type @ref)))\n\t (type @ref)))\nuser&gt; (inc-ref counts :sources)\n=&gt;1\nuser&gt; counts\n=&gt;{:articles 0, :sources 1}\n</pre>\n\nand if you wanted to be able to add counters dynamically (one of the advantages of using a map in this context) you could redefine the function employ an optional argument, which if present instructs the function to create a new key-value pair using the name and initial value provided:\n\n<pre>(defn inc-ref [ref type & [init-value]]\n  (if init-value\n    (dosync\n     (alter ref assoc type init-value)\n     (type @ref))\n    (dosync\n     (alter ref assoc type (inc (name @ref)))\n     (type @ref))))\n\nuser&gt; (inc-ref counts :articles)\n=&gt;1\nuser&gt; (inc-ref counts :magazines 1)\n=&gt;1\nuser&gt; (:magazines @counts)\n=&gt;1</pre>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-11 11:15:24.0",
     :user_id 753,
     :function "alter",
     :version "1.3.0",
     :created_at "2012-10-11 11:15:24.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "In the previous example at row 07 has a reference to 'name @ref':\n <pre>(alter ref assoc type (inc (name @ref)))</pre>\nmaybe is incorrect and the correct mode  is:  \n<pre> (alter ref assoc type (inc (type @ref)))</pre>"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ref",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1760",
     :line "1723",
     :arglists_comp "[x]|[x & options]",
     :url_friendly_name "ref",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "commute",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1600",
     :line "1837",
     :arglists_comp "[ref fun & args]",
     :url_friendly_name "commute",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:26:56.0",
     :function "alter",
     :version 6,
     :created_at "2010-07-18 05:37:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; alter is a way to change the value of a reference.\n\n;; Here we're defining a ref named 'names' and setting its value to\n;; an empty vector.\nuser=> (def names (ref []))\n#'user/names\n\n;; A function to add a name to the vector (notice the meat's wrapped\n;; in a dosync\nuser=> (defn add-name [name]\n         (dosync\n           (alter names conj name)))\n#'user/add-name\n\nuser=> (add-name \"zack\")\n[\"zack\"]\n\nuser=> (add-name \"shelley\")\n[\"zack\" \"shelley\"]\n\n;; Notice that the var 'names' points to the reference that we created\nuser=> (println names)\n#<Ref@658ba380: [zack shelley]>\n\n;; To get the actual value of the ref, you use the '@' symbol, or deref\nuser=> (println @names)\n[zack shelley]\n\nuser=> (println (deref names))\n[zack shelley]"}],
   :id 5347,
   :name "alter",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5347"},
  "net.cgrand.enlive-html/nth-last-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3827,
   :name "nth-last-child",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3827"},
  "clj-swing.example/button-example"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5188,
   :name "button-example",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5188"},
  "incanter.processing/TWO_PI"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3199,
   :name "TWO_PI",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3199"},
  "clojure.contrib.json/print-json"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 601,
   :name "print-json",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/601"},
  "circumspec/it"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3595,
   :name "it",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3595"},
  "ring.util.test/string-input-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2719,
   :name "string-input-stream",
   :ns "ring.util.test",
   :url "http://clojuredocs.org/v/2719"},
  "clojure.contrib.test-is/with-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1401,
   :name "with-test",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1401"},
  "net.cgrand.enlive-html/html-resource"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3837,
   :name "html-resource",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3837"},
  "swank.core/add-cause-restarts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4096,
   :name "add-cause-restarts",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4096"},
  "clojure.walk/prewalk"
  {:comments [],
   :see-alsos
   [{:namespace_id 118,
     :weight 1,
     :name "postwalk",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/2558",
     :line "53",
     :arglists_comp "[f form]",
     :url_friendly_name "postwalk",
     :file "clojure/walk.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "prewalk-demo",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2553",
     :line "88",
     :arglists_comp "[form]",
     :url_friendly_name "prewalk-demo",
     :file "clojure/walk.clj"}
    {:namespace_id 118,
     :weight 1,
     :name "prewalk-replace",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/2561",
     :line "111",
     :arglists_comp "[smap form]",
     :url_friendly_name "prewalk-replace",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2011-11-15 23:32:29.0",
     :function "prewalk",
     :version 1,
     :created_at "2011-11-15 23:32:29.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; From http://stackoverflow.com/questions/8089074/idiomatically-iterating-over-a-2-or-higher-dimensional-sequence-in-clojure/8091544#8091544\n\n(def matrix [[1 2 3]\n             [4 5 6]\n             [7 8 9]])\n(use 'clojure.walk :only [prewalk])\n\n(prewalk #(if (number? %) (inc %) %) matrix)\n=> [[2 3 4] [5 6 7] [8 9 10]]"}],
   :id 6079,
   :name "prewalk",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6079"},
  "clojure.core/identical?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "=",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1885",
     :line "653",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "==",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1511",
     :line "898",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "==",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-26 10:05:15.0",
     :function "identical?",
     :version 5,
     :created_at "2010-07-13 19:20:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x 1)\n#'user/x\nuser=> (identical? x x)\ntrue\nuser=> (identical? x 1)\ntrue\nuser=> (identical? x 2)\nfalse\nuser=> (identical? x ((constantly 1) 8))\ntrue\nuser=> (identical? 'a 'a)\nfalse"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-21 17:40:49.0",
     :function "identical?",
     :version 1,
     :created_at "2012-02-21 17:40:49.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def x {:foo 1, :bar -3})\n#'user/x\nuser=> (def y {:foo 1, :bar -3})\n#'user/y\n;; Values are equal, but different objects were constructed\nuser=> (= x y)\ntrue\nuser=> (identical? x y)\nfalse\n"}],
   :id 5546,
   :name "identical?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5546"},
  "clojure.contrib.dataflow/dataflow"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 133,
   :name "dataflow",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/133"},
  "leiningen.install/add-metadata"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3547,
   :name "add-metadata",
   :ns "leiningen.install",
   :url "http://clojuredocs.org/v/3547"},
  "clojure.contrib.probabilities.finite-distributions/uniform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1084,
   :name "uniform",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1084"},
  "circumspec.utils/class-symbol?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3753,
   :name "class-symbol?",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3753"},
  "clojure.contrib.jmx/read-supported"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 564,
   :name "read-supported",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/564"},
  "clojure.contrib.def/defonce-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 95,
   :name "defonce-",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/95"},
  "swank.commands.contrib.swank-c-p-c.internal/camel-compound-prefix-match?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4164,
   :name "camel-compound-prefix-match?",
   :ns "swank.commands.contrib.swank-c-p-c.internal",
   :url "http://clojuredocs.org/v/4164"},
  "swank.commands.basic/quit-thread-browser"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3985,
   :name "quit-thread-browser",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3985"},
  "clojure.contrib.io/*append*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 511,
   :name "*append*",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/511"},
  "incanter.processing/create-reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3134,
   :name "create-reader",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3134"},
  "clojure.core/proxy-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5684,
   :name "proxy-name",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5684"},
  "clojure.xml/startparse-sax"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6095,
   :name "startparse-sax",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6095"},
  "swank.util.class-browse/nested-class-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4143,
   :name "nested-class-file?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4143"},
  "incanter.processing/RAD_TO_DEG"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3066,
   :name "RAD_TO_DEG",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3066"},
  "swank.core/*debug-quit-exception*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4021,
   :name "*debug-quit-exception*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4021"},
  "incanter.core/bind-rows"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2914,
   :name "bind-rows",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2914"},
  "clojure.core/booleans"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "boolean-array",
     :updated_at "2011-08-20 23:29:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1544",
     :line "4144",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "boolean-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-17 05:33:59.0",
     :function "booleans",
     :version 1,
     :created_at "2012-07-17 05:33:59.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; for fast interop\nuser=> (set! *warn-on-reflection* true)\ntrue\nuser=> (defn get-a-bool [bs] (aget bs 1))\nReflection warning, NO_SOURCE_PATH:1 - call to aget can't be resolved.\n#'user/get-a-bool\nuser=> (defn get-a-bool [bs] (let [bs (booleans bs)] (aget bs 1)))\n#'user/get-a-bool\n"}],
   :id 5393,
   :name "booleans",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5393"},
  "clojure.xml/parse"
  {:comments [],
   :see-alsos
   [{:namespace_id 119,
     :weight 0,
     :name "emit-element",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/2572",
     :line "95",
     :arglists_comp "[e]",
     :url_friendly_name "emit-element",
     :file "clojure/xml.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "with-out-str",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1652",
     :line "3674",
     :arglists_comp "[& body]",
     :url_friendly_name "with-out-str",
     :file "clojure/core.clj"}
    {:namespace_id 119,
     :weight 0,
     :name "element",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2565",
     :line "20",
     :arglists_comp "",
     :url_friendly_name "element",
     :file "clojure/xml.clj"}],
   :examples
   [{:namespace_id 351,
     :ns "clojure.xml",
     :updated_at "2012-03-18 16:42:19.0",
     :function "parse",
     :version 2,
     :created_at "2011-12-22 14:46:02.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(require '[clojure.xml :as xml]\n         '[clojure.zip :as zip])\n\n;;convenience function, first sawn at nakkaya.com later in clj.zip src\n(defn zip-str [s]\n  (zip/xml-zip (xml/parse (java.io.ByteArrayInputStream. (.getBytes s)))))\n\n;;parse from xml-strings to internal xml representation\n(zip-str \"<a href='nakkaya.com'/>\")\n=>\n[{:tag :a, :attrs {:href \"nakkaya.com\"}, :content nil} nil]\n\n;;root can be rendered with xml/emit-element\n(xml/emit-element (zip/root [{:tag :a, :attrs {:href \"nakkaya.com\"}, :content nil} nil]))\n=>\n<a href='nakkaya.com'/>\n;;printed (to assure it's not lazy and performance), can be catched to string variable with with-out-str\n\n\n\n\n\n"}],
   :id 6094,
   :name "parse",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6094"},
  "clj-ssh.ssh/connect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1487,
   :name "connect",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1487"},
  "clojure.core/longs"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "long-array",
     :updated_at "2011-08-20 23:10:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1550",
     :line "4199",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "long-array",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5594,
   :name "longs",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5594"},
  "clojure.contrib.pprint/*print-suppress-namespaces*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 976,
   :name "*print-suppress-namespaces*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/976"},
  "clojure.core/name"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:29:26.0",
     :function "name",
     :version 3,
     :created_at "2010-07-28 05:17:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (name :x)\n\"x\"\nuser=> (name \"x\")\n\"x\"\nuser=> (name 'x)\n\"x\""}],
   :id 5617,
   :name "name",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5617"},
  "clojure.contrib.datalog.literals/get-self-bound-cs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 205,
   :name "get-self-bound-cs",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/205"},
  "clojure.contrib.accumulators/empty-counter-with-total"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 29,
   :name "empty-counter-with-total",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/29"},
  "clojure.contrib.base64/clojure.contrib.debug.proxy$java.lang.Exception$Enumeration$f482e887"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3794,
   :name
   "clojure.contrib.debug.proxy$java.lang.Exception$Enumeration$f482e887",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3794"},
  "net.cgrand.enlive-html/move"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3931,
   :name "move",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3931"},
  "incanter.processing/text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3074,
   :name "text",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3074"},
  "circumspec.for-all/famous-whitespace*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3664,
   :name "famous-whitespace*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3664"},
  "incanter.charts/add-box-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2769,
   :name "add-box-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2769"},
  "net.cgrand.enlive-html/flatten-nodes-coll"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3821,
   :name "flatten-nodes-coll",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3821"},
  "net.licenser.sandbox/*default-sandbox-timeout*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5141,
   :name "*default-sandbox-timeout*",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5141"},
  "clojure.contrib.trace/dotrace"
  {:comments
   [{:namespace_id 92,
     :ns "clojure.contrib.trace",
     :updated_at "2011-01-26 01:19:03.0",
     :user_id 41,
     :function "dotrace",
     :version "1.2.0",
     :created_at "2011-01-26 01:18:21.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "A good example of how to use dotrace can be found <a href=\"http://stackoverflow.com/questions/2352020/debugging-in-clojure\">here</a>."}],
   :see-alsos [],
   :examples [],
   :id 1407,
   :name "dotrace",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1407"},
  "midje.unprocessed/one-failure-per-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4352,
   :name "one-failure-per-test",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4352"},
  "incanter.symbolic/deriv*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3384,
   :name "deriv*",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3384"},
  "incanter.charts/add-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2835,
   :name "add-lines",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2835"},
  "clojure.contrib.http.agent/stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 477,
   :name "stream",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/477"},
  "incanter.latex/add-latex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2968,
   :name "add-latex",
   :ns "incanter.latex",
   :url "http://clojuredocs.org/v/2968"},
  "clojure.contrib.test-is/file-position"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1386,
   :name "file-position",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1386"},
  "clojure.core/butlast"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "rest",
     :updated_at "2011-06-01 19:59:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1994",
     :line "63",
     :arglists_comp "[coll]",
     :url_friendly_name "rest",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "last",
     :updated_at "2010-11-06 03:20:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1644",
     :line "223",
     :arglists_comp "[coll]",
     :url_friendly_name "last",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "next",
     :updated_at "2010-11-06 03:08:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1620",
     :line "55",
     :arglists_comp "[coll]",
     :url_friendly_name "next",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop-last",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/1830",
     :line "2183",
     :arglists_comp "[s]|[n s]",
     :url_friendly_name "drop-last",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:21:46.0",
     :function "butlast",
     :version 3,
     :created_at "2010-07-13 19:13:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (butlast [1 2 3])\n(1 2)\nuser=> (butlast (butlast [1 2 3]))\n(1)\nuser=> (butlast (butlast (butlast [1 2 3])))\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:20:28.0",
     :function "butlast",
     :version 1,
     :created_at "2010-11-06 03:20:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";really slow reverse\n;put the last item of the list at the start of a new list, and recur over all but the last item of the list.\n;butlast acts similar to next in that it returns null for a 1-item list.\n\n(defn my-reverse\n  ([a-list]\n     (cond (= a-list nil) nil\n           :else (cons (last a-list)\n                       (my-reverse (butlast a-list))))))"}],
   :id 5397,
   :name "butlast",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5397"},
  "leiningen.core/read-project"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3499,
   :name "read-project",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3499"},
  "clojure.core/with-out-str"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:01:13.0",
     :function "with-out-str",
     :version 3,
     :created_at "2010-08-04 06:28:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Instead of printing the following will place the output normally\n;; sent to standard out to a string.\nuser=> (with-out-str (println \"this should return as a string\"))\n\"this should return as a string\\n\"\n"}],
   :id 5848,
   :name "with-out-str",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5848"},
  "incanter.processing/model-y"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3230,
   :name "model-y",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3230"},
  "clojure.contrib.dataflow/get-values"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 120,
   :name "get-values",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/120"},
  "clojure.contrib.dataflow/get-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 119,
   :name "get-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/119"},
  "clojure.contrib.sql.internal/print-sql-exception-chain"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1230,
   :name "print-sql-exception-chain",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1230"},
  "incanter.stats/pairs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3345,
   :name "pairs",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3345"},
  "circumspec.utils/pps"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3745,
   :name "pps",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3745"},
  "incanter.core/$group-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2810,
   :name "$group-by",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2810"},
  "incanter.charts/add-points"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2811,
   :name "add-points",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2811"},
  "swank.commands.basic/kill-nth-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4000,
   :name "kill-nth-thread",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4000"},
  "clojure.core/bit-and"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:30:02.0",
     :function "bit-and",
     :version 4,
     :created_at "2010-07-28 10:18:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-and 2r1100 2r1001)\n8\n;; 8 = 2r1000\n\n;; the same in decimal\nuser=> (bit-and 12 9)\n8"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-18 04:03:23.0",
     :function "bit-and",
     :version 1,
     :created_at "2012-03-18 04:03:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body "user> (bit-and 0x08 0xFF)\n8"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-24 10:20:34.0",
     :function "bit-and",
     :version 1,
     :created_at "2012-08-24 10:20:34.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (Integer/toBinaryString 235)\n\"11101011\"\nuser=> (Integer/toBinaryString 199)\n\"11000111\"\nuser=> (bit-and 235 199)\n195\nuser=> (Integer/toBinaryString 195)\n\"11000011\"\n\n;;11101011\n;;&\n;;11000111\n;;=\n;;11000011"}],
   :id 5380,
   :name "bit-and",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5380"},
  "clojure.contrib.duck-streams/file-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 265,
   :name "file-str",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/265"},
  "clojure.core/zero?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-24 22:42:06.0",
     :function "zero?",
     :version 4,
     :created_at "2010-07-13 19:44:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (zero? 0)\ntrue\nuser=> (zero? 0.0)\ntrue\nuser=> (zero? 1)\nfalse\nuser=> (zero? 0x0)\ntrue\nuser=> (zero? 3.14159265358M)\nfalse\nuser=> (zero? (/ 1 2))\nfalse"}],
   :id 5853,
   :name "zero?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5853"},
  "incanter.processing/TOP"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3144,
   :name "TOP",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3144"},
  "swank.util.concurrent.mbox/receive"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4321,
   :name "receive",
   :ns "swank.util.concurrent.mbox",
   :url "http://clojuredocs.org/v/4321"},
  "incanter.processing/ESC"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3227,
   :name "ESC",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3227"},
  "incanter.processing/ALPHA_MASK"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3007,
   :name "ALPHA_MASK",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3007"},
  "net.licenser.sandbox/stringify-sandbox"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5132,
   :name "stringify-sandbox",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5132"},
  "leiningen.classpath/make-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3501,
   :name "make-path",
   :ns "leiningen.classpath",
   :url "http://clojuredocs.org/v/3501"},
  "clojure.contrib.set/subset?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 215,
   :name "subset?",
   :ns "clojure.contrib.set",
   :url "http://clojuredocs.org/v/215"},
  "clojure.core/fnil"
  {:comments [],
   :see-alsos
   [{:namespace_id 11,
     :weight 0,
     :name ".?.",
     :updated_at "2010-10-20 04:41:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/88",
     :line "38",
     :arglists_comp "[x form]|[x form & forms]",
     :url_friendly_name "._q.",
     :file "clojure/contrib/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:41:13.0",
     :function "fnil",
     :version 3,
     :created_at "2010-09-18 14:23:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; a function that expects a non-nil value\n(defn say-hello [name] (str \"Hello \" name))\n#'user/say-hello\n\n;; fnil lets you create another function with a default\n;; arg in case it is passed a nil\n(def say-hello-with-defaults (fnil say-hello \"World\"))\n#'user/say-hello-with-defaults\n\n;; the happy path works as you would expect\n(say-hello-with-defaults \"Sir\")\n\"Hello Sir\"\n\n;; but in the case that the function is passed a nil it will use the \n;; default supplied to fnil\n(say-hello-with-defaults nil)\n\"Hello World\"\n\n;; this works with different arities too\n(defn say-hello [first other] (str \"Hello \" first \" and \" other))\n#'user/say-hello\n\n;; lets create it with defaults\n(def say-hello-with-defaults (fnil say-hello \"World\" \"People\"))\n#'user/say-hello-with-defaults\n\n;; call the function with all nil args - notice it uses the defaults\n;; supplied to fnil\n(say-hello-with-defaults nil nil)\n\"Hello World and People\"\n\n;; any of the args can be nil - the function will supply \n;; the default supplied with fnil\n(say-hello-with-defaults \"Sir\" nil)\n\"Hello Sir and People\"\n\n;; and again - notice that \"World\" is the default here\n(say-hello-with-defaults nil \"Ma'am\")\n\"Hello World and Ma'am\"\n\n;; or pass all args \n(say-hello-with-defaults \"Sir\" \"Ma'am\")\n\"Hello Sir and Ma'am\"\n"}],
   :id 5521,
   :name "fnil",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5521"},
  "clojure.core/fn?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ifn?",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1982",
     :line "4983",
     :arglists_comp "[x]",
     :url_friendly_name "ifn_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:30:52.0",
     :function "fn?",
     :version 5,
     :created_at "2010-07-13 19:19:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (fn? 5)\nfalse\nuser=> (fn? inc)\ntrue\nuser=> (fn? (fn []))\ntrue\nuser=> (fn? #(5))\ntrue"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:24:12.0",
     :function "fn?",
     :version 6,
     :created_at "2010-07-14 17:55:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Even though maps, sets, vectors and keywords behave as functions:\nuser=> ({:a 1} :a)\n1\n\n;; fn? still returns false for them because they are not created using fn:\nuser=> (fn? {:a 1})\nfalse\n"}],
   :id 5519,
   :name "fn?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5519"},
  "incanter.processing/DIAMETER"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3130,
   :name "DIAMETER",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3130"},
  "clojure.core/if-let"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-02 00:24:45.0",
     :user_id 41,
     :function "if-let",
     :version "1.2.0",
     :created_at "2011-03-02 00:24:45.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The difference between when-let and if-let is that when-let doesn't have an else clause and and also accepts multiple forms so you don't need to use a (do...)."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-11 18:24:42.0",
     :user_id 481,
     :function "if-let",
     :version "1.3.0",
     :created_at "2012-01-11 18:24:42.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "I wonder what motivates the restriction of only one binding, e.g. many Schemes implement an `and-let*` form which allows multiple bindings, evaluating them in order and breaking out on the first binding that evaluates to false. Can somebody shed some light on this?"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "when-let",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1849",
     :line "1422",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "when-let",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:19:23.0",
     :function "if-let",
     :version 3,
     :created_at "2010-07-17 08:16:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (defn sum-even-numbers [nums]\n         (if-let [nums (seq (filter even? nums))]\n           (reduce + nums)\n           \"No even numbers found.\"))\n#'user/sum-even-numbers\n\nuser=> (sum-even-numbers [1 3 5 7 9])\n\"No even numbers found.\"\n\nuser=> (sum-even-numbers [1 3 5 7 9 10 12])\n22\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:19:45.0",
     :function "if-let",
     :version 4,
     :created_at "2010-07-18 14:39:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (if-let [x false y true]\n         \"then\"\n         \"else\")\njava.lang.IllegalArgumentException: if-let requires exactly 2 forms in binding vector (NO_SOURCE_FILE:1)\n\nuser=> (defn if-let-demo [arg]\n         (if-let [x arg]\n           \"then\"\n           \"else\"))\n\nuser=> (if-let-demo 1) ; anything except nil/false\n\"then\"\nuser=> (if-let-demo nil)\n\"else\"\nuser=> (if-let-demo false)\n\"else\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-19 15:28:22.0",
     :function "if-let",
     :version 3,
     :created_at "2011-05-19 15:27:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; This macro is nice when you need to calculate something big. And you need \n; to use the result but only when it's true:\n\n(if-let [life (meaning-of-life 12)]\n   life\n   (if-let [origin (origin-of-life 1)]\n      origin\n      (if-let [shot (who-shot-jr 5)]\n         block-sol\n\t 42)))\n\n; As you can see in the above example it will return the answer \n; to the question only if the answer is not nil. If the answer\n; is nil it will move to the next question. Until finally it\n; gives up and returns 42."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:02:06.0",
     :function "if-let",
     :version 1,
     :created_at "2012-04-12 22:02:06.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5548,
   :name "if-let",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5548"},
  "clojure.contrib.graph/stratification-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 443,
   :name "stratification-list",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/443"},
  "clojure.test/*report-counters*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6016,
   :name "*report-counters*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6016"},
  "clojure.contrib.accumulators/add-items"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 12,
   :name "add-items",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/12"},
  "net.licenser.sandbox.tester/i-want"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5108,
   :name "i-want",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5108"},
  "incanter.processing/sphere"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2998,
   :name "sphere",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2998"},
  "incanter.processing/color-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2999,
   :name "color-mode",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2999"},
  "clojure.template/do-template"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 114,
     :ns "clojure.template",
     :updated_at "2012-06-09 07:04:15.0",
     :function "do-template",
     :version 4,
     :created_at "2010-07-25 21:18:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Because it is expanded at compile time, you can also use special \n;; forms as in full blown macros:\n\nuser=> (use 'clojure.template)\nuser=> (do-template [a b] (def a b) d 1 e 2 f 3)\n#'user/f\nuser=> d\n1\nuser=> e\n2\nuser=> f\n3\n\n;; and if you are curious why\nuser=> (use 'clojure.walk)\nuser=> (macroexpand-all '(do-template [a b] (def a b) d 1 e 2 f 3))\n(do (def d 1) (def e 2) (def f 3))\n\n"}],
   :id 6013,
   :name "do-template",
   :ns "clojure.template",
   :url "http://clojuredocs.org/v/6013"},
  "clojure.contrib.accumulators/counter-with-total"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 26,
   :name "counter-with-total",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/26"},
  "incanter.charts/set-alpha"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2821,
   :name "set-alpha",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2821"},
  "incanter.stats/pdf-uniform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3339,
   :name "pdf-uniform",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3339"},
  "clojure.core/object-array"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 14:24:50.0",
     :function "object-array",
     :version 1,
     :created_at "2011-08-21 14:24:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of Java Objects using object-array\n;; and demonstrate that it can be used with the Java fill function\n\nuser=> (def os (object-array [nil 23.2 \"abc\" 33]))\n#'user/os\nuser=> (vec os)\n[nil 23.2 \"abc\" 33]\nuser=> (java.util.Arrays/fill os 31415)\nnil\nuser=> (vec os)\n[31415 31415 31415 31415]\nuser=>"}],
   :id 5648,
   :name "object-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5648"},
  "clojure.contrib.server-socket/connection-count"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1192,
   :name "connection-count",
   :ns "clojure.contrib.server-socket",
   :url "http://clojuredocs.org/v/1192"},
  "clojure.contrib.gen-html-docs/generate-documentation-to-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 331,
   :name "generate-documentation-to-file",
   :ns "clojure.contrib.gen-html-docs",
   :url "http://clojuredocs.org/v/331"},
  "clojure.contrib.duck-streams/with-out-append-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 269,
   :name "with-out-append-writer",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/269"},
  "net.cgrand.xml/tag?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3955,
   :name "tag?",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3955"},
  "clojure.core/pos?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "neg?",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1708",
     :line "997",
     :arglists_comp "[x]",
     :url_friendly_name "neg_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:31:13.0",
     :function "pos?",
     :version 3,
     :created_at "2010-07-13 19:32:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (pos? 1)\ntrue\nuser=> (pos? 0)\nfalse\nuser=> (pos? -1)\nfalse"}],
   :id 5663,
   :name "pos?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5663"},
  "clojure.contrib.generic.comparison/<="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 405,
   :name "<=",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/405"},
  "clojure.contrib.base64/local-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3797,
   :name "local-bindings",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3797"},
  "clojure.contrib.http.agent/http-agent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 476,
   :name "http-agent",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/476"},
  "net.cgrand.enlive-html/nth-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3818,
   :name "nth-child",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3818"},
  "leiningen.pom/make-pom"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3559,
   :name "make-pom",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3559"},
  "swank.commands.inspector/inspector-pop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4227,
   :name "inspector-pop",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4227"},
  "clojure.core/*compile-files*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5293,
   :name "*compile-files*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5293"},
  "clojure.test.junit/finish-suite"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6057,
   :name "finish-suite",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6057"},
  "clojure.contrib.generic.math-functions/sqr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 426,
   :name "sqr",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/426"},
  "clojure.core/resultset-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5733,
   :name "resultset-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5733"},
  "incanter.stats/pdf-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3344,
   :name "pdf-t",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3344"},
  "clojure.contrib.http.agent/request-body"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 455,
   :name "request-body",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/455"},
  "clojure.repl/source"
  {:comments [],
   :see-alsos
   [{:namespace_id 342,
     :weight 1,
     :name "doc",
     :updated_at "2012-07-18 12:19:24.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:15:14.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5970",
     :line "120",
     :arglists_comp "[name]",
     :url_friendly_name "doc",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "dir",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/2447",
     :line "70",
     :arglists_comp "[nsname]",
     :url_friendly_name "dir",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "apropos",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/2446",
     :line "52",
     :arglists_comp "[str-or-pattern]",
     :url_friendly_name "apropos",
     :file "clojure/repl.clj"}],
   :examples
   [{:namespace_id 110,
     :ns "clojure.repl",
     :updated_at "2010-09-26 03:39:04.0",
     :function "source",
     :version 3,
     :created_at "2010-07-21 22:18:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (source max)\n;; prints in console:\n(defn max\n  \"Returns the greatest of the nums.\"\n  {:added \"1.0\"}\n  ([x] x)\n  ([x y] (if (> x y) x y))\n  ([x y & more]\n   (reduce max (max x y) more)))\n"}],
   :id 5975,
   :name "source",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5975"},
  "incanter.core/$="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2865,
   :name "$=",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2865"},
  "clojure.reflect/->JavaReflector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5952,
   :name "->JavaReflector",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5952"},
  "lancet/coerce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3489,
   :name "coerce",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3489"},
  "lancet/ant"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3458,
   :name "ant",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3458"},
  "clojure.contrib.zip-filter/children-auto"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1437,
   :name "children-auto",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1437"},
  "circumspec.runner/tally"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3737,
   :name "tally",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3737"},
  "clojure.core/and"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-11 02:28:45.0",
     :user_id 32,
     :function "and",
     :version "1.2.0",
     :created_at "2011-05-11 02:28:45.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Note <b>add</b> is a macro, so you cannot <b>apply</b> it. For example, there is a vector of some Boolean values <b>[true true false true]</b>, which you want to test to see if they are all true. The code below will not work: <pre>(apply add [true true false true]) ;won't work</pre>\nInstead, use this: <pre>(every? identity [true  true false true])</pre> More discussion can be found at http://osdir.com/ml/clojure/2010-01/msg01242.html"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "or",
     :updated_at "2010-12-29 17:50:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1823",
     :line "705",
     :arglists_comp "[]|[x]|[x & next]",
     :url_friendly_name "or",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "if",
     :updated_at "2010-10-27 16:30:54.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5269",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "if",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 20:27:28.0",
     :function "and",
     :version 1,
     :created_at "2010-10-07 20:27:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (and true true)\ntrue\n\nuser=> (and true false)\nfalse\n\nuser=> (and false false)\nfalse\n\nuser=> (and '() '())\n()\n\nuser=> (and '[] '[])\n[]\n\nuser=> (and 0 1)  ; Note that this is *not* bitwise 'and'\n1\n\nuser=> (and 1 0)\n0\n\nuser=> (and (constantly true) (> 2 1))\ntrue"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-12 22:12:48.0",
     :function "and",
     :version 1,
     :created_at "2012-04-12 22:12:48.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See examples for \"if\" explaining Clojure's idea of logical true\n;; and logical false."}],
   :id 5352,
   :name "and",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5352"},
  "clojure.core/locking"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-01-20 13:11:58.0",
     :function "locking",
     :version 2,
     :created_at "2010-10-05 02:46:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def o (Object.))\r\n\r\nuser=> (future (locking o \r\n                 (Thread/sleep 10000) \r\n                 (println \"done\")))\r\n\r\n;; Now run this again before 10 seconds is up and you'll \r\n;; find the second instance prints done 10 seconds after the \r\n;; first instance has released the lock\r\n\r\nuser=> (future (locking o \r\n                 (Thread/sleep 10000) \r\n                 (println \"done\")))\r\n\r\n;; Operates like the synchronized keyword in Java.\r\n"}],
   :id 5591,
   :name "locking",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5591"},
  "net.cgrand.enlive-html/this-node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3927,
   :name "this-node",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3927"},
  "circumspec.should/should-repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3742,
   :name "should-repl",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3742"},
  "incanter.stats/predict"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3342,
   :name "predict",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3342"},
  "clojure.contrib.properties/as-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1120,
   :name "as-properties",
   :ns "clojure.contrib.properties",
   :url "http://clojuredocs.org/v/1120"},
  "fogus.me.trammel/all-positive?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5264,
   :name "all-positive?",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5264"},
  "clojure.contrib.test-is/with-test-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1399,
   :name "with-test-out",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1399"},
  "clojure.contrib.datalog/work-plan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 180,
   :name "work-plan",
   :ns "clojure.contrib.datalog",
   :url "http://clojuredocs.org/v/180"},
  "swank.util.net.sockets/close-server-socket!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4272,
   :name "close-server-socket!",
   :ns "swank.util.net.sockets",
   :url "http://clojuredocs.org/v/4272"},
  "clj-ssh.ssh/default-session"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1472,
   :name "default-session",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1472"},
  "lancet/property-descriptor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3459,
   :name "property-descriptor",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3459"},
  "clojure.java.io/make-parents"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5890,
   :name "make-parents",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5890"},
  "clojure.core/refer-clojure"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "refer",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1963",
     :line "3257",
     :arglists_comp "[ns-sym & filters]",
     :url_friendly_name "refer",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:37:27.0",
     :function "refer-clojure",
     :version 3,
     :created_at "2010-07-23 21:30:39.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Prevent namespace conflicts like:\n\n;; `WARNING: time already refers to: #'clojure.core/time in namespace: \n;; time, being replaced by: #'time/time`\n\nuser=> (ns time\n         (:refer-clojure :exclude [time]))\n\n(defn time []\n  (System/nanoTime))\n"}],
   :id 5714,
   :name "refer-clojure",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5714"},
  "circumspec.runner/fail-result"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3722,
   :name "fail-result",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3722"},
  "clojure.contrib.datalog.literals/adorned-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 229,
   :name "adorned-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/229"},
  "clojure.contrib.pprint/pprint-condp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 867,
   :name "pprint-condp",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/867"},
  "incanter.processing/TAB"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3021,
   :name "TAB",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3021"},
  "leiningen.pom/make-exclusion"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3565,
   :name "make-exclusion",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3565"},
  "incanter.processing/lerp-color"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3131,
   :name "lerp-color",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3131"},
  "clojure.core/take-while"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "drop-while",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2075",
     :line "2199",
     :arglists_comp "[pred coll]",
     :url_friendly_name "drop-while",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "split-with",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1614",
     :line "2224",
     :arglists_comp "[pred coll]",
     :url_friendly_name "split-with",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-04 08:06:05.0",
     :function "take-while",
     :version 5,
     :created_at "2010-07-19 19:08:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Calculate the sum of all numbers under 1000:\nuser=> (reduce + (take-while (partial > 1000 ) (iterate inc 0)))\n499500"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-03 22:01:04.0",
     :function "take-while",
     :version 4,
     :created_at "2011-11-18 01:06:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (take-while neg? [-2 -1 0 1 2 3])\n(-2 -1)\n\nuser=> (take-while neg? [-2 -1 0 -1 -2 3])\n(-2 -1)\n\nuser=> (take-while neg? [ 0 1 2 3])\n()\n\nuser=> (take-while neg? [])\n()\n\nuser=> (take-while neg? nil)\n()"}],
   :id 5787,
   :name "take-while",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5787"},
  "swank.util.hooks/defhook"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4196,
   :name "defhook",
   :ns "swank.util.hooks",
   :url "http://clojuredocs.org/v/4196"},
  "clojure.contrib.jmx/invoke"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 560,
   :name "invoke",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/560"},
  "clojure.test.tap/print-tap-plan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6071,
   :name "print-tap-plan",
   :ns "clojure.test.tap",
   :url "http://clojuredocs.org/v/6071"},
  "clojure.core/do"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 02:41:22.0",
     :function "do",
     :version 3,
     :created_at "2010-10-25 02:39:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; do is used to evaluate multiple expressions in order, usually for the\n;; purpose of evaluating exprs that have side-effects (such as printing\n;; or I/O).  do returns the value of its last expression.\n;;\n;; do w/o args returns nil.\n\n=> (do\n     (println \"LOG: Computing...\")\n     (+ 1 1))\nLOG: Computing...\n2\n\n=> (do)\nnil\n"}],
   :id 6127,
   :name "do",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6127"},
  "clojure.contrib.io/append-spit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 493,
   :name "append-spit",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/493"},
  "clojure.contrib.fnmap.PersistentFnMap/-valAt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 321,
   :name "-valAt",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/321"},
  "clojure.contrib.datalog.literals/get-vs-from-cs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 232,
   :name "get-vs-from-cs",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/232"},
  "clj-swing.tree/*tree-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5192,
   :name "*tree-known-keys*",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5192"},
  "clojure.contrib.datalog.rules/display-rule"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 155,
   :name "display-rule",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/155"},
  "incanter.processing/load-font"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3196,
   :name "load-font",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3196"},
  "clj-swing.combo-box/clj_swing.combo_box.proxy$java.lang.Object$MutableComboBoxModel$886819ae"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5172,
   :name
   "clj_swing.combo_box.proxy$java.lang.Object$MutableComboBoxModel$886819ae",
   :ns "clj-swing.combo-box",
   :url "http://clojuredocs.org/v/5172"},
  "incanter.core/get-input-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2883,
   :name "get-input-stream",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2883"},
  "clojure.walk/stringify-keys"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6082,
   :name "stringify-keys",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6082"},
  "swank.core/*pending-continuations*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4014,
   :name "*pending-continuations*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4014"},
  "clojure.contrib.io/spit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 490,
   :name "spit",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/490"},
  "incanter.stats/sample"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3301,
   :name "sample",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3301"},
  "lancet/javadoc2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3487,
   :name "javadoc2",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3487"},
  "clojure.repl/apropos"
  {:comments [],
   :see-alsos
   [{:namespace_id 110,
     :weight 1,
     :name "source",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/2445",
     :line "43",
     :arglists_comp "[n]",
     :url_friendly_name "source",
     :file "clojure/repl.clj"}
    {:namespace_id 342,
     :weight 1,
     :name "doc",
     :updated_at "2012-07-18 12:19:24.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:15:14.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5970",
     :line "120",
     :arglists_comp "[name]",
     :url_friendly_name "doc",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "dir",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/2447",
     :line "70",
     :arglists_comp "[nsname]",
     :url_friendly_name "dir",
     :file "clojure/repl.clj"}],
   :examples
   [{:namespace_id 110,
     :ns "clojure.repl",
     :updated_at "2010-09-26 00:48:52.0",
     :function "apropos",
     :version 3,
     :created_at "2010-09-08 13:28:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (apropos \"temp\")\n()\n\nuser=> (require 'clojure.template)\nnil\n\nuser=> (apropos \"temp\")\n(apply-template do-template)\n"}],
   :id 5966,
   :name "apropos",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5966"},
  "clojure.core/sorted-map-by"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "sorted-map",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1494",
     :line "336",
     :arglists_comp "[& keyvals]",
     :url_friendly_name "sorted-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "subseq",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/2102",
     :line "4026",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "subseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "rsubseq",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1719",
     :line "4042",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "rsubseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-set-by",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1934",
     :line "356",
     :arglists_comp "[comparator & keys]",
     :url_friendly_name "sorted-set-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-13 00:43:31.0",
     :function "sorted-map-by",
     :version 1,
     :created_at "2010-10-13 00:43:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (sorted-map-by > 1 \"a\", 2 \"b\", 3 \"c\")\n{3 \"c\", 2 \"b\", 1 \"a\"}"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-08 18:28:15.0",
     :function "sorted-map-by",
     :version 2,
     :created_at "2012-03-08 18:27:09.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; If you wish to sort the map according to the values, instead of by keys \n;; the following code WILL NOT WORK! This is because the map values are not unique.\n\nuser=> (let [results {:A 1 :B 2 :C 2 :D 5 :E 1 :F 1}]\n  (into (sorted-map-by (fn [key1 key2]\n                         (compare (get results key2)\n                                  (get results key1))))\n        results))\n\n=> {:D 5, :C 2, :A 1}\n\n;; To make sure that the sorting works, we can make sure that the comparator \n;; works on unique values\n\nuser=> (let [results {:A 1 :B 2 :C 2 :D 5 :E 1 :F 1}]\n  (into (sorted-map-by (fn [key1 key2]\n                         (compare [(get results key2) key2]\n                                  [(get results key1) key1])))\n        results))\n\n=> {:D 5, :C 2, :B 2, :F 1, :E 1, :A 1}"}],
   :id 5764,
   :name "sorted-map-by",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5764"},
  "swank.util.class-browse/path-class-files"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4150,
   :name "path-class-files",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4150"},
  "clojure.contrib.sql/find-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1231,
   :name "find-connection",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1231"},
  "clojure.core/class"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "type",
     :updated_at "2011-05-15 18:40:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/2068",
     :line "2656",
     :arglists_comp "[x]",
     :url_friendly_name "type",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "class?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1744",
     :line "4286",
     :arglists_comp "[x]",
     :url_friendly_name "class_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "instance?",
     :updated_at "2011-08-21 22:07:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1519",
     :line "124",
     :arglists_comp "[c x]",
     :url_friendly_name "instance_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:31:37.0",
     :function "class",
     :version 3,
     :created_at "2010-07-30 20:18:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (class 1)\njava.lang.Integer\n\nuser=> (class [1 2 3])\nclojure.lang.PersistentVector\n\nuser=> (class (String. \"foo\"))\njava.lang.String"}],
   :id 5417,
   :name "class",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5417"},
  "clojure.contrib.find-namespaces/find-namespaces-on-classpath"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 315,
   :name "find-namespaces-on-classpath",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/315"},
  "clojure.contrib.fnmap.PersistentFnMap/-init"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 328,
   :name "-init",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/328"},
  "lancet/unzip"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3484,
   :name "unzip",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3484"},
  "clojure.contrib.io/read-lines"
  {:comments
   [{:namespace_id 40,
     :ns "clojure.contrib.io",
     :updated_at "2011-08-15 20:53:51.0",
     :user_id 364,
     :function "read-lines",
     :version "1.2.0",
     :created_at "2011-08-15 20:53:51.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "If you are running this in an emacs slime repl, you may need to add the following lines to you .emacs file, otherwise you'll get odd errors when reading a unicode file.\n\n<code>\n(set-language-environment \"UTF-8\")\n\n(setq slime-net-coding-system 'utf-8-unix)\n</code>"}],
   :see-alsos [],
   :examples [],
   :id 510,
   :name "read-lines",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/510"},
  "swank.commands.basic/traced-fn-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4004,
   :name "traced-fn-map",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4004"},
  "ring.util.response/status"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2631,
   :name "status",
   :ns "ring.util.response",
   :url "http://clojuredocs.org/v/2631"},
  "clojure.test/successful?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6039,
   :name "successful?",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6039"},
  "clojure.contrib.sql/is-rollback-only"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1238,
   :name "is-rollback-only",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1238"},
  "clojure.core/pmap"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-27 07:50:25.0",
     :user_id 147,
     :function "pmap",
     :version "1.2.0",
     :created_at "2010-10-27 07:50:25.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "for insight into how pmap does stuff see this presentation: \"From Concurrency to Parallelism\", by David Edgar Liebke @ http://incanter.org/downloads/fjclj.pdf"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "map",
     :updated_at "2010-10-20 05:22:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1734",
     :line "2079",
     :arglists_comp
     "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
     :url_friendly_name "map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:32:25.0",
     :function "pmap",
     :version 3,
     :created_at "2010-08-16 01:47:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This function operates just like map.  See\n;; clojure.core/map for more details.\nuser=> (pmap inc [1 2 3 4 5])\n(2 3 4 5 6)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-13 09:51:59.0",
     :function "pmap",
     :version 1,
     :created_at "2011-08-13 09:51:59.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a function that simulates a long running process using Thread/sleep\n(defn long-running-job [n]\n    (Thread/sleep 3000) ; wait for 3 seconds\n    (+ n 10))\n\n;; used `doall` to eagerly evaluate `map`, which evaluates lazily by default\n\n;; notice that the total elapse time is almost 3 secs * 4\nuser=> (time (doall (map long-running-job (range 4))))\n\"Elapsed time: 11999.235098 msecs\"\n(10 11 12 13)\n\n;; notice that the total elapse time is almost 3 secs only\nuser=> (time (doall (pmap long-running-job (range 4))))\n\"Elapsed time: 3200.001117 msecs\"\n(10 11 12 13)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-08 21:14:02.0",
     :function "pmap",
     :version 2,
     :created_at "2012-05-08 21:12:07.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; pmap is implemented using Clojure futures.  See examples for 'future'\n;; for discussion of an undesirable 1-minute wait that can occur before\n;; your standalone Clojure program exits if you do not use shutdown-agents."}],
   :id 5659,
   :name "pmap",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5659"},
  "clojure.core/to-array-2d"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-01-02 07:44:03.0",
     :function "to-array-2d",
     :version 2,
     :created_at "2011-06-10 14:12:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (def a (to-array-2d [[1 2 3][4 5 6]]))\n#'user/a\nuser> (alength a)\n2\nuser> (alength (aget a 0))\n3\nuser> (aget a 0 0)\n1\nuser> (aget a 0 1)\n2\nuser> (aget a 0 2)\n3\nuser> (aget a 1 0)\n4\nuser> (aget a 2 0)\nâ†’ ERROR\nnil\n\nuser> "}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 18:32:51.0",
     :function "to-array-2d",
     :version 1,
     :created_at "2011-08-21 18:32:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; quick example of a ragged array where the length of each element of the \n;; 2d array is unique\n\nuser=> (def a (to-array-2d [[0][1 2][3 4 5][6 7 8 9]]))\n#'user/a\nuser=> (map alength [(aget a 0)(aget a 1)(aget a 2)])\n(1 2 3)\nuser=>"}],
   :id 5793,
   :name "to-array-2d",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5793"},
  "clojure.contrib.datalog.magic/adorn-rules-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 240,
   :name "adorn-rules-set",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/240"},
  "ring.util.response/file-response"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2630,
   :name "file-response",
   :ns "ring.util.response",
   :url "http://clojuredocs.org/v/2630"},
  "clojure.contrib.http.agent/redirect?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 471,
   :name "redirect?",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/471"},
  "clojure.reflect/map->Method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5961,
   :name "map->Method",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5961"},
  "swank.rpc/dispatch-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4307,
   :name "dispatch-message",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4307"},
  "clojure.contrib.datalog.literals/get-cs-from-vs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 234,
   :name "get-cs-from-vs",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/234"},
  "clojure.contrib.monads/fetch-state"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 808,
   :name "fetch-state",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/808"},
  "incanter.processing/model-z"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3200,
   :name "model-z",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3200"},
  "clojure.contrib.json/compiled-format5815"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5233,
   :name "compiled-format5815",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/5233"},
  "clojure.contrib.seq-utils/fill-queue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1175,
   :name "fill-queue",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1175"},
  "clojure.test/*testing-contexts*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6019,
   :name "*testing-contexts*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6019"},
  "clojure.contrib.miglayout.internal/do-layout"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 708,
   :name "do-layout",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/708"},
  "clojure.reflect/->AsmReflector"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5949,
   :name "->AsmReflector",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5949"},
  "clojure.contrib.monads/m-until"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 779,
   :name "m-until",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/779"},
  "clj-ssh.ssh/with-ssh-agent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1493,
   :name "with-ssh-agent",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1493"},
  "incanter.processing/background"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3087,
   :name "background",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3087"},
  "incanter.charts/set-x-label"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2767,
   :name "set-x-label",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2767"},
  "net.cgrand.enlive-html/attr|="
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3850,
   :name "attr|=",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3850"},
  "lancet/ant-apply"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3450,
   :name "ant-apply",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3450"},
  "clojure.contrib.pprint.pretty-writer/start-block-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 835,
   :name "start-block-t",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/835"},
  "clojure.contrib.datalog/build-work-plan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 162,
   :name "build-work-plan",
   :ns "clojure.contrib.datalog",
   :url "http://clojuredocs.org/v/162"},
  "incanter.core/plus"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2723,
   :name "plus",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2723"},
  "incanter.distributions/normal-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2940,
   :name "normal-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2940"},
  "clojure.contrib.fcase/re-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 299,
   :name "re-case",
   :ns "clojure.contrib.fcase",
   :url "http://clojuredocs.org/v/299"},
  "clojure.contrib.monads/m-reduce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 790,
   :name "m-reduce",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/790"},
  "clj-swing.example/nativeLF"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5218,
   :name "nativeLF",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5218"},
  "clojure.core/into-array"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-08-23 15:38:29.0",
     :function "into-array",
     :version 3,
     :created_at "2011-01-07 02:15:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Array's component type is set to (class 2), cannot add Strings.\n;; This will result in an IllegalArgumentException\nuser=> (into-array [2 \"4\" \"8\" 5])\n;; Evaluation aborted.\n\nuser=> (into-array (range 4))\n#<Integer[] [Ljava.lang.Integer;@63d6dc46>\n\n;; if you assign a type, you still have to coerce values\nuser=> (into-array Byte/TYPE (range 4))\n;; Evaluation aborted.\n\nuser=> (into-array Byte/TYPE (map byte (range 4)))\n#<byte[] [B@68ffefc9>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-25 02:08:35.0",
     :function "into-array",
     :version 1,
     :created_at "2012-05-25 02:08:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; java.nio.file.Paths#get takes (String, String...)\nuser=> (java.nio.file.Paths/get \"/Users\" (into-array [\"username\" \"dev\" \"clojure\"]))\n#<UnixPath /Users/username/dev/clojure>"}],
   :id 5564,
   :name "into-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5564"},
  "lancet/basename"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3431,
   :name "basename",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3431"},
  "clj-swing.list/*list-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5193,
   :name "*list-known-keys*",
   :ns "clj-swing.list",
   :url "http://clojuredocs.org/v/5193"},
  "net.licenser.sandbox.safe-fns/not-really-safe-functions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5120,
   :name "not-really-safe-functions",
   :ns "net.licenser.sandbox.safe-fns",
   :url "http://clojuredocs.org/v/5120"},
  "clojure.core/load-string"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "read-string",
     :updated_at "2012-08-20 22:21:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1707",
     :line "2894",
     :arglists_comp "[s]",
     :url_friendly_name "read-string",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5589,
   :name "load-string",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5589"},
  "incanter.stats/pdf-binomial"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 159,
     :ns "incanter.stats",
     :updated_at "2012-10-08 00:26:53.0",
     :function "pdf-binomial",
     :version 3,
     :created_at "2012-10-08 00:25:06.0",
     :library "incanter",
     :lib_version "1.2.3-SNAPSHOT",
     :library_id 5,
     :body
     "# Compute P(45 < X < 55) for X Binomial(100,0.5)\n# see http://stat.ethz.ch/R-manual/R-patched/library/stats/html/Binomial.html\n\n; In Clojure\n(map #(pdf-binomial % :size 100 :prob 0.5) (range 46 55))                                                                                                                            \n;(0.05795839814029805 0.066590499990982 0.07352701040670805 0.07802866410508287 0.0795892373871834 0.07802866410508287 0.07352701040670805 0.066590499990982 0.05795839814029805)           \n\n(reduce + (map #(pdf-binomial % :size 100 :prob 0.5) (range 46 55))) \n; 0.6317983826733252\n\n\n; In R\n; > dbinom(46:54, 100, 0.5)\n;[1] 0.05795840 0.06659050 0.07352701 0.07802866 0.07958924 0.07802866 0.07352701 0.06659050\n;[9] 0.05795840\n;> sum(dbinom(46:54, 100, 0.5))\n;[1] 0.6317984\n"}],
   :id 3326,
   :name "pdf-binomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3326"},
  "leiningen.uberjar/uberjar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3585,
   :name "uberjar",
   :ns "leiningen.uberjar",
   :url "http://clojuredocs.org/v/3585"},
  "incanter.bayes/sample-mvn-params"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2722,
   :name "sample-mvn-params",
   :ns "incanter.bayes",
   :url "http://clojuredocs.org/v/2722"},
  "clojure.contrib.http.agent/method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 469,
   :name "method",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/469"},
  "circumspec.watch/mark-watched"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3772,
   :name "mark-watched",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3772"},
  "clojure.contrib.reflect/get-field"
  {:comments [],
   :see-alsos
   [{:namespace_id 73,
     :weight 0,
     :name "call-method",
     :updated_at "2010-10-20 04:41:56.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:58:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1131",
     :line "12",
     :arglists_comp "[klass method-name params obj & args]",
     :url_friendly_name "call-method",
     :file "clojure/contrib/reflect.clj"}],
   :examples [],
   :id 1130,
   :name "get-field",
   :ns "clojure.contrib.reflect",
   :url "http://clojuredocs.org/v/1130"},
  "clojure.contrib.mock.test-adapter/between"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 737,
   :name "between",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/737"},
  "clojure.inspector/inspect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5867,
   :name "inspect",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5867"},
  "clojure.contrib.datalog.rules/display-query"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 154,
   :name "display-query",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/154"},
  "incanter.processing/end-raw"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3127,
   :name "end-raw",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3127"},
  "circumspec.report/success-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3692,
   :name "success-string",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3692"},
  "incanter.processing/create-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3195,
   :name "create-path",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3195"},
  "clojure.core/doc"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:20:45.0",
     :function "doc",
     :version 3,
     :created_at "2010-07-17 18:21:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (doc first)\n-------------------------\nclojure.core/first\n([coll])\n  Returns the first item in the collection. Calls seq on its\n    argument. If coll is nil, returns nil.\nnil\n\nuser=> (doc rest)\n-------------------------\nclojure.core/rest\n([coll])\n  Returns a possibly empty seq of the items after the first. Calls seq on its\n  argument.\nnil\n"}],
   :id 2094,
   :name "doc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/2094"},
  "incanter.stats/cdf-chisq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3336,
   :name "cdf-chisq",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3336"},
  "clojure.contrib.seq/separate"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "filter",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1784",
     :line "2124",
     :arglists_comp "[pred coll]",
     :url_friendly_name "filter",
     :file "clojure/core.clj"}],
   :examples [],
   :id 57,
   :name "separate",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/57"},
  "circumspec.watch/agent-watch-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3766,
   :name "agent-watch-fn",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3766"},
  "clojure.pprint/code-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5931,
   :name "code-dispatch",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5931"},
  "lancet/patch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3402,
   :name "patch",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3402"},
  "clojure.contrib.shell-out/sh"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 81,
     :ns "clojure.contrib.shell-out",
     :updated_at "2010-12-04 23:00:13.0",
     :function "sh",
     :version 1,
     :created_at "2010-12-04 23:00:13.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";solve 360 is a CRM google app, RESTful. using curl is an easy way to communicate with RESTful apps.\n\n(ns solve360\n  (:use clojure.contrib.shell-out))\n\n(def get-contacts-json-format (sh\n  \"curl\"\n  \"-u\" \"360test@testcompany.com:W0I1E2dF2Ce61o6t1g2\"\n  \"-X\" \"GET\" \"-H\" \"Accept: application/json\"\n  \"https://secure.solve360.com/contacts\"))"}],
   :id 1222,
   :name "sh",
   :ns "clojure.contrib.shell-out",
   :url "http://clojuredocs.org/v/1222"},
  "clojure.core/assoc!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "dissoc!",
     :updated_at "2010-12-30 09:00:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1853",
     :line "2574",
     :arglists_comp "[map key]|[map key & ks]",
     :url_friendly_name "dissoc!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "transient",
     :updated_at "2011-06-10 13:46:48.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1816",
     :line "2537",
     :arglists_comp "[coll]",
     :url_friendly_name "transient",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "conj!",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/1761",
     :line "2553",
     :arglists_comp "[coll x]",
     :url_friendly_name "conj!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-22 19:51:03.0",
     :function "assoc!",
     :version 3,
     :created_at "2011-06-10 13:56:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The key concept to understand here is that transients are \n;; not meant to be `bashed in place`; always use the value \n;; returned by either assoc! or other functions that operate\n;; on transients.\n\n(defn merge2\n  \"An example implementation of `merge` using transients.\"\n  [x y]\n  (persistent! (reduce\n                (fn [res [k v]] (assoc! res k v))\n                (transient x)\n                y)))\n\n;; Why always use the return value, and not the original?  Because the return\n;; value might be a different object than the original.  The implementation\n;; of Clojure transients in some cases changes the internal representation\n;; of a transient collection (e.g. when it reaches a certain size).  In such\n;; cases, if you continue to try modifying the original object, the results\n;; will be incorrect.\n\n;; Think of transients like persistent collections in how you write code to\n;; update them, except unlike persistent collections, the original collection\n;; you passed in should be treated as having an undefined value.  Only the return\n;; value is predictable."}],
   :id 5367,
   :name "assoc!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5367"},
  "circumspec.for-all/char-generator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3679,
   :name "char-generator",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3679"},
  "clojure.core/merge"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "merge-with",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/2039",
     :line "2277",
     :arglists_comp "[f & maps]",
     :url_friendly_name "merge-with",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "hash-map",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2064",
     :line "321",
     :arglists_comp "[]|[& keyvals]",
     :url_friendly_name "hash-map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:32:47.0",
     :function "merge",
     :version 6,
     :created_at "2010-07-13 18:42:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (merge {:a 1 :b 2 :c 3} {:b 9 :d 4})\n{:d 4, :a 1, :b 9, :c 3}"}],
   :id 5608,
   :name "merge",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5608"},
  "clj-swing.example/paint-donut"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5194,
   :name "paint-donut",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5194"},
  "clojure.contrib.java-utils/get-system-property"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 534,
   :name "get-system-property",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/534"},
  "clojure.core/future-cancelled?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1722",
     :line "5235",
     :arglists_comp "[x]",
     :url_friendly_name "future_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-cancel",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1764",
     :line "5416",
     :arglists_comp "[f]",
     :url_friendly_name "future-cancel",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-done?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1618",
     :line "5240",
     :arglists_comp "[f]",
     :url_friendly_name "future-done_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:25:00.0",
     :function "future-cancelled?",
     :version 1,
     :created_at "2012-06-09 07:25:00.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def f (future (inc 0)))                    \n#'user/f\n\nuser=> (future-cancel f)       \nfalse\n\nuser=> (future-cancelled? f)\nfalse\n\nuser=> (future-done? f)        \ntrue\n\nuser=> @f                                          \n1\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:28:30.0",
     :function "future-cancelled?",
     :version 1,
     :created_at "2012-06-09 07:28:30.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def f (future (Thread/sleep 5000) (inc 0)))\n#'user/f\n\nuser=> (future-cancel f)                           \ntrue\n\nuser=> (future-cancelled? f)                       \ntrue\n\nuser=> (future-done? f)                            \ntrue\n\nuser=> @f                                          \njava.util.concurrent.CancellationException (NO_SOURCE_FILE:0)"}],
   :id 5529,
   :name "future-cancelled?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5529"},
  "clojure.data/equality-partition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5862,
   :name "equality-partition",
   :ns "clojure.data",
   :url "http://clojuredocs.org/v/5862"},
  "incanter.io/read-dataset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2927,
   :name "read-dataset",
   :ns "incanter.io",
   :url "http://clojuredocs.org/v/2927"},
  "clojure.core/construct-proxy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5437,
   :name "construct-proxy",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5437"},
  "clojure.contrib.generic.collection/empty"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "empty?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1795",
     :line "4962",
     :arglists_comp "[coll]",
     :url_friendly_name "empty_q",
     :file "clojure/core.clj"}],
   :examples [],
   :id 391,
   :name "empty",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/391"},
  "clojure.contrib.find-namespaces/find-namespaces-in-jarfile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 314,
   :name "find-namespaces-in-jarfile",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/314"},
  "clojure.contrib.strint/<<"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1348,
   :name "<<",
   :ns "clojure.contrib.strint",
   :url "http://clojuredocs.org/v/1348"},
  "swank.dev/with-swank-io"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4283,
   :name "with-swank-io",
   :ns "swank.dev",
   :url "http://clojuredocs.org/v/4283"},
  "clojure.contrib.trace/trace-fn-call"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1412,
   :name "trace-fn-call",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1412"},
  "clojure.contrib.duck-streams/*default-encoding*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 260,
   :name "*default-encoding*",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/260"},
  "clojure.core/sorted-map"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "sorted-map-by",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1783",
     :line "343",
     :arglists_comp "[comparator & keyvals]",
     :url_friendly_name "sorted-map-by",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "subseq",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/2102",
     :line "4026",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "subseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "rsubseq",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1719",
     :line "4042",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "rsubseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-set",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2099",
     :line "350",
     :arglists_comp "[& keys]",
     :url_friendly_name "sorted-set",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:33:08.0",
     :function "sorted-map",
     :version 3,
     :created_at "2010-08-02 03:52:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (sorted-map :z 1, :b 2, :a 3)\n{:a 3, :b 2, :z 1}"}],
   :id 5763,
   :name "sorted-map",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5763"},
  "incanter.stats/median"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3329,
   :name "median",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3329"},
  "swank.commands.basic/swank-toggle-trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4002,
   :name "swank-toggle-trace",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4002"},
  "incanter.symbolic/all-fn-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3386,
   :name "all-fn-list",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3386"},
  "clj-ssh.ssh/ssh-shell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1460,
   :name "ssh-shell",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1460"},
  "incanter.core/solve-quadratic"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2894,
   :name "solve-quadratic",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2894"},
  "incanter.charts/scatter-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2796,
   :name "scatter-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2796"},
  "clojure.java.io/as-relative-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5881,
   :name "as-relative-path",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5881"},
  "clojure.pprint/*print-pretty*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5926,
   :name "*print-pretty*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5926"},
  "lancet/war"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3483,
   :name "war",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3483"},
  "clojure.core/print-doc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1626,
   :name "print-doc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/1626"},
  "incanter.processing/smooth"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3085,
   :name "smooth",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3085"},
  "clojure.core/bit-flip"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:33:28.0",
     :function "bit-flip",
     :version 3,
     :created_at "2010-07-28 10:52:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-flip 2r1011 2)\n15 \n;; 15 = 2r1111\n\n(bit-flip 2r1111 2)\n11 \n;; 11 = 2r1011"}],
   :id 5383,
   :name "bit-flip",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5383"},
  "clojure.contrib.seq/rec-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1155,
   :name "rec-seq",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1155"},
  "midje.unprocessed/truthy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4364,
   :name "truthy",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4364"},
  "clojure.contrib.graph/scc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 439,
   :name "scc",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/439"},
  "clojure.contrib.monads/write"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 794,
   :name "write",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/794"},
  "clojure.contrib.pprint.pretty-writer/buffer-blob"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 940,
   :name "buffer-blob",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/940"},
  "lancet/available"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3396,
   :name "available",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3396"},
  "clojure.pprint/cl-format"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "printf",
     :updated_at "2011-03-08 10:56:58.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1918",
     :line "4577",
     :arglists_comp "[fmt & args]",
     :url_friendly_name "printf",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "format",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1521",
     :line "4569",
     :arglists_comp "[fmt & args]",
     :url_friendly_name "format",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 340,
     :ns "clojure.pprint",
     :updated_at "2012-03-22 23:01:08.0",
     :function "cl-format",
     :version 3,
     :created_at "2012-03-22 22:52:34.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Formatting integers, with options, in one of many bases.\n\n;; First arg true sends formatted output to *out*\nuser=> (cl-format true \"~5d\\n\" 3)\n    3\nnil\n\n;; First arg nil or false causes formatted output to be returned as string\nuser=> (cl-format nil \"~5d\" 3)\n\"    3\"\n\nuser=> (cl-format nil \"Pad with leading zeros ~5,'0d\" 3)\n\"Pad with leading zeros 00003\"\n\nuser=> (cl-format nil \"Pad with leading asterisks ~5,'*d\" 3)\n\"Pad with leading asterisks ****3\"\n\n;; If there is a way to specify left-justifying a number in a single\n;; format string, please add it here.  It can be done by using one\n;; cl-format invocation to get a formatted number as a string, and\n;; then use the ~<width>a specifier on the result.\nuser=> (cl-format nil \"~15a\" (cl-format nil \"~:d\" 1234567))\n\"1,234,567      \"\n\nuser=> (cl-format nil \"Always print the sign ~5@d\" 3)\n\"Always print the sign    +3\"\n\nuser=> (cl-format nil \"Use comma group-separator every 3 digits ~12:d\" 1234567)\n\"Use comma group-separator every 3 digits    1,234,567\"\n\nuser=> (cl-format nil \"decimal ~d  binary ~b  octal ~o  hex ~x\" 63 63 63 63)\n\"decimal 63  binary 111111  octal 77  hex 3f\"\n\nuser=> (cl-format nil \"base 7  ~7r  with width and zero pad  ~7,15,'0r\" 63 63)\n\"base 7  120  with width and zero pad  000000000000120\"\n\n;; No need for you to do any conversions to use cl-format with BigInt,\n;; BigInteger, or BigDecimal.\nuser=> (cl-format nil \"cl-format handles BigInts ~15d\" 12345678901234567890)\n\"cl-format handles BigInts 12345678901234567890\"\n\nuser=> (cl-format nil \"Be aware of auto-conversion  ~8,'0d  ~8,'0d\" 2.4 -5/4)\n\"Be aware of auto-conversion  000002.4  0000-5/4\"\n\n;; This might look like a bug, but it is actually behavior specified by the\n;; Common Lisp HyperSpec mentioned in the docs above.  If you don't want that\n;; behavior (format \"%08d\" -2) might suit your purposes better.\nuser=> (cl-format nil \"~8,'0d\" -2)\n\"000000-2\""}],
   :id 5930,
   :name "cl-format",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5930"},
  "clojure.contrib.javadoc.browse/open-url-in-browser"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 544,
   :name "open-url-in-browser",
   :ns "clojure.contrib.javadoc.browse",
   :url "http://clojuredocs.org/v/544"},
  "swank.commands.basic/frame-locals-and-catch-tags"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4029,
   :name "frame-locals-and-catch-tags",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4029"},
  "clojure.contrib.test-is/assert-expr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1397,
   :name "assert-expr",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1397"},
  "clojure.contrib.lazy-xml/parse-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 621,
   :name "parse-seq",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/621"},
  "clojure.core/rseq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "reverse",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/1844",
     :line "802",
     :arglists_comp "[coll]",
     :url_friendly_name "reverse",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:47:14.0",
     :function "rseq",
     :version 3,
     :created_at "2010-08-20 10:12:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (vec (range 10))\n[0 1 2 3 4 5 6 7 8 9]\n\nuser=> (rseq (vec (range 10)))\n(9 8 7 6 5 4 3 2 1 0)\n"}],
   :id 5736,
   :name "rseq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5736"},
  "clojure.contrib.probabilities.finite-distributions/binomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1085,
   :name "binomial",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1085"},
  "clojure.set/select"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "filter",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1784",
     :line "2124",
     :arglists_comp "[pred coll]",
     :url_friendly_name "filter",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-09-26 05:24:22.0",
     :function "select",
     :version 3,
     :created_at "2010-07-10 21:26:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (select odd? #{1 2 3} )\n#{1 3}\n"}],
   :id 5987,
   :name "select",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5987"},
  "circumspec.for-all/digit*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3680,
   :name "digit*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3680"},
  "clojure.contrib.probabilities.random-numbers/rand-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1109,
   :name "rand-stream",
   :ns "clojure.contrib.probabilities.random-numbers",
   :url "http://clojuredocs.org/v/1109"},
  "swank.commands.inspector/print-part-to-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4241,
   :name "print-part-to-string",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4241"},
  "swank.core/with-env-locals"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4023,
   :name "with-env-locals",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4023"},
  "incanter.charts/set-y-label"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2812,
   :name "set-y-label",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2812"},
  "clojure.inspector/inspect-table"
  {:comments [],
   :see-alsos
   [{:namespace_id 340,
     :weight 2,
     :name "print-table",
     :updated_at "2012-02-21 21:43:47.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:14:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5943",
     :line "11",
     :arglists_comp "[ks rows]|[rows]",
     :url_friendly_name "print-table",
     :file "clojure/pprint/print_table.clj"}
    {:namespace_id 101,
     :weight 0,
     :name "inspect-tree",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/2123",
     :line "87",
     :arglists_comp "[data]",
     :url_friendly_name "inspect-tree",
     :file "clojure/inspector.clj"}],
   :examples [],
   :id 5868,
   :name "inspect-table",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5868"},
  "clojure.core/time"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-12 01:16:14.0",
     :function "time",
     :version 1,
     :created_at "2010-10-12 01:16:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (time (Thread/sleep 100))\n\"Elapsed time: 100.284772 msecs\"\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-05 19:36:43.0",
     :function "time",
     :version 1,
     :created_at "2010-11-05 19:36:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body ";when working with lazy seqs\n(time (doall (...)))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-28 23:43:32.0",
     :function "time",
     :version 2,
     :created_at "2012-05-28 23:39:43.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Time how long it takes to write a string to a file 100 times\n(defn time-test []\n  (with-open [w (writer \"test.txt\" :append false)]\n    (dotimes [_ 100]\n      (.write w \"I am being written to a file.\"))))\n\n\nuser=> (time (time-test))\n\"Elapsed time: 19.596371 msecs\""}],
   :id 5791,
   :name "time",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5791"},
  "swank.commands.basic/locals-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4011,
   :name "locals-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4011"},
  "incanter.processing/constrain"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3000,
   :name "constrain",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3000"},
  "incanter.processing/HSB"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3069,
   :name "HSB",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3069"},
  "clojure.contrib.pprint.column-writer/column-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 828,
   :name "column-writer",
   :ns "clojure.contrib.pprint.column-writer",
   :url "http://clojuredocs.org/v/828"},
  "net.cgrand.enlive-html/at"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3896,
   :name "at",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3896"},
  "clojure.contrib.find-namespaces/clojure-sources-in-jar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 310,
   :name "clojure-sources-in-jar",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/310"},
  "clojure.core/conj!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "transient",
     :updated_at "2011-06-10 13:46:48.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1816",
     :line "2537",
     :arglists_comp "[coll]",
     :url_friendly_name "transient",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "assoc!",
     :updated_at "2011-06-10 13:56:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1640",
     :line "2561",
     :arglists_comp "[coll key val]|[coll key val & kvs]",
     :url_friendly_name "assoc!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dissoc!",
     :updated_at "2010-12-30 09:00:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1853",
     :line "2574",
     :arglists_comp "[map key]|[map key & ks]",
     :url_friendly_name "dissoc!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-22 20:05:09.0",
     :function "conj!",
     :version 2,
     :created_at "2010-10-12 00:57:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; As seen on http://clojure.org/transients\n;; array is initially made transient, modified then\n;; finally made persistent.\n\n;; Note: This example correctly always uses the return value of conj! for\n;; future modifications, not the original value of v.  See assoc! examples\n;; for some discussion of why this is important.\n\n(defn vrange2 [n]\n  (loop [i 0 v (transient [])]\n    (if (< i n)\n      (recur (inc i) (conj! v i))\n      (persistent! v))))\n\nuser=> (vrange2 10)\n[0 1 2 3 4 5 6 7 8 9]"}],
   :id 5434,
   :name "conj!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5434"},
  "incanter.processing/DODGE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3129,
   :name "DODGE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3129"},
  "incanter.stats/t-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3280,
   :name "t-test",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3280"},
  "incanter.processing/string->text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3096,
   :name "string->text",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3096"},
  "clojure.contrib.fnmap.PersistentFnMap/-assoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 327,
   :name "-assoc",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/327"},
  "net.licenser.sandbox.jvm/priv-action"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5119,
   :name "priv-action",
   :ns "net.licenser.sandbox.jvm",
   :url "http://clojuredocs.org/v/5119"},
  "incanter.processing/BURN"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3025,
   :name "BURN",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3025"},
  "clojure.contrib.macros/letfn-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 688,
   :name "letfn-",
   :ns "clojure.contrib.macros",
   :url "http://clojuredocs.org/v/688"},
  "circumspec.should/should-exception-matches"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3744,
   :name "should-exception-matches",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3744"},
  "swank.rpc/log-event"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4312,
   :name "log-event",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4312"},
  "ring.handler.dump/template"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2635,
   :name "template",
   :ns "ring.handler.dump",
   :url "http://clojuredocs.org/v/2635"},
  "swank.util.java/member-static?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4137,
   :name "member-static?",
   :ns "swank.util.java",
   :url "http://clojuredocs.org/v/4137"},
  "incanter.processing/start-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3091,
   :name "start-loop",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3091"},
  "clojure.core/not-any?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 7,
     :name "some",
     :updated_at "2011-08-31 02:17:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1541",
     :line "2045",
     :arglists_comp "[pred coll]",
     :url_friendly_name "some",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:33:47.0",
     :function "not-any?",
     :version 3,
     :created_at "2010-07-13 19:28:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (not-any? odd? '(2 4 6))\ntrue\nuser=> (not-any? odd? '(1 2 3))\nfalse"}],
   :id 5627,
   :name "not-any?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5627"},
  "clojure.contrib.pprint/pp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 994,
   :name "pp",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/994"},
  "clojure.contrib.datalog.rules/all-predicates"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 147,
   :name "all-predicates",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/147"},
  "clojure.contrib.datalog.literals/build-seed-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 204,
   :name "build-seed-bindings",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/204"},
  "swank.commands.basic/who-calls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4105,
   :name "who-calls",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4105"},
  "leiningen.pom/default-repos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3535,
   :name "default-repos",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3535"},
  "clojure.contrib.ns-utils/vars"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "var",
     :updated_at "2010-11-08 02:40:48.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5272",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "var",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "var?",
     :updated_at "2010-11-08 03:07:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1787",
     :line "3935",
     :arglists_comp "[v]",
     :url_friendly_name "var_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "symbol",
     :updated_at "2010-11-08 06:20:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1624",
     :line "476",
     :arglists_comp "[name]|[ns name]",
     :url_friendly_name "symbol",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "symbol?",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1606",
     :line "466",
     :arglists_comp "[x]",
     :url_friendly_name "symbol_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 7,
     :name "ns",
     :updated_at "2011-02-13 23:57:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1794",
     :line "4594",
     :arglists_comp "[name docstring? attr-map? references*]",
     :url_friendly_name "ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "def",
     :updated_at "2011-08-16 10:30:10.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5268",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "def",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "ns-map",
     :updated_at "2010-10-25 23:35:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1997",
     :line "3216",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 62,
     :ns "clojure.contrib.ns-utils",
     :updated_at "2010-11-08 02:59:27.0",
     :function "vars",
     :version 1,
     :created_at "2010-11-08 02:59:27.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(ns users)\n(use 'clojure.contrib.ns-utils)\n(def my-symbol 5)\n(vars users)\n=> (my-symbol)"}],
   :id 728,
   :name "vars",
   :ns "clojure.contrib.ns-utils",
   :url "http://clojuredocs.org/v/728"},
  "clojure.contrib.mock.test-adapter/make-mock"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 735,
   :name "make-mock",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/735"},
  "swank.core.server/start-swank-socket-server!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4268,
   :name "start-swank-socket-server!",
   :ns "swank.core.server",
   :url "http://clojuredocs.org/v/4268"},
  "midje.unprocessed/call-faker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4357,
   :name "call-faker",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4357"},
  "clojure.contrib.complex-numbers/complex-struct"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 51,
   :name "complex-struct",
   :ns "clojure.contrib.complex-numbers",
   :url "http://clojuredocs.org/v/51"},
  "clojure.contrib.io/pwd"
  {:comments
   [{:namespace_id 40,
     :ns "clojure.contrib.io",
     :updated_at "2011-07-04 22:33:05.0",
     :user_id 329,
     :function "pwd",
     :version "1.2.0",
     :created_at "2011-07-04 22:23:20.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "Make sure you say\n(use 'clojure.contrib.io)\nbefore using pwd."}],
   :see-alsos [],
   :examples [],
   :id 513,
   :name "pwd",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/513"},
  "clojure.contrib.shell/sh"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1211,
   :name "sh",
   :ns "clojure.contrib.shell",
   :url "http://clojuredocs.org/v/1211"},
  "swank.util.concurrent.thread/thread-set-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4044,
   :name "thread-set-name",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4044"},
  "clojure.xml/*sb*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6085,
   :name "*sb*",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6085"},
  "clojure.core/enumeration-seq"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-17 05:12:53.0",
     :function "enumeration-seq",
     :version 1,
     :created_at "2012-07-17 05:12:53.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (enumeration-seq (java.util.StringTokenizer. \"exciting example\"))\n(\"exciting\" \"example\")\n"}],
   :id 5489,
   :name "enumeration-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5489"},
  "lancet/deltree"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3424,
   :name "deltree",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3424"},
  "incanter.processing/curve-detail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3224,
   :name "curve-detail",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3224"},
  "clojure.contrib.graph/transitive-closure"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 440,
   :name "transitive-closure",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/440"},
  "clojure.core/with-redefs-fn"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 3,
     :name "with-redefs",
     :updated_at "2012-11-09 06:25:12.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5850",
     :line "6487",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "with-redefs",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-09 06:31:07.0",
     :function "with-redefs-fn",
     :version 3,
     :created_at "2012-10-11 23:43:50.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(ns http)\n\n(defn post [url]\n  {:body \"Hello world\"})\n\n(ns app\n  (:require [clojure.test :refer [run-tests]]))\n\n(deftest is-a-fn\n  (with-redefs-fn {#'http/post (fn [url] {:body \"Hello world again\"})}\n    #(is (= {:body \"Hello world again\"} (http/post \"http://service.com/greet\")))))\n\n(run-tests) ;; test is passing"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-08 09:09:53.0",
     :function "with-redefs-fn",
     :version 1,
     :created_at "2012-11-08 09:09:53.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "=> (defn f [] false)\n\n=> (println (f))\n;; false\n\n=> (with-redefs-fn {#'f (fn [] true)} \n     #(println (f)))\n;; true"}],
   :id 5851,
   :name "with-redefs-fn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5851"},
  "clojure.test.junit/test-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6066,
   :name "test-name",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6066"},
  "clojure.contrib.string/dochars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1332,
   :name "dochars",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1332"},
  "clojure.contrib.macro-utils/with-symbol-macros"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 673,
   :name "with-symbol-macros",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/673"},
  "clojure.contrib.swing-utils/add-action-listener"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1358,
   :name "add-action-listener",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1358"},
  "leiningen.classpath/get-classpath"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3503,
   :name "get-classpath",
   :ns "leiningen.classpath",
   :url "http://clojuredocs.org/v/3503"},
  "clojure.contrib.pprint.pretty-writer/pretty-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 883,
   :name "pretty-writer",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/883"},
  "clojure.contrib.fnmap.PersistentFnMap/-cons"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 324,
   :name "-cons",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/324"},
  "clojure.contrib.dataflow/*meta*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 131,
   :name "*meta*",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/131"},
  "incanter.stats/pdf-beta"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3352,
   :name "pdf-beta",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3352"},
  "clojure.zip/up"
  {:comments [],
   :see-alsos
   [{:namespace_id 120,
     :weight 0,
     :name "down",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2576",
     :line "109",
     :arglists_comp "[loc]",
     :url_friendly_name "down",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "left",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/2600",
     :line "166",
     :arglists_comp "[loc]",
     :url_friendly_name "left",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "right",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/2599",
     :line "149",
     :arglists_comp "[loc]",
     :url_friendly_name "right",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "next",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/2579",
     :line "230",
     :arglists_comp "[loc]",
     :url_friendly_name "next",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "seq-zip",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2594",
     :line "35",
     :arglists_comp "[root]",
     :url_friendly_name "seq-zip",
     :file "clojure/zip.clj"}],
   :examples [],
   :id 6121,
   :name "up",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6121"},
  "clojure.core/find-ns"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "create-ns",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1798",
     :line "3182",
     :arglists_comp "[sym]",
     :url_friendly_name "create-ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-ns",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1687",
     :line "3189",
     :arglists_comp "[sym]",
     :url_friendly_name "remove-ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:51:53.0",
     :function "find-ns",
     :version 3,
     :created_at "2010-09-07 23:02:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (require 'clojure.string)\nnil\n\nuser=> (find-ns 'clojure.string)\n#&lt;Namespace clojure.string&gt;"}],
   :id 5507,
   :name "find-ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5507"},
  "circumspec.utils/*allow-re-defn*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3763,
   :name "*allow-re-defn*",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3763"},
  "net.cgrand.enlive-html/first-of-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3942,
   :name "first-of-type",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3942"},
  "incanter.processing/print-projection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3231,
   :name "print-projection",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3231"},
  "circumspec.watch/namespaces-to-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3768,
   :name "namespaces-to-test",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3768"},
  "swank.commands.inspector/inspector-next"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4232,
   :name "inspector-next",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4232"},
  "clj-swing.tree/changed-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5222,
   :name "changed-path",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5222"},
  "ring.util.codec/url-decode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2650,
   :name "url-decode",
   :ns "ring.util.codec",
   :url "http://clojuredocs.org/v/2650"},
  "swank.commands.basic/frame-locals-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3981,
   :name "frame-locals-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3981"},
  "clj-swing.core/remove-known-keys"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5163,
   :name "remove-known-keys",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5163"},
  "incanter.processing/OPENGL"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3089,
   :name "OPENGL",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3089"},
  "clojure.contrib.test-is/is"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1371,
   :name "is",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1371"},
  "incanter.stats/within"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3351,
   :name "within",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3351"},
  "incanter.core/sum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2844,
   :name "sum",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2844"},
  "clojure.contrib.mock/more-than"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5250,
   :name "more-than",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5250"},
  "clj-swing.button/button"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 315,
     :ns "clj-swing.button",
     :updated_at "2010-09-07 11:30:57.0",
     :function "button",
     :version 2,
     :created_at "2010-09-07 11:30:57.0",
     :library "clj-swing",
     :lib_version "0.1.0-SNAPSHOT",
     :library_id 14,
     :body
     "<pre>\r\n(defn button-example []\r\n  (frame :title \"A Button Example\"\r\n\t :layout (FlowLayout.)\r\n\t :size [220 90]\r\n\t :show true\r\n\t [b1 (button \"First\")\r\n\t  b2 (button \"Second\")\r\n\t  lab (label \"Press a button\")]\r\n\t (add-action-listener b1 ([e] (println \"listener called\")))))\r\n</pre>"}],
   :id 5156,
   :name "button",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5156"},
  "clojure.core/fnext"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "ffirst",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1818",
     :line "90",
     :arglists_comp "[x]",
     :url_friendly_name "ffirst",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:34:13.0",
     :function "fnext",
     :version 3,
     :created_at "2010-07-28 12:58:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (fnext ['(a b c) '(b a c)])\n(b a c) \n\nuser=> (fnext '([a b c] [b a c]))\n[b a c] \n\nuser=> (fnext {:a 1 :b 2 :c 3})\n[:b 2] \n\nuser=> (fnext [])\nnil \n\nuser=> (fnext [1])\nnil"}],
   :id 5520,
   :name "fnext",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5520"},
  "clojure.contrib.monads/m-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 780,
   :name "m-seq",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/780"},
  "clojure.core/shuffle"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:34:51.0",
     :function "shuffle",
     :version 3,
     :created_at "2010-08-20 08:57:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (repeatedly 5 (partial shuffle [1 2 3]))\n([1 2 3] [1 2 3] [1 2 3] [1 2 3] [3 1 2])"}],
   :id 5756,
   :name "shuffle",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5756"},
  "clojure.contrib.generic.arithmetic/defmethod*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 388,
   :name "defmethod*",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/388"},
  "incanter.stats/pairings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3299,
   :name "pairings",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3299"},
  "clojure.contrib.mock/unexpected-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5260,
   :name "unexpected-args",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5260"},
  "incanter.processing/curve-tightness"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3071,
   :name "curve-tightness",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3071"},
  "clojure.zip/xml-zip"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2011-12-12 14:45:37.0",
     :function "xml-zip",
     :version 1,
     :created_at "2011-12-12 14:45:37.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def xmlzipper (clojure.zip/xml-zip (clojure.xml/parse \"resources/somedata.xml\")))\n\n;;make a zippper pointing at the children to the topnode in somedata.xml\n(clojure.zip/children xmlzipper)\n\n \n\n\n\n\n"}
    {:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2012-04-24 22:53:19.0",
     :function "xml-zip",
     :version 1,
     :created_at "2012-04-24 22:53:19.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(require '[clojure.zip :as z])\n\nuser=> (z/right\n        (z/down\n         (z/xml-zip \n          {:tag :root :content [{:tag :any :content [\"foo\" \"bar\"]} \"bar\"]})))\n[\"bar\" {:l [{:content [\"foo\" \"bar\"], :tag :any}], :pnodes [{:content [{:content [\"foo\" \"bar\"], :tag :any} \"bar\"], :tag :root}], :ppath nil, :r nil}]\n\n;; The above can also be written like this:\nuser=> (->\n        (z/xml-zip {:tag :root :content [{:tag :any :content [\"foo\" \"bar\"]} \"bar\"]})\n        z/down z/right)\n[\"bar\" {:l [{:content [\"foo\" \"bar\"], :tag :any}], :pnodes [{:content [{:content [\"foo\" \"bar\"], :tag :any} \"bar\"], :tag :root}], :ppath nil, :r nil}]"}],
   :id 6123,
   :name "xml-zip",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6123"},
  "clojure.contrib.monadic-io-streams/with-io-streams"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 764,
   :name "with-io-streams",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/764"},
  "clj-swing.core/insert-at"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5165,
   :name "insert-at",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5165"},
  "clj-swing.list/jlist"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5207,
   :name "jlist",
   :ns "clj-swing.list",
   :url "http://clojuredocs.org/v/5207"},
  "swank.core.server/simple-announce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4270,
   :name "simple-announce",
   :ns "swank.core.server",
   :url "http://clojuredocs.org/v/4270"},
  "clj-swing.text-field/text-field"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5211,
   :name "text-field",
   :ns "clj-swing.text-field",
   :url "http://clojuredocs.org/v/5211"},
  "swank.commands.inspector/label-value-line"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4212,
   :name "label-value-line",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4212"},
  "clojure.contrib.repl-utils/*remote-javadocs*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 373,
   :name "*remote-javadocs*",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/373"},
  "lancet/nice"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3434,
   :name "nice",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3434"},
  "clojure.contrib.seq-utils/partition-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1181,
   :name "partition-all",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1181"},
  "swank.core/*sldb-initial-frames*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4022,
   :name "*sldb-initial-frames*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4022"},
  "clojure.contrib.logging/log-capture!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 652,
   :name "log-capture!",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/652"},
  "clojure.contrib.test-is/do-template"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1365,
   :name "do-template",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1365"},
  "clj-swing.tree/tree"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5221,
   :name "tree",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5221"},
  "clojure.contrib.monads/listen"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 792,
   :name "listen",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/792"},
  "clojure.contrib.duck-streams/reader"
  {:comments
   [{:namespace_id 21,
     :ns "clojure.contrib.duck-streams",
     :updated_at "2011-03-14 08:52:19.0",
     :user_id 188,
     :function "reader",
     :version "1.2.0",
     :created_at "2011-03-14 08:52:19.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "Deprecated.\nUse <a href=\"http://clojuredocs.org/clojure_core/clojure.java.io/reader\">clojure.java.io/reader</a>."}],
   :see-alsos [],
   :examples [],
   :id 262,
   :name "reader",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/262"},
  "clojure.contrib.def/defalias"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 20,
     :ns "clojure.contrib.def",
     :updated_at "2011-03-24 16:32:53.0",
     :function "defalias",
     :version 2,
     :created_at "2011-03-24 16:32:34.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user=> (use 'clojure.contrib.def)\nnil\nuser=> (defn square \"Squares the given number\" [x] (* x x))\n#'user/square\nuser=> (defalias sq square)\n#'user/sq\nuser=> (doc sq) ;; same metadata as original var\n-------------------------\nuser/sq\n([x])\n  Squares the given number\nnil\nuser=> (square 2)\n4\nuser=> (sq 2)\n4"}],
   :id 96,
   :name "defalias",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/96"},
  "circumspec.test/test?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3688,
   :name "test?",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3688"},
  "clojure.contrib.jmx/jmx->clj"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 567,
   :name "jmx->clj",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/567"},
  "clojure.contrib.generic.comparison/max"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 403,
   :name "max",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/403"},
  "circumspec.report.nested/name-line"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3703,
   :name "name-line",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3703"},
  "clojure.contrib.monads/with-monad"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 765,
   :name "with-monad",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/765"},
  "incanter.core/$fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2909,
   :name "$fn",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2909"},
  "incanter.charts/add-histogram*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2783,
   :name "add-histogram*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2783"},
  "clojure.contrib.mmap/READ_ONLY"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 723,
   :name "READ_ONLY",
   :ns "clojure.contrib.mmap",
   :url "http://clojuredocs.org/v/723"},
  "incanter.charts/function-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2805,
   :name "function-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2805"},
  "net.cgrand.enlive-html/attr-ends"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3914,
   :name "attr-ends",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3914"},
  "incanter.processing/AMBIENT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3057,
   :name "AMBIENT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3057"},
  "midje.checkers/truthy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4328,
   :name "truthy",
   :ns "midje.checkers",
   :url "http://clojuredocs.org/v/4328"},
  "clojure.contrib.generic.collection/dissoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 397,
   :name "dissoc",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/397"},
  "swank.commands.basic/swank-macroexpand-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4064,
   :name "swank-macroexpand-all",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4064"},
  "clojure.core/iterate"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "cycle",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1863",
     :line "2211",
     :arglists_comp "[coll]",
     :url_friendly_name "cycle",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "repeatedly",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2069",
     :line "4058",
     :arglists_comp "[f]|[n f]",
     :url_friendly_name "repeatedly",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "repeat",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1578",
     :line "2230",
     :arglists_comp "[x]|[n x]",
     :url_friendly_name "repeat",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-23 02:40:30.0",
     :function "iterate",
     :version 8,
     :created_at "2010-07-13 12:19:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; iterate Ad Infinitum starting at 5 using the inc (increment) function\nuser=> (iterate inc 5)\n(5 6 7 8 9 10 11 12 13 14 15 ... n\n\n;; limit results\nuser=> (take 5 (iterate inc 5))\n(5 6 7 8 9)\n\nuser=> (take 10 (iterate (partial + 2) 0))\n(0 2 4 6 8 10 12 14 16 18)\n\nuser=> (take 20 (iterate (partial + 2) 0))\n(0 2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38)\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:14:20.0",
     :function "iterate",
     :version 3,
     :created_at "2010-08-01 17:09:53.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def powers-of-two (iterate (partial * 2) 1))\n#'user/powers-of-two\n\nuser=> (nth powers-of-two 10)\n1024\nuser=> (take 10 powers-of-two)\n(1 2 4 8 16 32 64 128 256 512)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-10-11 16:48:26.0",
     :function "iterate",
     :version 4,
     :created_at "2011-07-16 14:14:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; demonstrating the power of iterate\n;; to generate the Fibonacci sequence\nuser=> (def fib (map first (iterate (fn [[a b]] [b (+ a b)]) [0 1])))\n#'user/fib\n\nuser=> (take 10 fib)\n(0 1 1 2 3 5 8 13 21 34)"}],
   :id 5568,
   :name "iterate",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5568"},
  "clojure.core/associative?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-20 04:08:17.0",
     :function "associative?",
     :version 1,
     :created_at "2012-01-20 04:08:17.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (associative? [1 2 3]) ; vector\ntrue\nuser=> (associative? '(1 2 3)) ; list\nfalse\nuser=> (associative? {:a 1 :b 2}) ; map\ntrue\nuser=> (associative? #{:a :b :c}) ; set\nfalse\nuser=> (associative? \"fred\") ; string\nfalse\n"}],
   :id 5369,
   :name "associative?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5369"},
  "incanter.processing/ortho"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3258,
   :name "ortho",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3258"},
  "net.cgrand.enlive-html/sniptest"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3917,
   :name "sniptest",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3917"},
  "clojure.contrib.datalog.database/get-relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 167,
   :name "get-relation",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/167"},
  "clojure.contrib.json/json-str"
  {:comments [],
   :see-alsos
   [{:namespace_id 48,
     :weight 2,
     :name "read-json",
     :updated_at "2010-10-26 19:05:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:53:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/603",
     :line "189",
     :arglists_comp
     "[input]|[input keywordize?]|[input keywordize? eof-error? eof-value]",
     :url_friendly_name "read-json",
     :file "clojure/contrib/json.clj"}],
   :examples
   [{:namespace_id 48,
     :ns "clojure.contrib.json",
     :updated_at "2010-10-25 15:48:44.0",
     :function "json-str",
     :version 1,
     :created_at "2010-10-25 15:48:44.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(json-str {:a \"a value\"})\n\"{\\\"a\\\":\\\"a value\\\"}\"\n\n(json-str {[1 2] [1,2,3]})\n\"{\\\"[1 2]\\\":[1,2,3]}\"\n"}
    {:namespace_id 48,
     :ns "clojure.contrib.json",
     :updated_at "2010-10-25 16:09:58.0",
     :function "json-str",
     :version 1,
     :created_at "2010-10-25 16:09:58.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body "(json-str 1)  \n\"1\"\n"}],
   :id 583,
   :name "json-str",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/583"},
  "clojure.contrib.accumulators/empty-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 15,
   :name "empty-string",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/15"},
  "clojure.contrib.stream-utils/stream-next"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1093,
   :name "stream-next",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1093"},
  "incanter.processing/hue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3117,
   :name "hue",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3117"},
  "clojure.contrib.io/delete-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 506,
   :name "delete-file",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/506"},
  "clj-swing.core/add-listener"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5167,
   :name "add-listener",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5167"},
  "clojure.contrib.jmx/raw-read"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 552,
   :name "raw-read",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/552"},
  "clojure.set/difference"
  {:comments [],
   :see-alsos
   [{:namespace_id 111,
     :weight 1,
     :name "union",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/2451",
     :line "19",
     :arglists_comp "[]|[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "union",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "intersection",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2457",
     :line "32",
     :arglists_comp "[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "intersection",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 0,
     :name "superset?",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2454",
     :line "150",
     :arglists_comp "[set1 set2]",
     :url_friendly_name "superset_q",
     :file "clojure/set.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2012-03-28 09:35:29.0",
     :function "difference",
     :version 3,
     :created_at "2010-07-10 21:28:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (difference #{1 2 3})\n#{1 2 3}\nuser=> (difference #{1 2} #{2 3})\n#{1}\nuser=> (difference #{1 2 3} #{1} #{1 4} #{3})\n#{2}"}
    {:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2012-03-28 09:35:42.0",
     :function "difference",
     :version 3,
     :created_at "2010-07-17 09:36:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (difference (set (keys {:1 1 :2 2 :3 3})) (set (keys {:1 1 :2 2})))\n#{:3}\nuser=> (difference (set (keys {:1 1 :2 2})) (set (keys {:1 1 :2 2 :3 3})))\n#{}"}],
   :id 5979,
   :name "difference",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5979"},
  "clojure.core/ifn?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "fn?",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/1523",
     :line "4989",
     :arglists_comp "[x]",
     :url_friendly_name "fn_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-23 01:59:02.0",
     :function "ifn?",
     :version 5,
     :created_at "2010-08-05 23:43:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; An anonymous function is a function as you'd expect\nuser=> (ifn? #(\"my anonymous function\"))\ntrue\n\n;; Is a vector a function?\nuser=> (ifn? [1 2 3])\ntrue\n\n;; Sure is, lets call it.\nuser=> ([1 2 3] 0)\n1\n\n;; Maps and sets are functions, too.\n\n;; a number is definitely not a function\nuser=> (ifn? 1)\nfalse\n\n;; but a symbol is\nuser=> (ifn? 'foo)\ntrue\n\n;; and so is a keyword\nuser=> (ifn? :foo)\ntrue"}],
   :id 5550,
   :name "ifn?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5550"},
  "clojure.contrib.java-utils/wall-hack-method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 533,
   :name "wall-hack-method",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/533"},
  "clojure.contrib.zip-filter/ancestors"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1438,
   :name "ancestors",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1438"},
  "clojure.contrib.str-utils2/escape"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1284,
   :name "escape",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1284"},
  "incanter.latex/add-latex-subtitle"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2969,
   :name "add-latex-subtitle",
   :ns "incanter.latex",
   :url "http://clojuredocs.org/v/2969"},
  "swank.commands.basic/*compiler-exception-location-re*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4084,
   :name "*compiler-exception-location-re*",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4084"},
  "ring.adapter.httpcore/run-httpcore"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2611,
   :name "run-httpcore",
   :ns "ring.adapter.httpcore",
   :url "http://clojuredocs.org/v/2611"},
  "clojure.contrib.monads/sequence-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 813,
   :name "sequence-t",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/813"},
  "swank.rpc/*log-output*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4311,
   :name "*log-output*",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4311"},
  "clojure.contrib.condition/*selector*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 60,
   :name "*selector*",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/60"},
  "clojure.contrib.repl-ln/repl-prompt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1145,
   :name "repl-prompt",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1145"},
  "clojure.contrib.pprint.pretty-writer/write-token"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 939,
   :name "write-token",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/939"},
  "lancet/ant-filter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3496,
   :name "ant-filter",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3496"},
  "clojure.xml/content-handler"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6090,
   :name "content-handler",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6090"},
  "lancet/rename"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3463,
   :name "rename",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3463"},
  "clojure.core/rem"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "quot",
     :updated_at "2011-08-19 14:11:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1839",
     :line "1004",
     :arglists_comp "[num div]",
     :url_friendly_name "quot",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "mod",
     :updated_at "2011-08-24 14:32:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/2003",
     :line "2734",
     :arglists_comp "[num div]",
     :url_friendly_name "mod",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:36:08.0",
     :function "rem",
     :version 3,
     :created_at "2010-07-13 18:40:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (rem 10 9)\n1\nuser=> (rem 2 2)\n0"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-24 14:31:49.0",
     :function "rem",
     :version 1,
     :created_at "2011-08-24 14:31:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; rem and mod are commonly used to get the remainder.\n;; but when dealing with negative num(ber), the difference \n;; between rem and mod becomes obvious\n\nuser=> (mod -10 3)\n2\n\nuser=> (rem -10 3)\n-1"}],
   :id 5717,
   :name "rem",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5717"},
  "clojure.core/defstruct"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-25 20:32:45.0",
     :user_id 106,
     :function "defstruct",
     :version "1.3.0",
     :created_at "2012-04-25 20:32:45.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Structs are obsolete.  Use records instead.  See `defrecord`."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "struct",
     :updated_at "2010-12-29 18:05:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2011",
     :line "3130",
     :arglists_comp "[s & vals]",
     :url_friendly_name "struct",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "create-struct",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1727",
     :line "3109",
     :arglists_comp "[& keys]",
     :url_friendly_name "create-struct",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "defrecord",
     :updated_at "2010-11-24 03:56:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1647",
     :line "230",
     :arglists_comp "[name [& fields] & opts+specs]",
     :url_friendly_name "defrecord",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:11:25.0",
     :function "defstruct",
     :version 3,
     :created_at "2010-08-02 04:35:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (defstruct person :name :age :height)\n#'user/person\n\nuser=> (struct person \"george\" 22 115)\n{:name \"george\", :age 22, :height 115}"}],
   :id 5458,
   :name "defstruct",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5458"},
  "incanter.processing/LIGHTEST"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3167,
   :name "LIGHTEST",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3167"},
  "clojure.core/decimal?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 20:35:04.0",
     :function "decimal?",
     :version 1,
     :created_at "2010-10-07 20:35:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (decimal? 1)\nfalse\n\nuser=> (decimal? 1.0)\nfalse\n\nuser=> (decimal? 1M)\ntrue\n\nuser=> (decimal? 99999999999999999999999999999999999)\nfalse\n\nuser=> (decimal? 1.0M)\ntrue"}],
   :id 5446,
   :name "decimal?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5446"},
  "clojure.core/*warn-on-reflection*"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 16:36:52.0",
     :function "*warn-on-reflection*",
     :version 2,
     :created_at "2011-08-21 16:36:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; define two variables then set *warn-on-reflection* to true and try to call\n;; one of their Java methods. Warnings are generated in both cases\n;; set *warn-on-reflection* to false and note that you can call both functions\n;; without a warning\n\nuser=> (def i 23)\n#'user/i\nuser=> (def s \"123\")\n#'user/s\nuser=> (set! *warn-on-reflection* true)\ntrue\nuser=> (.toString i)\nReflection warning, NO_SOURCE_PATH:4 - reference to field toString can't be resolved.\n\"23\"\nuser=> (.toString s)\nReflection warning, NO_SOURCE_PATH:5 - reference to field toString can't be resolved.\n\"123\"\nuser=> (set! *warn-on-reflection* false)\nfalse\nuser=> (.toString i)\n\"23\"\nuser=> (.toString s)\n\"123\"\nuser=>"}],
   :id 5314,
   :name "*warn-on-reflection*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5314"},
  "clj-swing.core/has-index?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5164,
   :name "has-index?",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5164"},
  "clojure.contrib.seq/group-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1164,
   :name "group-by",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1164"},
  "swank.loader/file-name-to-swank-package-sym"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4290,
   :name "file-name-to-swank-package-sym",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4290"},
  "clj-ssh.ssh/sftp-modemap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1457,
   :name "sftp-modemap",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1457"},
  "clojure.contrib.io/make-parents"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 501,
   :name "make-parents",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/501"},
  "clojure.core/nil?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:36:27.0",
     :function "nil?",
     :version 3,
     :created_at "2010-07-13 19:27:47.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (nil? nil)\ntrue\nuser=> (nil? 0)\nfalse\nuser=> (nil? false)\nfalse"}],
   :id 5624,
   :name "nil?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5624"},
  "clojure.core/memoize"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "delay",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1986",
     :line "619",
     :arglists_comp "[& body]",
     :url_friendly_name "delay",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:01:46.0",
     :function "memoize",
     :version 3,
     :created_at "2010-08-04 01:13:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; First we define a function that presumably have some expensive computation.\nuser=> (defn myfunc[a] (println \"doing some work\") (+ a 10))\n#'user/myfunc\n\n;; Next we create a memoized version of the function.\nuser=> (def myfunc-memo (memoize myfunc))\n#'user/myfunc-memo\n\n\n;; The first time we call the function with a particular argument the\n;; original function is invoked and the value is returned.  The next\n;; time the function is called with the same argument the cached result\n;; is returned and the original function is NOT called.\n\nuser=> (myfunc-memo 1)\ndoing some work\n11\nuser=> (myfunc-memo 1)\n11\nuser=> (myfunc-memo 20)\ndoing some work\n30\nuser=> (myfunc-memo 20)\n30\n"}],
   :id 5607,
   :name "memoize",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5607"},
  "clojure.java.io/make-output-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5889,
   :name "make-output-stream",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5889"},
  "swank.commands.basic/swank.commands.basic.proxy$clojure.lang.LineNumberingPushbackReader$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4034,
   :name
   "swank.commands.basic.proxy$clojure.lang.LineNumberingPushbackReader$0",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4034"},
  "net.cgrand.enlive-html/void"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3861,
   :name "void",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3861"},
  "incanter.processing/set-image-at"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3046,
   :name "set-image-at",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3046"},
  "clojure.contrib.monads/m-zero"
  {:comments [],
   :see-alsos
   [{:namespace_id 61,
     :weight 0,
     :name "maybe-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/773",
     :line "296",
     :arglists_comp "",
     :url_friendly_name "maybe-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "sequence-m",
     :updated_at "2010-10-20 04:41:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/799",
     :line "309",
     :arglists_comp "",
     :url_friendly_name "sequence-m",
     :file "clojure/contrib/monads.clj"}
    {:namespace_id 61,
     :weight 0,
     :name "set-m",
     :updated_at "2010-10-20 04:41:52.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:55:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/787",
     :line "323",
     :arglists_comp "",
     :url_friendly_name "set-m",
     :file "clojure/contrib/monads.clj"}],
   :examples [],
   :id 806,
   :name "m-zero",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/806"},
  "clojure.core/frequencies"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-22 12:07:45.0",
     :user_id 815,
     :function "frequencies",
     :version "1.3.0",
     :created_at "2013-01-22 12:06:28.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "<pre>(fn [coll]\n   (let [gp (group-by identity coll)] \n      (zipmap (keys gp) (map #(count (second %)) gp))))</pre>"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "group-by",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1940",
     :line "5541",
     :arglists_comp "[f coll]",
     :url_friendly_name "group-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:36:48.0",
     :function "frequencies",
     :version 3,
     :created_at "2010-08-20 09:27:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (frequencies ['a 'b 'a 'a])\n{a 3, b 1}"}],
   :id 5525,
   :name "frequencies",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5525"},
  "clojure.zip/zipper"
  {:comments
   [{:namespace_id 120,
     :ns "clojure.zip",
     :updated_at "2010-10-24 20:27:59.0",
     :user_id 1,
     :function "zipper",
     :version "1.2.0",
     :created_at "2010-10-24 20:27:59.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "For more info on zippers:\n\n* [Brian Marick](http://clojuredocs.org/profile/Brian%20Marick): [â€œEditingâ€� trees in Clojure with clojure.zip](http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/)\n* Alex Miller: [Zippers with records in Clojure](http://tech.puredanger.com/2010/10/22/zippers-with-records-in-clojure/)"}
    {:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2012-04-07 01:57:24.0",
     :user_id 273,
     :function "zipper",
     :version "1.3.0",
     :created_at "2012-04-07 01:25:45.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Tutorials on zippers:\n\n* Brian Marick: [\"Editing\" trees in Clojure with clojure.zip](http://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip)\n\n* Alex Miller: [Zippers with records in Clojure](http://tech.puredanger.com/2010/10/22/zippers-with-records-in-clojure/)"}],
   :see-alsos
   [{:namespace_id 120,
     :weight 0,
     :name "down",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2576",
     :line "109",
     :arglists_comp "[loc]",
     :url_friendly_name "down",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "up",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/2578",
     :line "123",
     :arglists_comp "[loc]",
     :url_friendly_name "up",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 0,
     :name "right",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/2599",
     :line "149",
     :arglists_comp "[loc]",
     :url_friendly_name "right",
     :file "clojure/zip.clj"}],
   :examples
   [{:namespace_id 120,
     :ns "clojure.zip",
     :updated_at "2012-04-24 22:36:22.0",
     :function "zipper",
     :version 3,
     :created_at "2010-10-24 13:03:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Some clojure.zip functions will overwrite clojure.core's definitions\n(use 'clojure.zip)\n;;=> WARNING: next already refers to: #'clojure.core/next in namespace: user, being replaced by: #'clojure.zip/next\n;;=> WARNING: replace already refers to: #'clojure.core/replace in namespace: user, being replaced by: #'clojure.zip/replace\n;;=> WARNING: remove already refers to: #'clojure.core/remove in namespace: user, being replaced by: #'clojure.zip/remove\n\n;; You may wish to require :as in order to avoid the above\n(require '[clojure.zip :as z])\n\n;; For the purposes of keeping the examples that follow clean,\n;; assume we have taken the former route: (use 'clojure.zip)\nuser> (def z [[1 2 3] [4 [5 6] 7] [8 9]])\n#'user/z\n\nuser> (def zp (zipper vector? seq (fn [_ c] c) z))\n#'user/zp\n\nuser> zp\n[[[1 2 3] [4 [5 6] 7] [8 9]] nil]\n\nuser> (-> zp down)\n[[1 2 3] {:l [], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]]], :ppath nil, :r ([4 [5 6] 7] [8 9])}]\n\nuser> (first (-> zp down))\n[1 2 3]\n\nuser> (-> zp down right)\n[[4 [5 6] 7] {:l [[1 2 3]], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]]], :ppath nil, :r ([8 9])}]\n\nuser> (first (-> zp down right))\n[4 [5 6] 7]\n\nuser> (-> zp down right down right)\n[[5 6] {:l [4], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]] [4 [5 6] 7]], :ppath {:l [[1 2 3]], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]]], :ppath nil, :r ([8 9])}, :r (7)}]\n\nuser> (first (-> zp down right down right))\n[5 6]\n\nuser> (-> zp down right down right down right)\n[6 {:l [5], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]] [4 [5 6] 7] [5 6]], :ppath {:l [4], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]] [4 [5 6] 7]], :ppath {:l [[1 2 3]], :pnodes [[[1 2 3] [4 [5 6] 7] [8 9]]], :ppath nil, :r ([8 9])}, :r (7)}, :r nil}]\n\nuser> (first (-> zp down right down right down right))\n6"}],
   :id 6124,
   :name "zipper",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6124"},
  "lancet/input"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3395,
   :name "input",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3395"},
  "clojure.zip/lefts"
  {:comments [],
   :see-alsos
   [{:namespace_id 120,
     :weight 0,
     :name "rights",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2597",
     :line "102",
     :arglists_comp "[loc]",
     :url_friendly_name "rights",
     :file "clojure/zip.clj"}],
   :examples
   [{:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2012-02-16 15:00:15.0",
     :function "lefts",
     :version 1,
     :created_at "2012-02-16 15:00:15.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def vz (vector-zip [1 2 3 4 5]))\n\n;; root\n;;  |________\n;;  | | | | |\n;;  1 2[3]4 5\n\n;;go down and then right twice, what's to the left of me now?\n(-> vz down right right lefts)\n=>(1 2)\n\n;;equivalent:\n(-> vz down right right rights)\n=>(4 5)\n\n"}],
   :id 6108,
   :name "lefts",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6108"},
  "clojure.contrib.java-utils/delete-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 530,
   :name "delete-file",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/530"},
  "clojure.test/function?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 115,
     :ns "clojure.test",
     :updated_at "2010-12-29 17:41:02.0",
     :function "function?",
     :version 1,
     :created_at "2010-12-29 17:41:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (defn foo [] (println \"foo\"))\n#'user/foo\n\nuser> (def bar \"bar\")\n#'user/bar\n\nuser> (clojure.test/function? foo)\ntrue\n\nuser> (clojure.test/function? bar)\nfalse"}],
   :id 6030,
   :name "function?",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6030"},
  "clojure.contrib.java-utils/with-system-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 526,
   :name "with-system-properties",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/526"},
  "clojure.pprint/pprint-indent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5938,
   :name "pprint-indent",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5938"},
  "swank.util/failing-gracefully"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4025,
   :name "failing-gracefully",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4025"},
  "clojure.contrib.seq/rand-elt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1169,
   :name "rand-elt",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1169"},
  "clojure.contrib.pprint/*print-right-margin*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 985,
   :name "*print-right-margin*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/985"},
  "clojure.main/skip-if-eol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5919,
   :name "skip-if-eol",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5919"},
  "clojure.contrib.str-utils/chomp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1256,
   :name "chomp",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1256"},
  "clojure.contrib.base64/dr-read"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3790,
   :name "dr-read",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3790"},
  "clojure.test.junit/with-junit-output"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6067,
   :name "with-junit-output",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6067"},
  "clojure.core/hash"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:37:09.0",
     :function "hash",
     :version 3,
     :created_at "2010-07-28 05:25:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (hash \"a\")\n97\nuser=> (.hashCode \"a\")  ; notice it is the same hash as java.lang.String.hashCode()\n97\nuser=> (hash [1 2 3])\n30817\nuser=> (hash [1 2 3 4])\n955331"}],
   :id 5542,
   :name "hash",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5542"},
  "incanter.processing/CLOSE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3183,
   :name "CLOSE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3183"},
  "clojure.contrib.zip-filter.xml/attr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1442,
   :name "attr",
   :ns "clojure.contrib.zip-filter.xml",
   :url "http://clojuredocs.org/v/1442"},
  "clojure.contrib.lazy-xml/node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 626,
   :name "node",
   :ns "clojure.contrib.lazy-xml",
   :url "http://clojuredocs.org/v/626"},
  "lancet/fail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3494,
   :name "fail",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3494"},
  "circumspec.contrib-mocking/returns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3637,
   :name "returns",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3637"},
  "clj-swing.core/icon-setters"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5157,
   :name "icon-setters",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5157"},
  "clojure.core/slurp"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-01 14:32:51.0",
     :user_id 326,
     :function "slurp",
     :version "1.2.0",
     :created_at "2011-07-01 14:32:51.0",
     :library "Clojure Core",
     :library_id 3,
     :body "Use slurp also to read an input stream into a string."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "spit",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1555",
     :line "5380",
     :arglists_comp "[f content & options]",
     :url_friendly_name "spit",
     :file "clojure/core.clj"}
    {:namespace_id 104,
     :weight 1,
     :name "reader",
     :updated_at "2010-11-20 16:02:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2147",
     :line "80",
     :arglists_comp "[x & opts]",
     :url_friendly_name "reader",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:37:37.0",
     :function "slurp",
     :version 3,
     :created_at "2010-07-29 20:00:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (spit \"blubber.txt\" \"test\")\nnil\nuser=> (slurp \"blubber.txt\")\n\"test\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-24 14:39:42.0",
     :function "slurp",
     :version 1,
     :created_at "2011-08-24 14:39:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; To access web page. Note the use of http://\n;; prefix\n\nuser=> (slurp \"http://clojuredocs.org\")\n; This will return the html content of clojuredocs.org"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-25 12:50:37.0",
     :function "slurp",
     :version 1,
     :created_at "2011-08-25 12:50:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Access absolute location on Windows\n\nuser=> (slurp \"C:\\\\tasklists.xml\")\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-25 03:47:56.0",
     :function "slurp",
     :version 1,
     :created_at "2012-02-25 03:47:56.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; On Linux, some JVMs have a bug where they cannot read a file in the /proc\n;; filesystem as a buffered stream or reader.  A workaround to this JVM issue\n;; is to open such a file as unbuffered:\n(slurp (java.io.FileReader. \"/proc/cpuinfo\"))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-12 19:24:28.0",
     :function "slurp",
     :version 3,
     :created_at "2012-07-12 19:19:36.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; You can specify what encoding to use by giving a :encoding param, and an encoding string recognized by your JVM\n\nuser=> (slurp \"/path/to/file\" :encoding \"ISO-8859-1\")"}],
   :id 5758,
   :name "slurp",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5758"},
  "clojure.repl/root-cause"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5973,
   :name "root-cause",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5973"},
  "clj-swing.button/*button-icon-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5149,
   :name "*button-icon-keys*",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5149"},
  "incanter.processing/RETURN"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3172,
   :name "RETURN",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3172"},
  "clojure.core/commute"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-23 13:27:43.0",
     :user_id 262,
     :function "commute",
     :version "1.2.0",
     :created_at "2011-01-23 13:27:43.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Note to understand the difference to 'alter':\n\nCommute should be used when it doesn't matter whether anyone else has changed (altered or commuted) the ref using a successful transaction. This often implies that this ref is not affected by any conditions, i.e. it should be changed the same way no matter what. (thanks to raek for clarifying that for me)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-21 22:17:54.0",
     :user_id 387,
     :function "commute",
     :version "1.2.0",
     :created_at "2011-09-21 22:17:54.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "In the concurrency video RH explains that commute is useful for actions where the order in which they alter the value doesn't matter, e.g. incrementing a counter."}],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-17 06:15:33.0",
     :function "commute",
     :version 1,
     :created_at "2012-07-17 06:15:33.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def counter (ref 0))\n#'user/counter\n\n;; deciding whether to increment the counter takes the terribly long time\n;; of 100 ms -- it is decided by committee.\nuser=> (defn commute-inc! [counter]\n         (dosync (Thread/sleep 100) (commute counter inc)))\n#'user/commute-inc!\nuser=> (defn alter-inc! [counter]\n         (dosync (Thread/sleep 100) (alter counter inc)))\n#'user/alter-inc!\n\n;; what if n people try to hit the counter at once?\nuser=> (defn bombard-counter! [n f counter]\n         (apply pcalls (repeat n #(f counter))))\n#'user/bombard-counter!\n\n;; first, use alter.  Everyone is trying to update the counter, and\n;; stepping on each other's toes, so almost every transaction is getting \n;; retried lots of times:\nuser=> (dosync (ref-set counter 0))\n0\nuser=> (time (doall (bombard-counter! 20 alter-inc! counter)))\n\"Elapsed time: 2007.049224 msecs\"\n(3 1 2 4 7 10 5 8 6 9 13 14 15 12 11 16 17 20 18 19)\n;; note that it took about 2000 ms = (20 workers * 100 ms / update)\n\n;; now, since it doesn't matter what order people update a counter in, we\n;; use commute:\nuser=> (dosync (ref-set counter 0))\n0\nuser=> (time (doall (bombard-counter! 20 commute-inc! counter)))\n\"Elapsed time: 401.748181 msecs\"\n(1 2 3 4 5 9 10 6 7 8 11 15 13 12 14 16 19 17 18 20)\n;; notice that we got actual concurrency this time."}],
   :id 5423,
   :name "commute",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5423"},
  "clojure.contrib.pprint/add-core-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1022,
   :name "add-core-ns",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1022"},
  "clojure.core/file-seq"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "file",
     :updated_at "2010-12-29 17:45:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/2140",
     :line "395",
     :arglists_comp "[arg]|[parent child]|[parent child & more]",
     :url_friendly_name "file",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 1,
     :name "delete-file",
     :updated_at "2011-08-20 23:00:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/2149",
     :line "407",
     :arglists_comp "[f & [silently]]",
     :url_friendly_name "delete-file",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-23 01:16:47.0",
     :function "file-seq",
     :version 3,
     :created_at "2011-08-21 14:13:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; first create a Java File object using the file function in\n;; the clojure.java.io package and use that object to create a file-seq\n;; then show the first and first 10 members of that seq\n\nuser=> (def f (clojure.java.io/file \"c:\\\\clojure-1.2.0\"))\n#'user/f\nuser=> (def fs (file-seq f))\n#'user/fs\nuser=> (first fs)\n#<File c:\\clojure-1.2.0>\nuser=> (clojure.pprint/pprint (take 10 fs))\n(#<File c:\\clojure-1.2.0>\n #<File c:\\clojure-1.2.0\\.gitignore>\n #<File c:\\clojure-1.2.0\\build.xml>\n #<File c:\\clojure-1.2.0\\changes.txt>\n #<File c:\\clojure-1.2.0\\cl.bat>\n #<File c:\\clojure-1.2.0\\clojure.jar>\n #<File c:\\clojure-1.2.0\\doc>\n #<File c:\\clojure-1.2.0\\doc\\clojure>\n #<File c:\\clojure-1.2.0\\doc\\clojure\\pprint>\n #<File c:\\clojure-1.2.0\\doc\\clojure\\pprint\\CommonLispFormat.markdown>)\nuser=>"}],
   :id 5503,
   :name "file-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5503"},
  "incanter.processing/ORTHOGRAPHIC"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3175,
   :name "ORTHOGRAPHIC",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3175"},
  "clojure.contrib.test-is/find-pure-exprs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1398,
   :name "find-pure-exprs",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1398"},
  "incanter.stats/kendalls-w"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3354,
   :name "kendalls-w",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3354"},
  "incanter.stats/simple-regression"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3334,
   :name "simple-regression",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3334"},
  "swank.commands.basic/frame-source-location"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4037,
   :name "frame-source-location",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4037"},
  "incanter.distributions/*test-statistic-map*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2942,
   :name "*test-statistic-map*",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2942"},
  "clojure.contrib.greatest-least/greatest"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 450,
   :name "greatest",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/450"},
  "clojure.core/get-thread-bindings"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "bound-fn",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1525",
     :line "1525",
     :arglists_comp "[& fntail]",
     :url_friendly_name "bound-fn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "bound-fn*",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1767",
     :line "1514",
     :arglists_comp "[f]",
     :url_friendly_name "bound-fn*",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5539,
   :name "get-thread-bindings",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5539"},
  "clojure.test.tap/with-tap-output"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6073,
   :name "with-tap-output",
   :ns "clojure.test.tap",
   :url "http://clojuredocs.org/v/6073"},
  "incanter.processing/ENTER"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3255,
   :name "ENTER",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3255"},
  "clojure.contrib.dataflow/build-validator-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 130,
   :name "build-validator-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/130"},
  "clojure.contrib.string/rtrim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1322,
   :name "rtrim",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1322"},
  "clojure.test.junit/finish-element"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6056,
   :name "finish-element",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6056"},
  "circumspec.for-all/printable-ascii"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3669,
   :name "printable-ascii",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3669"},
  "clojure.contrib.mock/validate-counts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5261,
   :name "validate-counts",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5261"},
  "clojure.contrib.http.agent/headers"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 479,
   :name "headers",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/479"},
  "clojure.contrib.duck-streams/with-in-reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 258,
   :name "with-in-reader",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/258"},
  "clojure.contrib.seq/flatten"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1168,
   :name "flatten",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1168"},
  "clojure.test.junit/element-content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6052,
   :name "element-content",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6052"},
  "clojure.contrib.pprint.pretty-writer/nl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 974,
   :name "nl",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/974"},
  "fogus.me.trammel/all-negative?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5262,
   :name "all-negative?",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5262"},
  "incanter.stats/tanimoto-coefficient"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3356,
   :name "tanimoto-coefficient",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3356"},
  "leiningen.jar/unix-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3552,
   :name "unix-path",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3552"},
  "incanter.processing/brightness"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3233,
   :name "brightness",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3233"},
  "ring.util.servlet/update-servlet-response"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2617,
   :name "update-servlet-response",
   :ns "ring.util.servlet",
   :url "http://clojuredocs.org/v/2617"},
  "net.licenser.sandbox/has-state?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5136,
   :name "has-state?",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5136"},
  "swank.util.class-browse/expand-wildcard"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4128,
   :name "expand-wildcard",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4128"},
  "lancet/sequential"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3416,
   :name "sequential",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3416"},
  "clojure.core/ns-unalias"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-08 04:30:00.0",
     :function "ns-unalias",
     :version 1,
     :created_at "2012-01-08 04:30:00.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; You are having a problem loading a redefined namespace:\nuser=> (load \"src/clj/com/tizra/layout_expander.clj\")\n#<IllegalStateException java.lang.IllegalStateException: Alias xml already exists in namespace com.tizra.layout-expander, aliasing com.tizra.xml-match>\n\n;; ns-unalias to the rescue!\nuser=> (ns-unalias (find-ns 'com.tizra.layout-expander) 'xml)\nnil\n\nuser=> (load \"src/clj/com/tizra/layout_expander.clj\")\n#'com.tizra.layout-expander/junk\n"}],
   :id 5640,
   :name "ns-unalias",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5640"},
  "clojure.contrib.logging/log"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 638,
   :name "log",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/638"},
  "clojure.contrib.dataflow/validator-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 110,
   :name "validator-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/110"},
  "clojure.contrib.monads/m-chain"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 797,
   :name "m-chain",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/797"},
  "clojure.core/drop"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "take",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2049",
     :line "2152",
     :arglists_comp "[n coll]",
     :url_friendly_name "take",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop-last",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/1830",
     :line "2183",
     :arglists_comp "[s]|[n s]",
     :url_friendly_name "drop-last",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop-while",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2075",
     :line "2199",
     :arglists_comp "[pred coll]",
     :url_friendly_name "drop-while",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nthnext",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/2006",
     :line "3393",
     :arglists_comp "[coll n]",
     :url_friendly_name "nthnext",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 1,
     :name "nthrest",
     :updated_at "2012-06-04 06:36:54.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:08:31.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5644",
     :line "2755",
     :arglists_comp "[coll n]",
     :url_friendly_name "nthrest",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:38:07.0",
     :function "drop",
     :version 3,
     :created_at "2010-07-28 12:20:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (drop -1 [1 2 3 4])\n(1 2 3 4) \n\nuser=> (drop 0 [1 2 3 4])\n(1 2 3 4) \n\nuser=> (drop 2 [1 2 3 4])\n(3 4) \n\nuser=> (drop 5 [1 2 3 4])\n()"}],
   :id 5483,
   :name "drop",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5483"},
  "swank.util/find-first"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4104,
   :name "find-first",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4104"},
  "clojure.core/int-array"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "ints",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1907",
     :line "4232",
     :arglists_comp "[xs]",
     :url_friendly_name "ints",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aget",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2016",
     :line "2987",
     :arglists_comp "[array idx]|[array idx & idxs]",
     :url_friendly_name "aget",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aset",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1804",
     :line "2998",
     :arglists_comp "[array idx val]|[array idx idx2 & idxv]",
     :url_friendly_name "aset",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "aset-int",
     :updated_at "2011-08-21 01:24:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/1980",
     :line "3021",
     :arglists_comp "[array idx val]|[array idx idx2 & idxv]",
     :url_friendly_name "aset-int",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:42:30.0",
     :function "int-array",
     :version 4,
     :created_at "2010-09-17 11:23:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; if you have a sequence, perhaps lazy, int-array will figure out the size\nuser=> (aget (int-array [1 2 3]) 0)\n1\nuser=> (int-array [1 2 3])\n#&lt;int[] [i@263c8db9]&gt;\n\n;; if you need a certain size, with a constant initial value\nuser=> (aget (int-array 5 1) 4)\n1\nuser=> (alength (int-array 5))\n5\n\n;; finally, you can specify a size + a sequence, which will initialize the array \n;; by taking size from the sequence\nuser=> (alength (int-array 5 (range 10)))\n5\n;; which is equivalent to\nuser=> (alength (int-array (take 5 (range 10)))\n5\n"}],
   :id 5558,
   :name "int-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5558"},
  "clojure.core/comp"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "partial",
     :updated_at "2010-11-14 13:52:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1951",
     :line "2003",
     :arglists_comp
     "[f arg1]|[f arg1 arg2]|[f arg1 arg2 arg3]|[f arg1 arg2 arg3 & more]",
     :url_friendly_name "partial",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "juxt",
     :updated_at "2011-02-12 17:43:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/2058",
     :line "1965",
     :arglists_comp "[f]|[f g]|[f g h]|[f g h & fs]",
     :url_friendly_name "juxt",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:15:13.0",
     :function "comp",
     :version 3,
     :created_at "2010-07-30 22:41:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def negative-quotient (comp - /))\n#'user/negative-quotient\n\nuser=> (negative-quotient 8 3)           \n-8/3\n\n\nuser=> (def concat-and-reverse (comp (partial apply str) reverse str)) \n#'user/concat-and-reverse\n\nuser=> (concat-and-reverse \"hello\" \"clojuredocs\")\n\"scoderujolcolleh\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-16 03:46:17.0",
     :function "comp",
     :version 1,
     :created_at "2010-12-16 03:46:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> ((comp str +) 8 8 8)\n\"24\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-27 21:40:14.0",
     :function "comp",
     :version 1,
     :created_at "2011-01-27 21:40:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map\n         (comp - (partial + 3) (partial * 2))\n         [1 2 3 4])\n; returns\n(-5 -7 -9 -11)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-19 15:12:50.0",
     :function "comp",
     :version 1,
     :created_at "2011-05-19 15:12:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (filter (comp not zero?) [0 1 0 2 0 3 0 4])\n(1 2 3 4)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-25 10:20:18.0",
     :function "comp",
     :version 6,
     :created_at "2011-05-25 04:27:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; make a struct 'goods'. it assumes that every goods has\n;; its id number and price.\n(defstruct goods :id :price)\n\n;; generate data.\n(def data (map #(struct goods %1 %2)\n\t       (shuffle (range 0 10)) (shuffle\n\t\t\t\t       (into (range 100 500 100)\n\t\t\t\t\t     (range 100 500 100)))))\n\n(defn comp-goods-price\n  \"a compare function by :price of the struct 'goods.' the sort order \n   is that the lower price is superior to the higher one and if the \n   price is same, the lower id is superior to the higher one.\"\n  [el1 el2]\n  (if (or  (< (:price el1) (:price el2))\n           (and (= (:price el1) (:price el2))(< (:id el1) (:id el2))))\n    true\n    false))\n\nuser> data\n({:id 1, :price 300} {:id 6, :price 100} {:id 3, :price 100} {:id 4, :price 400} {:id 0, :price 300} {:id 2, :price 200} {:id 5, :price 200} {:id 8, :price 400})\nuser> (sort (comp comp-goods-price) data)\n({:id 3, :price 100} {:id 6, :price 100} {:id 2, :price 200} {:id 5, :price 200} {:id 0, :price 300} {:id 1, :price 300} {:id 4, :price 400} {:id 8, :price 400})\nuser> (sort-by :price < data) ; compare this with the above.\n({:id 6, :price 100} {:id 3, :price 100} {:id 2, :price 200} {:id 5, :price 200} {:id 1, :price 300} {:id 0, :price 300} {:id 4, :price 400} {:id 8, :price 400})\n\n;; Yet another example of 'comp' by PriorityBlockingQueue.\n\nuser> (import [java.util.concurrent PriorityBlockingQueue])\njava.util.concurrent.PriorityBlockingQueue\nuser> (def pqdata (new PriorityBlockingQueue 8\n\t\t       (comp comp-goods-price)))\n#'user/pqdata\nuser> (doseq [x data]\n\t     (.add pqdata x))\nnil\nuser> (dotimes [_ 8]\n\t       (println (.poll pqdata)))\n{:id 3, :price 100}\n{:id 6, :price 100}\n{:id 2, :price 200}\n{:id 5, :price 200}\n{:id 0, :price 300}\n{:id 1, :price 300}\n{:id 4, :price 400}\n{:id 8, :price 400}\nnil\nuser> "}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 18:12:20.0",
     :function "comp",
     :version 1,
     :created_at "2011-08-21 18:12:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def countif (comp count filter))\n#'user/countif\nuser=> (countif even? [2 3 1 5 4])\n2"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-09 02:56:58.0",
     :function "comp",
     :version 1,
     :created_at "2012-08-09 02:56:58.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Get 2nd to last element from a list\nuser=> ( (comp second reverse) '(\"a\" 2 7 \"b\"))\n7"}],
   :id 5424,
   :name "comp",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5424"},
  "clojure.core/io!"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-15 22:46:08.0",
     :function "io!",
     :version 1,
     :created_at "2012-05-15 22:46:08.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def a (ref 0))\n#'user/a\n\nuser=> (dosync\n         (io! (println \"hello\"))\n         (alter a inc))\nIllegalStateException I/O in transaction\n\nuser=> (dosync\n         (println \"hello\")\n         (alter a inc))\n\"hello\"\n1\n\nuser=> (defn fn-with-io []\n         (io! (println \"hello\")))\n#'user/fn-with-io\n\nuser=> (dosync\n         (fn-with-io)\n         (alter a inc))\nIllegalStateException I/O in transaction"}],
   :id 5566,
   :name "io!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5566"},
  "incanter.stats/n-grams"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3313,
   :name "n-grams",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3313"},
  "swank.swank/ignore-protocol-version"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4319,
   :name "ignore-protocol-version",
   :ns "swank.swank",
   :url "http://clojuredocs.org/v/4319"},
  "incanter.processing/PROJECT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3113,
   :name "PROJECT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3113"},
  "incanter.processing/THIRD_PI"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3029,
   :name "THIRD_PI",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3029"},
  "clojure.contrib.duck-streams/*buffer-size*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 255,
   :name "*buffer-size*",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/255"},
  "swank.util.class-browse/top-level-class-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4146,
   :name "top-level-class-file?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4146"},
  "clojure.java.javadoc/*remote-javadocs*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5901,
   :name "*remote-javadocs*",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5901"},
  "swank.core.server/announce-port-to-file"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4269,
   :name "announce-port-to-file",
   :ns "swank.core.server",
   :url "http://clojuredocs.org/v/4269"},
  "incanter.core/get-input-reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2903,
   :name "get-input-reader",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2903"},
  "clojure.core/promise"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "deliver",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1623",
     :line "5523",
     :arglists_comp "[promise val]",
     :url_friendly_name "deliver",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 1,
     :name "realized?",
     :updated_at "2012-02-21 10:05:39.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:09:44.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5705",
     :line "6502",
     :arglists_comp "[x]",
     :url_friendly_name "realized_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 01:12:11.0",
     :function "promise",
     :version 4,
     :created_at "2010-08-02 04:32:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x (promise))\n#'user/x\n;; Trying to deref at this point will make your repl wait forever\n\n\nuser=> (deliver x 100)\n#&lt;core$promise$reify__5534@4369a50b: 100&gt;\n\n;; the promise has been delivered, deref x will return immediately\nuser=> @x\n100\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-26 21:10:05.0",
     :function "promise",
     :version 1,
     :created_at "2011-12-26 21:10:05.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Create a promise\nuser> (def p (promise))\n#'user/p ; p is our promise\n\n;; Check if was delivered/realized\nuser> (realized? p)\nfalse ; No yet\n\n;; Delivering the promise\nuser> (deliver p 42)\n#<core$promise$reify__5727@47122d: 42>\n\n;; Check again if it was delivered\nuser> (realized? p)\ntrue ; Yes!\n\n;; Deref to see what has been delivered\nuser> @p\n42\n\n;; Note that @ is shorthand for deref\nuser> (deref p)\n42\n"}],
   :id 5680,
   :name "promise",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5680"},
  "clojure.contrib.test-is/*stack-trace-depth*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1402,
   :name "*stack-trace-depth*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1402"},
  "circumspec.config/test-regex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3622,
   :name "test-regex",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3622"},
  "clojure.core/catch"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "try",
     :updated_at "2010-10-25 01:37:14.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5275",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "try",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "finally",
     :updated_at "2010-10-28 03:10:04.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5282",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "finally",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 01:36:12.0",
     :function "catch",
     :version 1,
     :created_at "2010-10-25 01:36:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "=> (try\n     (/ 1 0)\n     (catch Exception e (str \"caught exception: \" (.getMessage e))))\n\n\"caught exception: Divide by zero\""}],
   :id 6138,
   :name "catch",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6138"},
  "net.licenser.sandbox/default-obj-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5135,
   :name "default-obj-tester",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5135"},
  "clojure.contrib.prxml/*prxml-indent*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 372,
   :name "*prxml-indent*",
   :ns "clojure.contrib.prxml",
   :url "http://clojuredocs.org/v/372"},
  "clojure.contrib.generic.math-functions/sin"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 424,
   :name "sin",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/424"},
  "incanter.core/save"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2774,
   :name "save",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2774"},
  "clojure.reflect/TypeReference"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5956,
   :name "TypeReference",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5956"},
  "lancet/whichresource"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3422,
   :name "whichresource",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3422"},
  "incanter.processing/CUSTOM"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3035,
   :name "CUSTOM",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3035"},
  "clojure.contrib.string/as-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 558,
   :name "as-str",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/558"},
  "clojure.contrib.dataflow/add-cell-watcher"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 108,
   :name "add-cell-watcher",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/108"},
  "leiningen.repl/copy-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3574,
   :name "copy-out",
   :ns "leiningen.repl",
   :url "http://clojuredocs.org/v/3574"},
  "clojure.contrib.str-utils2/trim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1264,
   :name "trim",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1264"},
  "clojure.contrib.def/defn-memo"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 89,
   :name "defn-memo",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/89"},
  "swank.util/continuously"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4027,
   :name "continuously",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4027"},
  "incanter.bayes/sample-proportions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2720,
   :name "sample-proportions",
   :ns "incanter.bayes",
   :url "http://clojuredocs.org/v/2720"},
  "clojure.core/dotimes"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "repeat",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1578",
     :line "2230",
     :arglists_comp "[x]|[n x]",
     :url_friendly_name "repeat",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 6,
     :name "for",
     :updated_at "2011-05-10 18:07:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1548",
     :line "3582",
     :arglists_comp "[seq-exprs body-expr]",
     :url_friendly_name "for",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 5,
     :name "doseq",
     :updated_at "2011-02-15 19:43:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1534",
     :line "2384",
     :arglists_comp "[seq-exprs & body]",
     :url_friendly_name "doseq",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:38:29.0",
     :function "dotimes",
     :version 3,
     :created_at "2010-07-10 21:21:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (dotimes [n 5] (println \"n is\" n))\nn is 0\nn is 1\nn is 2\nn is 3\nn is 4\nnil"}],
   :id 5478,
   :name "dotimes",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5478"},
  "circumspec.for/for-these"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3655,
   :name "for-these",
   :ns "circumspec.for",
   :url "http://clojuredocs.org/v/3655"},
  "clojure.contrib.gen-html-docs/*style*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 345,
   :name "*style*",
   :ns "clojure.contrib.gen-html-docs",
   :url "http://clojuredocs.org/v/345"},
  "clj-ssh.ssh/has-identity?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1456,
   :name "has-identity?",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1456"},
  "midje.semi-sweet/anything"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4344,
   :name "anything",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4344"},
  "clojure.data/EqualityPartition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5860,
   :name "EqualityPartition",
   :ns "clojure.data",
   :url "http://clojuredocs.org/v/5860"},
  "clojure.contrib.duck-streams/append-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 271,
   :name "append-writer",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/271"},
  "incanter.distributions/t-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5086,
   :name "t-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5086"},
  "clojure.contrib.logging/fatal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 655,
   :name "fatal",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/655"},
  "clojure.contrib.pprint.pretty-writer/ancestor?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 820,
   :name "ancestor?",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/820"},
  "swank.commands.contrib.swank-fuzzy/fuzzy-completions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4183,
   :name "fuzzy-completions",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4183"},
  "swank.commands.completion/potential-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4147,
   :name "potential-ns",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4147"},
  "clojure.contrib.string/grep"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1336,
   :name "grep",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1336"},
  "clojure.contrib.sql.internal/*db*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1252,
   :name "*db*",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1252"},
  "circumspec.for-all/*size*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3668,
   :name "*size*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3668"},
  "clojure.core/get-validator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5540,
   :name "get-validator",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5540"},
  "clojure.contrib.test-is/test-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1394,
   :name "test-var",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1394"},
  "leiningen.jar/get-default-jar-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3553,
   :name "get-default-jar-name",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3553"},
  "clojure.xml/emit"
  {:comments
   [{:namespace_id 351,
     :ns "clojure.xml",
     :updated_at "2011-12-30 15:15:42.0",
     :user_id 148,
     :function "emit",
     :version "1.3.0",
     :created_at "2011-12-30 15:15:42.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "this one have a problem when trying to export xml with string containing & etc (should be escaped). Contribs prxml has this functionality."}
    {:namespace_id 351,
     :ns "clojure.xml",
     :updated_at "2012-01-31 21:41:26.0",
     :user_id 41,
     :function "emit",
     :version "1.3.0",
     :created_at "2012-01-31 21:41:26.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "A 1.3 compatible version of prxml can be found here:\n\nhttps://github.com/weissjeffm/clojure.prxml"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "with-out-str",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1652",
     :line "3674",
     :arglists_comp "[& body]",
     :url_friendly_name "with-out-str",
     :file "clojure/core.clj"}],
   :examples [],
   :id 6092,
   :name "emit",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6092"},
  "clojure.core/neg?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "pos?",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1955",
     :line "990",
     :arglists_comp "[x]",
     :url_friendly_name "pos_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:38:52.0",
     :function "neg?",
     :version 4,
     :created_at "2010-07-13 19:25:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (neg? -1)\ntrue\nuser=> (neg? 0)\nfalse\nuser=> (neg? 1)\nfalse"}],
   :id 5620,
   :name "neg?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5620"},
  "net.licenser.sandbox.safe-fns/save-objects"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5128,
   :name "save-objects",
   :ns "net.licenser.sandbox.safe-fns",
   :url "http://clojuredocs.org/v/5128"},
  "clojure.core/gen-class"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-25 20:43:26.0",
     :user_id 46,
     :function "gen-class",
     :version "1.2.0",
     :created_at "2010-07-25 20:43:26.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "When implementing interface methods with `gen-class` (when using `:implements`) watch out for primitive return types in interface methods.\n\nWhen you get weird `NullPointerException`s or `ClassPathException`s then make sure whether the value returned by your functions can be converted by Clojure to the primitive return type defined in the interface for that method.\n\nExample:\n\nGiven:\n\n<pre>\ninterface Test {\n   boolean isTest();\n}\n</pre>\n\nClojure implementation:\n\n<pre>\n(gen-class :name \"MyTest\" :implements [Test])\n\n; Will throw NPE when executed, \n; can't be converted to boolean\n(defn -isTest [this] nil) \n</pre>\n\n<pre>\n(gen-class :name \"MyTest\" :implements [Test])\n\n; Will throw ClassCastExcpetion when executed, \n; can't be converted to boolean\n(defn -isTest [this] (Object.)) \n</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-22 02:09:50.0",
     :user_id 319,
     :function "gen-class",
     :version "1.2.0",
     :created_at "2011-05-30 14:38:48.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "When implementing an interface or extending an abstract class that implements an interface, be careful to implement all methods in the implemented interfaces.  Note: The abstract class is not required to implement all methods in the interface. The clojure compiler does not throw compiler errors if you do not implement a method. A runtime error will be thrown when someone tries to use the function.  The documentation suggests that you will receive UnsupportedOperationException, however in the case of the abstract class a java.lang.AbstractMethodError is thrown. \n\n**example:**\n\nLog4j appender - Extending AppenderSkeleton will fail with runtime error\n<pre>(gen-class :name clj.TestAppender :extends  org.apache.log4j.AppenderSkeleton)\n\n(defn -append [this event]\n  (println (.getMessage event)))\n</pre>\n\n\nNeed to implement close and requireLayout. These are not in AppenderSkeleton but are required by the interface Appender.\n<pre>(gen-class :name TstAppender :extends org.apache.log4j.AppenderSkeleton)\n\n(defn -append [this event]\n  (println (.getMessage event)))\n\n(defn -close [this]) ;nothing to clean up\n\n(defn -requireLayout [this] false)\n\n</pre>\n\n\n"}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:39:49.0",
     :function "gen-class",
     :version 5,
     :created_at "2010-07-21 20:45:52.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(gen-class\n\t:name \"some.package.RefMap\"\n\t:implements [java.util.Map]\n\t:state \"state\"\n\t:init \"init\"\n\t:constructors {[] []}\n\t:prefix \"ref-map-\")\n\n(defn ref-map-init []\n\t[[] (ref {})])\n\n(defn ref-map-size [this]\n\t(let [state (.state this)] (.size @state)))\n\t\n(defn ref-map-isEmpty [this]\n\t(let [state (.state this)] (.isEmpty @state)))\n\n(defn ref-map-containsKey [this o]\n\t(let [state (.state this)] (.containsKey @state o)))\n\t\n(defn ref-map-containsValue [this o]\n\t(let [state (.state this)] (.containsValue @state o)))\n\t\n(defn ref-map-get [this o]\n\t(let [state (.state this)] (.get @state o)))\n\t\n(defn ref-map-keySet [this]\n\t(let [state (.state this)] (.keySet @state)))\n\t\n(defn ref-map-values [this]\n\t(let [state (.state this)] (.values @state)))\n\t\n(defn ref-map-entrySet [this]\n\t(let [state (.state this)] (.entrySet @state)))\n\t\n(defn ref-map-equals [this o]\n\t(let [state (.state this)] (.equals @state o)))\n\t\n(defn ref-map-hashCode [this]\n\t(let [state (.state this)] (.hashCode @state)))\n\t\n(defn ref-map-put [this k v]\n\t(let [state (.state this)] \n\t\t(dosync (alter state assoc k v)) v))\n\t\n(defn ref-map-putAll [this m]\n\t(let [state (.state this)]\n\t\t(doseq [[k v] (map identity m)] (.put this k v))))\n\t\t\n(defn ref-map-remove [this o]\n\t(let [state (.state this) v (get @state o)] \n\t\t(dosync (alter state dissoc o)) v))\n\t\n(defn ref-map-clear [this]\n\t(let [state (.state this)] \n\t\t(dosync (ref-set state {}))))\n\t\n(defn ref-map-toString [this]\n\t(let [state (.state this)] (.toString @state)))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-06 13:18:05.0",
     :function "gen-class",
     :version 1,
     :created_at "2012-01-06 13:18:05.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; I found managing state a bit confusing at first.\n;; here's a dumb little class with a getter and setter for a \"location\" field.\n\n(ns com.example )\n\n(gen-class\n      :name com.example.Demo\n      :state state\n      :init init\n      :prefix \"-\"\n      :main false\n      ;; declare only new methods, not superclass methods\n      :methods [[setLocation [String] void]\n                [getLocation [] String]])\n\n;; when we are created we can set defaults if we want.\n(defn -init []\n  \"store our fields as a hash\"\n  [[] (atom {:location \"default\"})])\n\n;; little functions to safely set the fields.\n(defn setfield\n  [this key value]\n      (swap! (.state this) into {key value}))\n\n(defn getfield\n  [this key]\n  (@(.state this) key))\n\n;; \"this\" is just a parameter, not a keyword\n(defn -setLocation [this loc]\n  (setfield this :location loc))\n\n(defn  -getLocation\n  [this]\n  (getfield this :location))\n\n;; running it -- you must compile and put output on the classpath\n;; create a Demo, check the default value, then set it and check again.\nuser=> (def ex (com.example.Demo.))\n#'user/ex\nuser=> (.getLocation ex)\n\"default\"\nuser=> (.setLocation ex \"time\")\nnil\nuser=> (.getLocation ex)\n\"time\"\n"}],
   :id 5532,
   :name "gen-class",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5532"},
  "lancet/typedef"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3441,
   :name "typedef",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3441"},
  "circumspec.contrib-mocking/has-matching-signature?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3635,
   :name "has-matching-signature?",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3635"},
  "clojure.string/escape"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2011-02-24 06:50:35.0",
     :function "escape",
     :version 1,
     :created_at "2011-02-24 06:50:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; There should be no space between the \\ and the &amp;, but I don't know how\n;; to create that in an example yet.\nuser=> (escape \"I want 1 < 2 as HTML, & other good things.\"\n               {\\< \"&amp;lt;\", \\> \"&amp;gt;\", \\ &amp; \"&amp;amp;\"})\n\"I want 1 &amp;lt; 2 as HTML, &amp;amp; other good things.\""}],
   :id 5999,
   :name "escape",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/5999"},
  "clojure.contrib.lazy-seqs/fibs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 612,
   :name "fibs",
   :ns "clojure.contrib.lazy-seqs",
   :url "http://clojuredocs.org/v/612"},
  "incanter.distributions/uniform-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5082,
   :name "uniform-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/5082"},
  "clojure.contrib.mock.test-adapter/make-arg-checker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 732,
   :name "make-arg-checker",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/732"},
  "clojure.core/ns-refers"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ns-map",
     :updated_at "2010-10-25 23:35:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1997",
     :line "3216",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 23:37:38.0",
     :function "ns-refers",
     :version 1,
     :created_at "2010-10-25 23:37:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (ns-refers 'clojure.main)\n{sorted-map #'clojure.core/sorted-map, read-line #'clojure.core/read-line, re-pattern #'clojure.core/re-pattern, keyword? #'clojure.core/keyword?, val #'clojure.core/val, chunked-seq? #'clojure.core/chunked-seq?, *compile-path* #'clojure.core/*compile-path*, ...chop...}"}],
   :id 5638,
   :name "ns-refers",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5638"},
  "incanter.processing/point-light"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3048,
   :name "point-light",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3048"},
  "clojure.set/rename"
  {:comments [],
   :see-alsos
   [{:namespace_id 111,
     :weight 2,
     :name "rename-keys",
     :updated_at "2011-05-12 21:52:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/2450",
     :line "77",
     :arglists_comp "[map kmap]",
     :url_friendly_name "rename-keys",
     :file "clojure/set.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-09-26 05:23:21.0",
     :function "rename",
     :version 3,
     :created_at "2010-07-10 22:07:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Here's a relation with two keys (think \"column names\" in SQL), :a and :b\n\nuser=> (def relation #{  {:a 1, :b 1}  {:a 2, :b 2} })\n\n\n;; I decide that :a is a stupid name and that :new-a would be better. \n;; Here's how I make a new relation with the renamed key:\n\nuser=> (rename relation {:a :new-a})\n#{{:new-a 1, :b 1} {:new-a 2, :b 2}}\n\n"}],
   :id 5985,
   :name "rename",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5985"},
  "net.cgrand.enlive-html/node-selector?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3891,
   :name "node-selector?",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3891"},
  "ring.adapter.httpcore/ring.adapter.httpcore.proxy$java.lang.Object$ContentProducer$2f493dd0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2610,
   :name
   "ring.adapter.httpcore.proxy$java.lang.Object$ContentProducer$2f493dd0",
   :ns "ring.adapter.httpcore",
   :url "http://clojuredocs.org/v/2610"},
  "clojure.java.io/resource"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5895,
   :name "resource",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5895"},
  "incanter.charts/incanter.charts.proxy$java.lang.Object$ChangeListener$22db79c0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2819,
   :name
   "incanter.charts.proxy$java.lang.Object$ChangeListener$22db79c0",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2819"},
  "clojure.contrib.generic.math-functions/pow"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 423,
   :name "pow",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/423"},
  "clojure.core/try"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "catch",
     :updated_at "2010-10-25 01:36:12.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5281",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "catch",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "finally",
     :updated_at "2010-10-28 03:10:04.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5282",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "finally",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "throw",
     :updated_at "2010-10-25 02:46:15.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5274",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "throw",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 01:37:14.0",
     :function "try",
     :version 1,
     :created_at "2010-10-25 01:37:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "=> (try\n     (/ 1 0)\n     (catch Exception e (str \"caught exception: \" (.getMessage e))))\n\n\"caught exception: Divide by zero\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-07 21:32:23.0",
     :function "try",
     :version 1,
     :created_at "2012-08-07 21:32:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; for Clojurescript use js/Object as type\n(try\n   (/ 1 0)\n   (catch js/Object e\n       (.log js/console e)))"}],
   :id 6132,
   :name "try",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6132"},
  "clojure.core/namespace"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-22 16:59:21.0",
     :function "namespace",
     :version 4,
     :created_at "2010-09-11 19:01:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x \"Foobar\")\n#'user/x\n\nuser=> (namespace 'user/x)\n\"user\"\n"}],
   :id 5618,
   :name "namespace",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5618"},
  "circumspec.AssertFailed/-init"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3614,
   :name "-init",
   :ns "circumspec.AssertFailed",
   :url "http://clojuredocs.org/v/3614"},
  "clojure.contrib.logging/warn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 649,
   :name "warn",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/649"},
  "net.licenser.sandbox.tester/extend-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5147,
   :name "extend-tester",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5147"},
  "clojure.contrib.combinatorics/combinations"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2011-01-09 23:10:26.0",
     :function "combinations",
     :version 1,
     :created_at "2011-01-09 23:10:26.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "Clojure=> (combinations '(a b c) 2)\n((a b) (a c) (b c))\nClojure=> (combinations '(a b c d e) 3)\n((a b c) (a b d) (a b e) (a c d) (a c e) (a d e) (b c d) (b c e) (b d e) (c d e))\n"}],
   :id 5229,
   :name "combinations",
   :ns "clojure.contrib.combinatorics",
   :url "http://clojuredocs.org/v/5229"},
  "clojure.core/bigint"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-22 16:50:09.0",
     :function "bigint",
     :version 4,
     :created_at "2010-09-06 16:52:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bigint 30)\n30\n\n\n;; Actually do something BigInteger-ish... (http://download.oracle.com/javase/6/docs/api/)\n\nuser=> (def x (bigint 97))\n#'user/x\n\nuser=> (.isProbablePrime x 1)\ntrue\n"}],
   :id 5377,
   :name "bigint",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5377"},
  "swank.commands.inspector/inspectee-title"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4218,
   :name "inspectee-title",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4218"},
  "clojure.core/let"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-07 01:52:53.0",
     :user_id 61,
     :function "let",
     :version "1.2.0",
     :created_at "2011-02-07 01:52:53.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Nota Bene: `let` in Clojure is like `let*` in Scheme -- each init-expr has access to the preceding binding forms. (There is also a `let*`, but it is more or less `let` without destructuring, and in fact is the underlying implementation.)"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "letfn",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/1546",
     :line "5246",
     :arglists_comp "[fnspecs & body]",
     :url_friendly_name "letfn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-14 00:26:12.0",
     :function "let",
     :version 8,
     :created_at "2010-07-09 17:10:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; let is a Clojure special form, a fundamental building block of the language.\n;;\n;; In addition to parameters passed to functions, let provides a way to create\n;; lexical bindings of data structures to symbols. The binding, and therefore \n;; the ability to resolve the binding, is available only within the lexical \n;; context of the let. \n;; \n;; let uses pairs in a vector for each binding you'd like to make and the value \n;; of the let is the value of the last expression to be evaluated. let also \n;; allows for destructuring which is a way to bind symbols to only part of a \n;; collection.\n\n;; A basic use for a let:\nuser=> (let [x 1] \n         x)\n1\n\n;; Note that the binding for the symbol y won't exist outside of the let:\nuser=> (let [y 1] \n         y)\n1\nuser=> (prn y)\njava.lang.Exception: Unable to resolve symbol: y in this context (NO_SOURCE_FILE:7)\n\n;; Another valid use of let:\nuser=> (let [a 1 b 2] \n         (+ a b))\n3\n\n;; The forms in the vector can be more complex (this example also uses\n;; the thread macro):\nuser=> (let [c (+ 1 2)\n             [d e] [5 6]] \n         (-> (+ d e) (- c)))\n8\n\n;; The bindings for let need not match up (note the result is a numeric\n;; type called a ratio):\nuser=> (let [[g h] [1 2 3]] \n         (/ g h))\n1/2\n\n;; From http://clojure-examples.appspot.com/clojure.core/let with permission."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:28:54.0",
     :function "let",
     :version 3,
     :created_at "2010-07-14 20:01:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [a (take 5 (range))\n             {:keys [b c d] :or {d 10 b 20 c 30}} {:c 50 :d 100}\n             [e f g & h] [\"a\" \"b\" \"c\" \"d\" \"e\"]\n             _ (println \"I was here!\")\n             foo 12\n             bar (+ foo 100)]\n         [a b c d e f g h foo bar])\nI was here!\n[(0 1 2 3 4) 20 50 100 \"a\" \"b\" \"c\" (\"d\" \"e\") 12 112]\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-10 01:35:26.0",
     :function "let",
     :version 1,
     :created_at "2011-08-10 01:35:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; :as example \n\nuser=> (let [[x y :as my-point] [5 3]]\n         (println x y)\n         (println my-point))\n\n5 3\n[5 3]\n\n; :as names the group you just destructured.\n\n; equivalent to (and better than)\n\nuser=> (let [[x y] [5 3]\n             my-point [x y]]\n         ;..."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-24 03:04:09.0",
     :function "let",
     :version 1,
     :created_at "2012-04-24 03:04:09.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;; map destructuring, all features\nuser=>\n(let [\n      ;;Binding Map\n      {:keys [k1 k2]        ;; bind vals with keyword keys\n       :strs [s1 s2]        ;; bind vals with string keys\n       :syms [sym1 sym2]    ;; bind vals with symbol keys\n       :or {k2 :default-kw, ;; default values\n            s2 :default-s, \n            sym2 :default-sym} \n       :as m}  ;; bind the entire map to `m`\n      ;;Data\n      {:k1 :keyword1, :k2 :keyword2,  ;; keyword keys\n       \"s1\" :string1, \"s2\" :string2,  ;; string keys\n       'sym1 :symbol1,                ;; symbol keys\n       ;; 'sym2 :symbol2              ;; `sym2` will get default value\n       }] \n  [k1 k2 s1 s2 sym1 sym2 m])  ;; return value\n\n[:keyword1, :keyword2, \n :string1, :string2,\n :symbol1, :default-sym, ;; key didn't exist, so got the default\n {'sym1 :symbol1, :k1 :keyword1, :k2 :keyword2, \n  \"s1\" :string1, \"s2\" :string2}]\n\n;; remember that vector and map destructuring can also be used with \n;; other macros that bind variables, e.g. `for` and `doseq`"}],
   :id 5580,
   :name "let",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5580"},
  "clojure.contrib.duck-streams/to-byte-array"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 267,
   :name "to-byte-array",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/267"},
  "net.licenser.sandbox/dot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5107,
   :name "dot",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5107"},
  "clojure.contrib.generic.math-functions/conjugate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 414,
   :name "conjugate",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/414"},
  "clojure.contrib.datalog.literals/negated?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 213,
   :name "negated?",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/213"},
  "clj-ssh.ssh/disconnect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1492,
   :name "disconnect",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1492"},
  "circumspec.contrib-mocking/report-problem"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3652,
   :name "report-problem",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3652"},
  "incanter.stats/damerau-levenshtein-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3302,
   :name "damerau-levenshtein-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3302"},
  "clojure.contrib.datalog.database/database-counts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 182,
   :name "database-counts",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/182"},
  "clojure.contrib.find-namespaces/find-clojure-sources-in-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 309,
   :name "find-clojure-sources-in-dir",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/309"},
  "clojure.contrib.sql.internal/print-update-counts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1235,
   :name "print-update-counts",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1235"},
  "leiningen.core/resolve-task"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3526,
   :name "resolve-task",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3526"},
  "lancet/cvstagdiff"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3467,
   :name "cvstagdiff",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3467"},
  "clojure.core/bit-xor"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:22:57.0",
     :function "bit-xor",
     :version 4,
     :created_at "2010-07-28 10:39:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; set bits to 1 where bits of the arguments are different\nuser=> (bit-xor 2r1100 2r1001) \n5 \n;; 5 = 2r0101\n\n"}],
   :id 5390,
   :name "bit-xor",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5390"},
  "clojure.contrib.lazy-seqs/primes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 613,
   :name "primes",
   :ns "clojure.contrib.lazy-seqs",
   :url "http://clojuredocs.org/v/613"},
  "incanter.processing/saturation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3257,
   :name "saturation",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3257"},
  "clojure.core/<"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "=",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1885",
     :line "653",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "not=",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1530",
     :line "671",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "not=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name ">",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1902",
     :line "868",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name ">",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:40:19.0",
     :function "<",
     :version 3,
     :created_at "2010-07-28 05:56:20.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (< 1 2)\ntrue\nuser=> (< 2 1)\nfalse\nuser=> (< 1.5 2)\ntrue\nuser=> (< 2 3 4 5 6)\ntrue"}],
   :id 5329,
   :name "<",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5329"},
  "incanter.bayes/sample-multinomial-params"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2745,
   :name "sample-multinomial-params",
   :ns "incanter.bayes",
   :url "http://clojuredocs.org/v/2745"},
  "clojure.contrib.seq/fill-queue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 620,
   :name "fill-queue",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/620"},
  "clojure.contrib.jmx/readable?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 548,
   :name "readable?",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/548"},
  "circumspec.should/fail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3654,
   :name "fail",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3654"},
  "net.cgrand.enlive-html/lockstep-transform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3855,
   :name "lockstep-transform",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3855"},
  "clojure.contrib.test-is/testing-vars-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1372,
   :name "testing-vars-str",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1372"},
  "clojure.contrib.find-namespaces/read-file-ns-decl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 317,
   :name "read-file-ns-decl",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/317"},
  "incanter.processing/noise"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3044,
   :name "noise",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3044"},
  "circumspec.runner/test-results"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3741,
   :name "test-results",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3741"},
  "swank.commands.basic/compile-string-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4097,
   :name "compile-string-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4097"},
  "clojure.core/unchecked-double"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5806,
   :name "unchecked-double",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5806"},
  "circumspec.watch/run-watcher"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3774,
   :name "run-watcher",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3774"},
  "clojure.contrib.pprint/compiled-format963"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5239,
   :name "compiled-format963",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5239"},
  "incanter.core/sq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2888,
   :name "sq",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2888"},
  "incanter.core/$data"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2848,
   :name "$data",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2848"},
  "clojure.core/tree-seq"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-11-20 18:01:25.0",
     :function "tree-seq",
     :version 5,
     :created_at "2010-08-02 12:15:31.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Each node is a number or a seq, \n;; so branch?==seq? and children==identity\n;; \n;;     .\n;;    / \\\n;;   .   .\n;;  /|\\  |\n;; 1 2 . 4\n;;     |  \n;;     3\n;;\n\nuser=> (tree-seq seq? identity '((1 2 (3)) (4)))\n\n(((1 2 (3)) (4)) (1 2 (3)) 1 2 (3) 3 (4) 4)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-11-15 19:24:24.0",
     :function "tree-seq",
     :version 1,
     :created_at "2011-11-15 19:24:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (tree-seq map? #(interleave (keys %) (vals %)) {:a 1 :b {:c 3 :d 4 :e {:f 6 :g 7}}})\n\n({:a 1, :b {:c 3, :d 4, :e {:f 6, :g 7}}} :a 1 :b {:c 3, :d 4, :e {:f 6, :g 7}} :c 3 :d 4 :e {:f 6, :g 7} :f 6 :g 7)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-11-20 18:05:53.0",
     :function "tree-seq",
     :version 1,
     :created_at "2011-11-20 18:05:53.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Each node is a (node-root child1 child2 ...),\n;; so branch?==next and children==rest\n;;\n;;     A\n;;    / \\\n;;   B   C\n;;  / \\  |\n;; D   E F\n;;\nuser=> (map first (tree-seq next rest '(:A (:B (:D) (:E)) (:C (:F)))))\n\n(:A :B :D :E :C :F)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-09 18:20:23.0",
     :function "tree-seq",
     :version 1,
     :created_at "2012-04-09 18:20:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; FYI, previous example doesn't always work:\n;;\nuser> (map first (tree-seq next rest '((1 2 (3)) (4))))\n((1 2 (3)) 4)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-26 01:44:00.0",
     :function "tree-seq",
     :version 1,
     :created_at "2012-04-26 01:44:00.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (tree-seq seq? seq [[1 2 [3]] [4]])\n([[1 2 [3]] [4]])\n\nuser=> (tree-seq vector? seq [[1 2 [3]] [4]])\n([[1 2 [3]] [4]] [1 2 [3]] 1 2 [3] 3 [4] 4)\n\nuser=> (tree-seq seq? seq '((1 2 (3)) (4)))\n(((1 2 (3)) (4)) (1 2 (3)) 1 2 (3) 3 (4) 4)\n"}],
   :id 5796,
   :name "tree-seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5796"},
  "net.licenser.sandbox.tester/debug-tester"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5127,
   :name "debug-tester",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5127"},
  "clojure.contrib.pprint/compiled-format974"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5240,
   :name "compiled-format974",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5240"},
  "lancet/task-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3480,
   :name "task-names",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3480"},
  "clojure.contrib.monads/m-join"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 801,
   :name "m-join",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/801"},
  "clj-swing.example/str-ref"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5183,
   :name "str-ref",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5183"},
  "clojure.contrib.http.agent/message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 482,
   :name "message",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/482"},
  "leiningen.compile/compile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3517,
   :name "compile",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3517"},
  "lancet/untar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3474,
   :name "untar",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3474"},
  "clojure.contrib.json/compiled-format5808"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5232,
   :name "compiled-format5808",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/5232"},
  "incanter.core/query-to-pred"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2878,
   :name "query-to-pred",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2878"},
  "clojure.core/case"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-20 08:30:46.0",
     :user_id 213,
     :function "case",
     :version "1.2.0",
     :created_at "2010-11-20 08:16:28.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "the third example describing myseq may be incorrect. I think we have to use vectors for comparing list of compile time constants.\n<pre>\n(let [myseq [1 2]]\n (case myseq\n  [] \"empty seq\"\n  [1 2] \"my seq\"\n  \"default\"))\n</pre>\n\nThe parenthesized test conditions are used when multiple test conditions give the same output (output expression). In my case , since both [true, true] and [false, false] return true, i have put them within parenthesis.\n\n<pre>\n(defn equ\n [a b]\n (case [a b]\n   ([true true] [false false]) true\n   true))\n\n(equ true true) ;; returns true\n(equ false false) ;; returns true\n(equ false true) ;; return false\n(equ true false) ;; returns false\n</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-24 19:17:54.0",
     :user_id 224,
     :function "case",
     :version "1.2.0",
     :created_at "2010-11-24 19:17:54.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "I updated that example with myseq to reflect behavior of Clojure 1.2.0 on my machine.  I also added an additional example to explicitly demonstrate multiple values for the same condition."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "cond",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1553",
     :line "491",
     :arglists_comp "[& clauses]",
     :url_friendly_name "cond",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "condp",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1838",
     :line "5097",
     :arglists_comp "[pred expr & clauses]",
     :url_friendly_name "condp",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-25 00:09:54.0",
     :function "case",
     :version 6,
     :created_at "2010-07-12 19:25:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [mystr \"hello\"]\n         (case mystr\n           \"\" 0\n           \"hello\" (count mystr)))\n5\n\nuser=> (let [mystr \"no match\"]\n         (case mystr\n               \"\" 0\n               \"hello\" (count mystr)))\nNo matching clause: no match\n  [Thrown class java.lang.IllegalArgumentException]\n\nuser=> (let [mystr \"no match\"]\n         (case mystr\n               \"\" 0\n               \"hello\" (count mystr)\n               \"default\"))\n\"default\"\n\n;; You can give multiple values for the same condition by putting\n;; those values in a list.\nuser=> (case 'y\n             (x y z) \"x, y, or z\"\n             \"default\")\n\"x, y, or z\"\n\nuser=> (let [myseq '(1 2)]\n         (case myseq\n               (()) \"empty seq\"\n               ((1 2)) \"my seq\"\n               \"default\"))\n\"my seq\"\n\n;; \"The test-constants are not evaluated.They must be compile-time\n;; literals, and need not be quoted.\" \nuser=> (let [myvec [1 2]]\n         (case myvec\n               [] \"empty vec\"\n               (vec '(1 2)) \"my vec\"\n               \"default\"))\n\"default\"\n"}],
   :id 5401,
   :name "case",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5401"},
  "incanter.stats/cdf-f"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3341,
   :name "cdf-f",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3341"},
  "clojure.contrib.monads/state-m-until"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 758,
   :name "state-m-until",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/758"},
  "circumspec.runner/with-timing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3735,
   :name "with-timing",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3735"},
  "circumspec.for-all/*generated-values*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3657,
   :name "*generated-values*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3657"},
  "clojure.contrib.accumulators/empty-mean-variance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 19,
   :name "empty-mean-variance",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/19"},
  "clojure.core/var-set"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "with-local-vars",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1843",
     :line "3354",
     :arglists_comp "[name-vals-vec & body]",
     :url_friendly_name "with-local-vars",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5829,
   :name "var-set",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5829"},
  "clojure.core/float"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:40:45.0",
     :function "float",
     :version 3,
     :created_at "2010-09-06 16:07:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (float 1)\n1.0"}],
   :id 5513,
   :name "float",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5513"},
  "swank.core/format-restarts-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4081,
   :name "format-restarts-for-emacs",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4081"},
  "clojure.core/quote"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-13 09:22:08.0",
     :user_id 41,
     :function "quote",
     :version "1.2.0",
     :created_at "2010-11-13 07:31:13.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Quote gives you the unevaluated form.  That is:\n\n<pre>user=&gt; '(foo bar baz)</pre>\n\nWill not attempt to evaluate foo as a function but rather just return the data structure as is (with the three symbols unevaluated).</pre></pre>"}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 17:56:57.0",
     :function "quote",
     :version 1,
     :created_at "2010-12-29 17:56:57.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; ' is the shortcut for quote\nuser> (= 'a (quote a))\ntrue\n\n;; quoting keeps something from being evaluated\nuser> (quote (println \"foo\"))\n(println \"foo\")"}],
   :id 6128,
   :name "quote",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6128"},
  "incanter.processing/ellipse-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3187,
   :name "ellipse-mode",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3187"},
  "clojure.core/aset-short"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:28:00.0",
     :function "aset-short",
     :version 1,
     :created_at "2011-08-21 01:28:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 shorts and set one of the values to 31415\n\nuser=> (def ss (short-array 10))\n#'user/ss\nuser=> (vec ss)\n[0 0 0 0 0 0 0 0 0 0]\nuser=> (aset-short ss 3 31415)\n31415\nuser=> (vec ss)\n[0 0 0 31415 0 0 0 0 0 0]\nuser=>"}],
   :id 5364,
   :name "aset-short",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5364"},
  "circumspec.report/result-context"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3693,
   :name "result-context",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3693"},
  "net.licenser.sandbox/enable-security-manager"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5116,
   :name "enable-security-manager",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5116"},
  "clojure.core/*fn-loader*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5299,
   :name "*fn-loader*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5299"},
  "clojure.core/bean"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:53:59.0",
     :function "bean",
     :version 3,
     :created_at "2010-07-13 12:27:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (import java.util.Date)\njava.util.Date\n\nuser=> (def *now* (Date.))\n#'user/*now*\n\nuser=> (bean *now*)\n{:seconds 57, :date 13, :class java.util.Date, :minutes 55, :hours 17, :year 110, :timezoneOffset -330, :month 6, :day 2, :time 1279023957492}\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-30 01:50:44.0",
     :function "bean",
     :version 1,
     :created_at "2012-09-30 01:50:44.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; although not reference-able in Clojuredocs, org.clojure/java.data provides a useful, alternative 'from-java' function that works similarly to bean, but more customizable.  See https://github.com/clojure/java.data for more info."}],
   :id 5375,
   :name "bean",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5375"},
  "circumspec.contrib-mocking/no-matching-function-signature"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3639,
   :name "no-matching-function-signature",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3639"},
  "incanter.processing/text-ascent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3105,
   :name "text-ascent",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3105"},
  "swank.commands.completion/potential-classes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4122,
   :name "potential-classes",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4122"},
  "net.cgrand.enlive-html/sniptest*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3906,
   :name "sniptest*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3906"},
  "clojure.contrib.pprint/with-pprint-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1000,
   :name "with-pprint-dispatch",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1000"},
  "clojure.core/pop!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc!",
     :updated_at "2011-06-10 13:56:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1640",
     :line "2561",
     :arglists_comp "[coll key val]|[coll key val & kvs]",
     :url_friendly_name "assoc!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dissoc!",
     :updated_at "2010-12-30 09:00:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1853",
     :line "2574",
     :arglists_comp "[map key]|[map key & ks]",
     :url_friendly_name "dissoc!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-22 20:14:38.0",
     :function "pop!",
     :version 2,
     :created_at "2011-06-10 13:53:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Note how we always use the return value of pop! in these examples\n;; for all future modifications, rather than (incorrectly) ignoring the return\n;; value and continuing to modify the original transient set.  See examples for\n;; assoc! and dissoc! for more discussion and examples of this.\n\nuser=> (def foo (transient [1 2 3]))\n#'user/foo\nuser=> (count foo)\n3\nuser=> (def foo (pop! foo))\n#'user/foo\nuser=> foo\n#<TransientVector clojure.lang.PersistentVector$TransientVector@1638fff7>\nuser=> (count foo)\n2\nuser=> (def foo (pop! foo))\n#'user/foo\nuser=> (count foo)\n1\nuser=> (def foo (persistent! foo))\n#'user/foo\nuser=> (count foo)\n1\nuser=> foo\n[1]\n"}],
   :id 5661,
   :name "pop!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5661"},
  "net.cgrand.enlive-html/as-nodes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3905,
   :name "as-nodes",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3905"},
  "incanter.charts/function-plot*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2808,
   :name "function-plot*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2808"},
  "lancet/xmlproperty"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3470,
   :name "xmlproperty",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3470"},
  "clojure.core/take-last"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "last",
     :updated_at "2010-11-06 03:20:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1644",
     :line "223",
     :arglists_comp "[coll]",
     :url_friendly_name "last",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "butlast",
     :updated_at "2010-11-06 03:20:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1658",
     :line "232",
     :arglists_comp "[coll]",
     :url_friendly_name "butlast",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop-last",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:10.0",
     :added nil,
     :url "http://clojuredocs.org/v/1830",
     :line "2183",
     :arglists_comp "[s]|[n s]",
     :url_friendly_name "drop-last",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-30 21:49:55.0",
     :function "take-last",
     :version 4,
     :created_at "2010-07-28 06:18:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (take-last 2 [1 2 3 4])\n(3 4)\n\nuser=> (take-last 2 [4])\n(4)\n\nuser=> (take-last 2 [])\nnil\n\nuser=> (take-last 2 nil)\nnil"}],
   :id 5785,
   :name "take-last",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5785"},
  "clojure.contrib.monads/set-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 787,
   :name "set-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/787"},
  "incanter.core/$join"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2850,
   :name "$join",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2850"},
  "swank.loader/*swank-compile-path*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4293,
   :name "*swank-compile-path*",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4293"},
  "swank.commands.inspector/*inspectee*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4209,
   :name "*inspectee*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4209"},
  "swank.commands.completion/resolve-class"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4145,
   :name "resolve-class",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4145"},
  "swank.util.net.sockets/make-server-socket"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4277,
   :name "make-server-socket",
   :ns "swank.util.net.sockets",
   :url "http://clojuredocs.org/v/4277"},
  "incanter.processing/destroy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3109,
   :name "destroy",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3109"},
  "incanter.charts/add-histogram"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2841,
   :name "add-histogram",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2841"},
  "lancet/bunzip2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3420,
   :name "bunzip2",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3420"},
  "clojure.contrib.greatest-least/least-by"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 452,
   :name "least-by",
   :ns "clojure.contrib.greatest-least",
   :url "http://clojuredocs.org/v/452"},
  "clojure.contrib.generic/nary-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 379,
   :name "nary-dispatch",
   :ns "clojure.contrib.generic",
   :url "http://clojuredocs.org/v/379"},
  "clojure.contrib.monads/defmonad"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 769,
   :name "defmonad",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/769"},
  "clojure.contrib.test-is/run-tests"
  {:comments
   [{:namespace_id 91,
     :ns "clojure.contrib.test-is",
     :updated_at "2010-11-08 23:57:37.0",
     :user_id 202,
     :function "run-tests",
     :version "1.2.0",
     :created_at "2010-11-08 23:57:37.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "If you don't specify any namespaces, the current namespace is\nused."}],
   :see-alsos
   [{:namespace_id 115,
     :weight 2,
     :name "deftest",
     :updated_at "2010-11-08 23:37:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2495",
     :line "593",
     :arglists_comp "[name & body]",
     :url_friendly_name "deftest",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "run-all-tests",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2511",
     :line "743",
     :arglists_comp "[]|[re]",
     :url_friendly_name "run-all-tests",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "*load-tests*",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2519",
     :line "239",
     :arglists_comp "",
     :url_friendly_name "*load-tests*",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 91,
     :ns "clojure.contrib.test-is",
     :updated_at "2010-11-08 23:54:53.0",
     :function "run-tests",
     :version 1,
     :created_at "2010-11-08 23:54:53.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";run tests from the core namespace (there are no tests in it,though)\n;to make tests use (deftest ...)\n(run-tests 'clojure.core)\n\n=> Testing clojure.core\n\nRan 0 tests containing 0 assertions.\n0 failures, 0 errors.\n{:type :summary, :test 0, :pass 0, :fail 0, :error 0}"}],
   :id 1380,
   :name "run-tests",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1380"},
  "clojure.contrib.logging/trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 639,
   :name "trace",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/639"},
  "circumspec.for-all/symbol-of"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3660,
   :name "symbol-of",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3660"},
  "incanter.processing/no-smooth"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3239,
   :name "no-smooth",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3239"},
  "clj-swing.example/clj_swing.example.proxy$java.lang.Object$ActionListener$46793e3a"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5187,
   :name
   "clj_swing.example.proxy$java.lang.Object$ActionListener$46793e3a",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5187"},
  "swank.util.class-browse/class-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4130,
   :name "class-file?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4130"},
  "incanter.stats/spearmans-rho"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3319,
   :name "spearmans-rho",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3319"},
  "clojure.core/map"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "map-indexed",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1974",
     :line "5618",
     :arglists_comp "[f coll]",
     :url_friendly_name "map-indexed",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "pmap",
     :updated_at "2011-08-13 09:51:59.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1952",
     :line "5426",
     :arglists_comp "[f coll]|[f coll & colls]",
     :url_friendly_name "pmap",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "amap",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1871",
     :line "4108",
     :arglists_comp "[a idx ret expr]",
     :url_friendly_name "amap",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-27 02:46:03.0",
     :function "map",
     :version 6,
     :created_at "2010-07-09 17:16:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map inc [1 2 3 4 5])\n(2 3 4 5 6)\n\n\n;; map can be used with multiple collections. Collections will be consumed\n;; and passed to the mapping function in parallel:\nuser=> (map + [1 2 3] [4 5 6])\n(5 7 9)\n\n\n;; When map is passed more than one collection, the mapping function will\n;; be applied until one of the collections runs out:\nuser=> (map + [1 2 3] (iterate inc 1))\n(2 4 6)\n\n\n\n;; map is often used in conjunction with the # reader macro:\nuser=> (map #(str \"\" % \"\") [\"the\" \"quick\" \"brown\" \"fox\"])\n(\"the\" \"quick\" \"brown\" \"fox\")\n\n;; A useful idiom to pull \"columns\" out of a collection of collections:\nuser=> (apply map vector [[:a :b :c]\n                          [:d :e :f]\n                          [:g :h :i]])\n\n([:a :d :g] [:b :e :h] [:c :f :i])\n\n\n\n;; From http://clojure-examples.appspot.com/clojure.core/map"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:50:56.0",
     :function "map",
     :version 3,
     :created_at "2010-07-13 16:06:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map #(vector (first %) (* 2 (second %)))\n            {:a 1 :b 2 :c 3})\n([:a 2] [:b 4] [:c 6])\n\nuser=> (into {} *1)\n{:a 2, :b 4, :c 6}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-16 14:00:29.0",
     :function "map",
     :version 1,
     :created_at "2011-07-16 14:00:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Use a hash-map as a function to translate values in a collection from the \n;; given key to the associated value\n\nuser=> (map {2 \"two\" 3 \"three\"} [5 3 2])\n(nil \"three\" \"two\")\n\n;; then use (filter identity... to remove the nils\nuser=> (filter identity (map {2 \"two\" 3 \"three\"} [5 3 2]))\n(\"three\" \"two\")"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-12 07:36:07.0",
     :function "map",
     :version 5,
     :created_at "2011-11-03 15:03:37.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; mapping over a hash-map applies (into) first. \n;; need to use functions that deal with arrays (fn [[key val]] ...)\n(map pprint {:key :val :key1 :val1})\n([:key :val]\n[:key1 :val1]\nnil nil)\n\n;;above, the pprint output appears to be part of the return value but it's not:\n(hash-set (map pprint {:key :val :key1 :val1}))\n[:key :val]\n[:key1 :val1]\n#{(nil nil)}\n\n(map second {:key :val :key1 :val1})\n(:val :val1)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-15 20:30:44.0",
     :function "map",
     :version 4,
     :created_at "2012-08-15 20:25:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(map fn [a 4 x]\n        [b 5 y]\n        [c 6])    \n;        ^ ^\n; applies fn to a b c as (fn a b c)\n; applies fn to 4 5 6 as (fn 4 5 6)\n; ignores (x y)\n; returns a list of results\n; equivalent to (list (fn a b c) (fn 4 5 6))\n\n;example\n(map list [1 2 3]\n         '(a b c)\n         '(4 5))\n\nuser=> (map list  [1 2 3] '(a b c) '(4 5))\n((1 a 4) (2 b 5))\n;same as\nuser=> (list (list 1 'a 4) (list 2 'b 5))\n((1 a 4) (2 b 5))"}],
   :id 5600,
   :name "map",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5600"},
  "clojure.core/proxy-super"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "proxy",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1990",
     :line "300",
     :arglists_comp "[class-and-interfaces args & fs]",
     :url_friendly_name "proxy",
     :file "clojure/core_proxy.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-27 02:27:10.0",
     :function "proxy-super",
     :version 4,
     :created_at "2012-11-27 02:24:36.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Create a proxy for java.util.ArrayList that overrides the add() \n;; method and calls the super class implementation using proxy-super.\n(def lst (proxy [java.util.ArrayList] []\n           (add [x]\n             (println \"Adding some stuff:\" x)\n             (proxy-super add x))))\n\nuser=> (.add lst 1)\nAdding some stuff: 1\ntrue\n\nuser=> (.add lst 2)\nAdding some stuff: 2\ntrue\n\nuser=> (.add lst [:this :is :some :other :stuff])\nAdding some stuff: [:this :is :some :other :stuff]\ntrue\n\nuser=> (.size lst)\n3\n\n\n "}],
   :id 5685,
   :name "proxy-super",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5685"},
  "clojure.core/ref-history-count"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "ref-min-history",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/1776",
     :line "1881",
     :arglists_comp "[ref]|[ref n]",
     :url_friendly_name "ref-min-history",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "ref-max-history",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1588",
     :line "1889",
     :arglists_comp "[ref]|[ref n]",
     :url_friendly_name "ref-max-history",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-23 00:16:28.0",
     :function "ref-history-count",
     :version 1,
     :created_at "2012-02-23 00:16:28.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def store (ref {}))\n#'user/store\nuser=> (ref-history-count store)\n0\nuser=> (ref-max-history store)\n10\nuser=> (ref-min-history store)\n0"}],
   :id 5709,
   :name "ref-history-count",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5709"},
  "clojure.contrib.datalog.database/replace-relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 146,
   :name "replace-relation",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/146"},
  "incanter.processing/RADIUS"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3121,
   :name "RADIUS",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3121"},
  "clojure.contrib.test-is/*test-out*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1383,
   :name "*test-out*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1383"},
  "clojure.core/odd?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "even?",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1927",
     :line "1088",
     :arglists_comp "[n]",
     :url_friendly_name "even_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:41:10.0",
     :function "odd?",
     :version 3,
     :created_at "2010-07-13 19:31:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (odd? 1)\ntrue\nuser=> (odd? 2)\nfalse\nuser=> (odd? 0)\nfalse"}],
   :id 5649,
   :name "odd?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5649"},
  "swank.commands.basic/who-specializes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3983,
   :name "who-specializes",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3983"},
  "clojure.contrib.mock/has-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5242,
   :name "has-args",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5242"},
  "swank.util.class-browse/clojure-fn?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4141,
   :name "clojure-fn?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4141"},
  "clj-swing.document/clj_swing.document.proxy$java.lang.Object$AbstractDocument$Content$1fa6318b"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5175,
   :name
   "clj_swing.document.proxy$java.lang.Object$AbstractDocument$Content$1fa6318b",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5175"},
  "clojure.contrib.generic/nary-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 381,
   :name "nary-type",
   :ns "clojure.contrib.generic",
   :url "http://clojuredocs.org/v/381"},
  "clojure.java.javadoc/add-remote-javadoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5903,
   :name "add-remote-javadoc",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5903"},
  "swank.commands.basic/frame-catch-tags-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4056,
   :name "frame-catch-tags-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4056"},
  "clojure.core/future?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:17:21.0",
     :function "future?",
     :version 2,
     :created_at "2012-06-09 07:17:04.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def f (future (inc 0)))\n#'user/f\n\nuser=> (future? f)\ntrue\n\nuser=> (future? 1)\nfalse\n"}],
   :id 5531,
   :name "future?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5531"},
  "swank.util.class-browse/class-or-ns-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4152,
   :name "class-or-ns-name",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4152"},
  "clojure.contrib.miglayout.internal/ConstraintParser"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 706,
   :name "ConstraintParser",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/706"},
  "leiningen.pom/read-git-origin"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3563,
   :name "read-git-origin",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3563"},
  "clojure.core/short"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "int",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/2001",
     :line "733",
     :arglists_comp "[x]",
     :url_friendly_name "int",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "byte",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1852",
     :line "2697",
     :arglists_comp "[x]",
     :url_friendly_name "byte",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "shorts",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/1517",
     :line "4222",
     :arglists_comp "[xs]",
     :url_friendly_name "shorts",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "short-array",
     :updated_at "2011-08-20 23:37:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1559",
     :line "4168",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "short-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:41:32.0",
     :function "short",
     :version 3,
     :created_at "2010-08-16 01:49:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (class (short 1))\njava.lang.Short"}],
   :id 5753,
   :name "short",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5753"},
  "clojure.string/trim"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "triml",
     :updated_at "2010-11-08 03:15:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2478",
     :line "190",
     :arglists_comp "[s]",
     :url_friendly_name "triml",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "trimr",
     :updated_at "2010-11-08 03:13:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2475",
     :line "201",
     :arglists_comp "[s]",
     :url_friendly_name "trimr",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "trim-newline",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2486",
     :line "212",
     :arglists_comp "[s]",
     :url_friendly_name "trim-newline",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-11-08 03:16:16.0",
     :function "trim",
     :version 2,
     :created_at "2010-10-01 01:52:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Trim basically does what you'd expect.  What the doc string\n;; does not tell you however is that:\n;;  - null will cause an error\n;;  - non-string parameters will be converted to a string\n;;    before being trimed.\n\n(use 'clojure.string)\nuser=> (trim \"     a      \")\n\"a\"\nuser=> (trim nil)  \njava.lang.NullPointerException (NO_SOURCE_FILE:0)\nuser=> (trim 1.1)\n\"1.1\"\nuser=> (trim [1 2 3])\n\"[1 2 3]\"\n"}],
   :id 6007,
   :name "trim",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6007"},
  "clojure.contrib.mock.test-adapter/never"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 733,
   :name "never",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/733"},
  "clojure.java.shell/sh"
  {:comments [],
   :see-alsos
   [{:namespace_id 106,
     :weight 0,
     :name "with-sh-dir",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2174",
     :line "21",
     :arglists_comp "[dir & forms]",
     :url_friendly_name "with-sh-dir",
     :file "clojure/java/shell.clj"}
    {:namespace_id 106,
     :weight 0,
     :name "with-sh-env",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2175",
     :line "28",
     :arglists_comp "[env & forms]",
     :url_friendly_name "with-sh-env",
     :file "clojure/java/shell.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 106,
     :ns "clojure.java.shell",
     :updated_at "2012-03-27 23:28:39.0",
     :function "sh",
     :version 5,
     :created_at "2010-07-05 19:23:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (use '[clojure.java.shell :only [sh]])\n\n;; Note: The actual output you see from a command like this will look messier.\n;; The output below has had all newline characters replaced with line\n;; breaks.  You would see a big long string with \\n characters in the middle.\nuser=> (sh \"ls\" \"-aul\")\n\n{:exit 0, \n :out \"total 64\ndrwxr-xr-x  11 zkim  staff    374 Jul  5 13:21 .\ndrwxr-xr-x  25 zkim  staff    850 Jul  5 13:02 ..\ndrwxr-xr-x  12 zkim  staff    408 Jul  5 13:02 .git\n-rw-r--r--   1 zkim  staff     13 Jul  5 13:02 .gitignore\n-rw-r--r--   1 zkim  staff  12638 Jul  5 13:02 LICENSE.html\n-rw-r--r--   1 zkim  staff   4092 Jul  5 13:02 README.md\ndrwxr-xr-x   2 zkim  staff     68 Jul  5 13:15 classes\ndrwxr-xr-x   5 zkim  staff    170 Jul  5 13:15 lib\n-rw-r--r--@  1 zkim  staff   3396 Jul  5 13:03 pom.xml\n-rw-r--r--@  1 zkim  staff    367 Jul  5 13:15 project.clj\ndrwxr-xr-x   4 zkim  staff    136 Jul  5 13:15 src\n\", :err \"\"}"}
    {:namespace_id 106,
     :ns "clojure.java.shell",
     :updated_at "2011-08-17 16:12:16.0",
     :function "sh",
     :version 1,
     :created_at "2011-08-17 16:12:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (use '[clojure.java.shell :only [sh]])\n\nuser=> (println (:out (sh \"cowsay\" \"Printing a command-line output\")))\n\n _________________________________ \n< Printing a command-line output. >\n --------------------------------- \n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\nnil"}
    {:namespace_id 338,
     :ns "clojure.java.shell",
     :updated_at "2012-03-08 21:21:45.0",
     :function "sh",
     :version 5,
     :created_at "2012-03-08 20:57:07.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use '[clojure.java.shell :only [sh]])\nnil\n\n;; note that the options, like :in, have to go at the end of arglist\n;; advantage of piping-in thru stdin is less need for quoting/escaping\nuser=> (println (:out (sh \"cat\" \"-\" :in \"Printing input from stdin with funny chars like ' \\\" $@ & \")))\nPrinting input from stdin with funny chars like ' \" $@ & \nnil"}
    {:namespace_id 338,
     :ns "clojure.java.shell",
     :updated_at "2012-05-08 21:13:48.0",
     :function "sh",
     :version 2,
     :created_at "2012-05-08 21:13:25.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; sh is implemented using Clojure futures.  See examples for 'future'\n;; for discussion of an undesirable 1-minute wait that can occur before\n;; your standalone Clojure program exits if you do not use shutdown-agents."}],
   :id 5907,
   :name "sh",
   :ns "clojure.java.shell",
   :url "http://clojuredocs.org/v/5907"},
  "clojure.contrib.accumulators/mean-variance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 18,
   :name "mean-variance",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/18"},
  "incanter.processing/POLYGON"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3040,
   :name "POLYGON",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3040"},
  "circumspec.report.nested/report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3712,
   :name "report",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3712"},
  "circumspec.locator/test-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3684,
   :name "test-namespaces",
   :ns "circumspec.locator",
   :url "http://clojuredocs.org/v/3684"},
  "clojure.core/aset-float"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:20:09.0",
     :function "aset-float",
     :version 1,
     :created_at "2011-08-21 01:20:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 floats and set one of the values to 3.1415\n\nuser=> (def fs (float-array 10))\n#'user/fs\nuser=> (vec fs)\n[0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\nuser=> (aset-float fs 3 3.1415)\n3.1415\nuser=> (vec fs)\n[0.0 0.0 0.0 3.1415 0.0 0.0 0.0 0.0 0.0 0.0]\nuser=>"}],
   :id 5361,
   :name "aset-float",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5361"},
  "clojure.contrib.pprint/pprint-ref"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 999,
   :name "pprint-ref",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/999"},
  "circumspec.watch/changed-test-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3775,
   :name "changed-test-namespaces",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3775"},
  "clojure.contrib.sql/insert-values"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1241,
   :name "insert-values",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1241"},
  "circumspec.utils/defn!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3633,
   :name "defn!",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3633"},
  "lancet/runonce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3439,
   :name "runonce",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3439"},
  "clojure.core/vector?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:42:20.0",
     :function "vector?",
     :version 3,
     :created_at "2010-07-13 19:43:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (vector? [1 2 3])\ntrue\nuser=> (vector? '(1 2 3))\nfalse\nuser=> (vector? (vec '(1 2 3)))\ntrue"}],
   :id 5835,
   :name "vector?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5835"},
  "clj-ssh.ssh/ssh-log-levels"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1459,
   :name "ssh-log-levels",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1459"},
  "swank.util.class-browse/scan-paths"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4154,
   :name "scan-paths",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4154"},
  "net.cgrand.xml/attrs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3948,
   :name "attrs",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3948"},
  "clojure.contrib.trace/tracer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1406,
   :name "tracer",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1406"},
  "clojure.string/triml"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "trim",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/2469",
     :line "184",
     :arglists_comp "[s]",
     :url_friendly_name "trim",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "trim-newline",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2486",
     :line "212",
     :arglists_comp "[s]",
     :url_friendly_name "trim-newline",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "trimr",
     :updated_at "2010-11-08 03:13:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2475",
     :line "201",
     :arglists_comp "[s]",
     :url_friendly_name "trimr",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-11-08 03:15:18.0",
     :function "triml",
     :version 1,
     :created_at "2010-11-08 03:15:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(use 'clojure.string)\n(triml \"        my string         \")\n=> \"my string         \"\n"}],
   :id 6009,
   :name "triml",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6009"},
  "clojure.core/gen-interface"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5533,
   :name "gen-interface",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5533"},
  "clojure.main/repl-prompt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5916,
   :name "repl-prompt",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5916"},
  "clojure.contrib.monads/censor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 770,
   :name "censor",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/770"},
  "clojure.contrib.jmx.Bean/-init"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 581,
   :name "-init",
   :ns "clojure.contrib.jmx.Bean",
   :url "http://clojuredocs.org/v/581"},
  "clojure.contrib.http.agent/request-headers"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 456,
   :name "request-headers",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/456"},
  "clojure.core/="
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-18 23:46:23.0",
     :user_id 41,
     :function "=",
     :version "1.2.0",
     :created_at "2010-10-18 23:46:23.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "There is a difference between \"=\" and \"==\".  For primitives you definitely want to use \"==\" as \"=\" will result in a cast to the wrapped types for it's arguments.  \n\nThis may not be the case come Clojure 1.3 (see [1])\n\n[1] http://github.com/clojure/clojure/commit/df8c65a286e90e93972bb69392bc106128427dde"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "==",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1511",
     :line "898",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "==",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "not=",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1530",
     :line "671",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "not=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "identical?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1666",
     :line "646",
     :arglists_comp "[x y]",
     :url_friendly_name "identical_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:58:57.0",
     :function "=",
     :version 4,
     :created_at "2010-07-29 23:07:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (= 1)\ntrue\nuser=> (= 1 1)\ntrue\nuser=> (= 1 2)\nfalse\nuser=> (= 1 1 1)\ntrue\nuser=> (= 1 1 2)\nfalse\nuser=> (= '(1 2) [1 2])\ntrue\nuser=> (= nil nil)\ntrue\n\n;; It should be noted that equality is not defined for Java arrays.\n;; Instead you can convert them into sequences and compare them that way.\n;; (= (seq array1) (seq array2))\n"}],
   :id 5331,
   :name "=",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5331"},
  "clojure.contrib.string/get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1333,
   :name "get",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1333"},
  "swank.core/with-emacs-package"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3989,
   :name "with-emacs-package",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3989"},
  "clojure.core/range"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-23 02:16:21.0",
     :function "range",
     :version 10,
     :created_at "2010-07-14 19:22:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; default value of 'end' is infinity\nuser=> (range)\n(0 1 2 3 4 5 6 7 8 9 10 ... 12770 12771 12772 12773 ... n\n\n;; Since clojure 1.2:\nuser=> (take 10 (range))\n(0 1 2 3 4 5 6 7 8 9)\n\nuser=> (range 10)\n(0 1 2 3 4 5 6 7 8 9)\n\nuser=> (range -5 5)\n(-5 -4 -3 -2 -1 0 1 2 3 4)\n\nuser=> (range -100 100 10)\n(-100 -90 -80 -70 -60 -50 -40 -30 -20 -10 0 10 20 30 40 50 60 70 80 90)\n\nuser=> (range 0 4 2)\n(0 2)\n\nuser=> (range 0 5 2)\n(0 2 4)\n\nuser=> (range 0 6 2)\n(0 2 4)\n\nuser=> (range 0 7 2)\n(0 2 4 6)\n\nuser=> (range 100 0 -10)\n(100 90 80 70 60 50 40 30 20 10)\n\nuser=> (range 10 -10 -1)\n(10 9 8 7 6 5 4 3 2 1 0 -1 -2 -3 -4 -5 -6 -7 -8 -9)\n \n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:48:22.0",
     :function "range",
     :version 3,
     :created_at "2010-08-20 08:48:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Since clojure 1.2:\n\nuser=> (take 10 (range))\n(0 1 2 3 4 5 6 7 8 9)\n"}],
   :id 5692,
   :name "range",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5692"},
  "clojure.java.io/delete-file"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "file",
     :updated_at "2010-12-29 17:45:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/2140",
     :line "395",
     :arglists_comp "[arg]|[parent child]|[parent child & more]",
     :url_friendly_name "file",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 1,
     :name "copy",
     :updated_at "2011-05-27 06:39:27.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/2139",
     :line "368",
     :arglists_comp "[input output & opts]",
     :url_friendly_name "copy",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 104,
     :ns "clojure.java.io",
     :updated_at "2011-08-20 23:00:36.0",
     :function "delete-file",
     :version 1,
     :created_at "2011-08-20 23:00:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a file using spit, then show its contents using slurp\n;; delete it and verify that it has been deleted by trying to print its\n;; contents again\n\nuser=> (require '[clojure.java.io :as io])\nnil\nuser=> (spit \"stuff.txt\" \"blurp\")\nnil\nuser=> (println (slurp \"stuff.txt\"))\nblurp\nnil\nuser=> (io/delete-file \"stuff.txt\")\ntrue\nuser=> (println (slurp \"stuff.txt\"))\njava.io.FileNotFoundException: stuff.txt (The system cannot find the file specif\nied) (NO_SOURCE_FILE:0)\nuser=>"}],
   :id 5885,
   :name "delete-file",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5885"},
  "clojure.core/double"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:42:38.0",
     :function "double",
     :version 3,
     :created_at "2010-09-06 16:08:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (double 1)\n1.0"}],
   :id 5480,
   :name "double",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5480"},
  "clojure.core/memfn"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:22:58.0",
     :function "memfn",
     :version 4,
     :created_at "2010-07-15 17:50:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def *files* (file-seq (java.io.File. \"/tmp/\")))\n#'user/*files*\nuser=> (count (filter (memfn isDirectory) *files*))\n68\nuser=> (count (filter #(.isDirectory %) *files*))\n68\n"}],
   :id 5606,
   :name "memfn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5606"},
  "leiningen.deps/symlink"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3532,
   :name "symlink",
   :ns "leiningen.deps",
   :url "http://clojuredocs.org/v/3532"},
  "incanter.pdf/save-pdf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2988,
   :name "save-pdf",
   :ns "incanter.pdf",
   :url "http://clojuredocs.org/v/2988"},
  "clj-swing.list/seq-ref-list-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5209,
   :name "seq-ref-list-model",
   :ns "clj-swing.list",
   :url "http://clojuredocs.org/v/5209"},
  "incanter.stats/cdf-gamma"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3297,
   :name "cdf-gamma",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3297"},
  "swank.util.concurrent.mbox/clean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4320,
   :name "clean",
   :ns "swank.util.concurrent.mbox",
   :url "http://clojuredocs.org/v/4320"},
  "swank.core.threadmap/*thread-map-next-id*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4253,
   :name "*thread-map-next-id*",
   :ns "swank.core.threadmap",
   :url "http://clojuredocs.org/v/4253"},
  "clojure.core/*flush-on-newline*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5298,
   :name "*flush-on-newline*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5298"},
  "clojure.core/bit-and-not"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:42:59.0",
     :function "bit-and-not",
     :version 3,
     :created_at "2010-07-28 10:55:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-and-not 2r1100 2r1001) ; (and X (not Y))\n4\n;; 4 = 2r0100"}],
   :id 5381,
   :name "bit-and-not",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5381"},
  "clojure.pprint/*print-base*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5923,
   :name "*print-base*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5923"},
  "clojure.test.junit/finish-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6055,
   :name "finish-case",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6055"},
  "swank.core/exception-stacktrace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4026,
   :name "exception-stacktrace",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4026"},
  "midje.semi-sweet/only-mocked"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4342,
   :name "only-mocked",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4342"},
  "clojure.contrib.mock.test-adapter/once"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 744,
   :name "once",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/744"},
  "clj-swing.example/clj_swing.example.proxy$javax.swing.JPanel$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5182,
   :name "clj_swing.example.proxy$javax.swing.JPanel$0",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5182"},
  "incanter.processing/set-pixel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3153,
   :name "set-pixel",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3153"},
  "lancet/gunzip"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3440,
   :name "gunzip",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3440"},
  "clojure.contrib.command-line/make-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 43,
   :name "make-map",
   :ns "clojure.contrib.command-line",
   :url "http://clojuredocs.org/v/43"},
  "clojure.contrib.seq-utils/rec-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1171,
   :name "rec-seq",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1171"},
  "swank.commands.completion/potential-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4139,
   :name "potential-var",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4139"},
  "clojure.contrib.sql.internal/rollback"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1247,
   :name "rollback",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1247"},
  "incanter.stats/dice-coefficient"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3332,
   :name "dice-coefficient",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3332"},
  "clojure.contrib.test-is/test-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1382,
   :name "test-ns",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1382"},
  "clojure.core/init-proxy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5555,
   :name "init-proxy",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5555"},
  "clojure.contrib.pprint.utilities/ltrim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 947,
   :name "ltrim",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/947"},
  "circumspec.locator/ns-vars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3686,
   :name "ns-vars",
   :ns "circumspec.locator",
   :url "http://clojuredocs.org/v/3686"},
  "net.cgrand.enlive-html/html-content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3910,
   :name "html-content",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3910"},
  "swank.commands.basic/find-definitions-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4045,
   :name "find-definitions-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4045"},
  "clojure.core/defprotocol"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "reify",
     :updated_at "2011-09-10 09:57:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1991",
     :line "62",
     :arglists_comp "[& opts+specs]",
     :url_friendly_name "reify",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "extend-type",
     :updated_at "2011-09-10 10:01:01.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1821",
     :line "698",
     :arglists_comp "[t & specs]",
     :url_friendly_name "extend-type",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "extend-protocol",
     :updated_at "2011-02-24 05:19:01.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1960",
     :line "730",
     :arglists_comp "[p & specs]",
     :url_friendly_name "extend-protocol",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "extends?",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1714",
     :line "444",
     :arglists_comp "[protocol atype]",
     :url_friendly_name "extends_q",
     :file "clojure/core_deftype.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "satisfies?",
     :updated_at "2011-01-12 22:33:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2086",
     :line "457",
     :arglists_comp "[protocol x]",
     :url_friendly_name "satisfies_q",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-30 02:17:24.0",
     :function "defprotocol",
     :version 8,
     :created_at "2010-10-07 15:24:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defprotocol Fly\n  \"A simple protocol for flying\"\n  (fly [this] \"Method to fly\"))\n\n(defrecord Bird [name species]\n  Fly\n  (fly [this] (str (:name this) \" flies...\")))\n\n(extends? Fly Bird)\n-> true\n\n(def crow (Bird. \"Crow\" \"Corvus corax\"))\n\n(fly crow)\n-> \"Crow flies...\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2013-01-18 11:13:48.0",
     :function "defprotocol",
     :version 2,
     :created_at "2010-10-07 15:28:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; from Stuart Halloway's examples:\n\n(defprotocol Player\n  (choose [p])\n  (update-strategy [p me you]))\n\n(defrecord Stubborn [choice]\n  Player\n  (choose [_] choice)\n  (update-strategy [this _ _] this))\n\n(defrecord Mean [last-winner]\n  Player\n  (choose [_]\n          (if last-winner\n            last-winner\n            (random-choice)))\n  (update-strategy [_ me you]\n                   (->Mean (when (iwon? me you) me))))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-19 07:08:13.0",
     :function "defprotocol",
     :version 1,
     :created_at "2013-01-19 07:08:13.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; defprotocol does NOT support interfaces with variable argument lists, \n;; like [this & args]\n;; (this is not documented anywhere... )\n\n;; The workaround is to define the interface with the variable arg list in a fn\n;; separately outside of the protocol, which then calls the protocol interface\n;; with a slightly different name and an array in place of the variable list,\n;; like:\n\n(defprotocol MyProtocol\n  (-my-fn [this args]))\n\n(defn my-fn [this & args] (-my-fn this args))"}],
   :id 5456,
   :name "defprotocol",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5456"},
  "clojure.core/unchecked-float"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5807,
   :name "unchecked-float",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5807"},
  "swank.loader/file-last-modified"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4295,
   :name "file-last-modified",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4295"},
  "clojure.pprint/set-pprint-dispatch"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5944,
   :name "set-pprint-dispatch",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5944"},
  "clojure.core/cons"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "conj",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1696",
     :line "71",
     :arglists_comp "[coll x]|[coll x & xs]",
     :url_friendly_name "conj",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-27 13:27:42.0",
     :function "cons",
     :version 4,
     :created_at "2010-07-13 18:31:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (cons 1 '(2 3 4 5 6))\n(1 2 3 4 5 6)\n\nuser=> (cons [1 2] [4 5 6])\n([1 2] 4 5 6)"}],
   :id 5435,
   :name "cons",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5435"},
  "clojure.core/->"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 22:34:23.0",
     :user_id 106,
     :function "->",
     :version "1.2.0",
     :created_at "2010-07-26 22:34:23.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "See also <a href=\"http://clojuredocs.org/v/1660\">-&gt;&gt;</a> which is similar but threads the first expr as the <b>last</b> argument of the forms."}],
   :see-alsos
   [{:namespace_id 11,
     :weight 1,
     :name "-?>",
     :updated_at "2011-08-03 03:52:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/84",
     :line "30",
     :arglists_comp "[x form]|[x form & forms]",
     :url_friendly_name "-_q>",
     :file "clojure/contrib/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "->>",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1660",
     :line "1296",
     :arglists_comp "[x form]|[x form & more]",
     :url_friendly_name "->>",
     :file "clojure/core.clj"}
    {:namespace_id 11,
     :weight 0,
     :name "-?>>",
     :updated_at "2010-10-20 04:41:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/90",
     :line "46",
     :arglists_comp "[x form]|[x form & forms]",
     :url_friendly_name "-_q>>",
     :file "clojure/contrib/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-10 16:51:35.0",
     :function "->",
     :version 7,
     :created_at "2010-07-12 09:49:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Use of `->` (the \"thread-first\" macro) can help make code\n;; more readable by removing nesting. It can be especially\n;; useful when using host methods:\n\n;; Arguably a bit cumbersome to read:\nuser=> (first (.split (.replace (.toUpperCase \"a b c d\")\n                                \"A\"\n                                \"X\")\n                      \" \"))\n\"X\"\n\n;; Perhaps easier to read:\nuser=> (-> \"a b c d\" \n           .toUpperCase \n           (.replace \"A\" \"X\") \n           (.split \" \") \n           first)\n\"X\"\n\n;; It can also be useful for pulling values out of deeply-nested\n;; data structures:\nuser=> (def person \n            {:name \"Mark Volkmann\"\n             :address {:street \"644 Glen Summit\"\n                       :city \"St. Charles\"\n                       :state \"Missouri\"\n                       :zip 63304}\n             :employer {:name \"Object Computing, Inc.\"\n                        :address {:street \"12140 Woodcrest Dr.\"\n                                  :city \"Creve Coeur\"\n                                  :state \"Missouri\"\n                                  :zip 63141}}})\n \nuser=> (-> person :employer :address :city)\n\"Creve Coeur\"\n\n;; same as above, but with more nesting\nuser=> (((person :employer) :address) :city)\n\"Creve Coeur\"\n\n;; Note that this operator (along with ->>) has at times been\n;; referred to as a 'thrush' operator.\n\n;; From http://clojure-examples.appspot.com/clojure.core/-%3E\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-01-03 08:13:16.0",
     :function "->",
     :version 1,
     :created_at "2011-01-03 08:13:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Your own REPL! (Read Eval Print Loop)\n\n;; We would need a little helper macro for that\n;; It does what its name says - loops forever\nuser=> (defmacro loop-forever [& body] `(loop [] ~@body (recur)))\n\n;; Your own REPL\nuser=> (loop-forever (println (eval (read))))                                                                     \n(+ 1 2)\n3\n\n;; If you read the above code left to right (outside in) it reads LPER.\n;; Inside out it reads REPL alright.\n\n;; Sometimes it might be easier to read code outside in, just like a sequence of steps:\n;; 1. Read, 2. Eval, 3. Print, 4. Loop\n;; Here's how -> helps you:\n\nuser=> (-> (read) (eval) (println) (loop-forever))                                                                \n(+ 1 2)\n3\n\n;; Does that read easier for you? If it does, -> is your friend!\n\n;; To see what Clojure did behind the scenes with your -> expression:\nuser=> (require 'clojure.walk)\nnil\nuser=> (clojure.walk/macroexpand-all '(-> (read) (eval) (println) (loop-forever)))\n(loop* [] (println (eval (read))) (recur))\n\n;; You can even use ->'s cousin ->> to setup your own REPL:\nuser=> (->> (read) (eval) (println) (while true))\n(+ 1 2)\n3\n\n;; Can you see why we can't use -> to write the above?\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:05:10.0",
     :function "->",
     :version 4,
     :created_at "2012-06-09 06:40:04.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def c 5)\nuser=> (-> c (+ 3) (/ 2) (- 1))                          \n3\n\n;; and if you are curious why\nuser=> (use 'clojure.walk)\nuser=> (macroexpand-all '(-> c (+ 3) (/ 2) (- 1)))\n(- (/ (+ c 3) 2) 1)\n"}],
   :id 5319,
   :name "->",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5319"},
  "clojure.contrib.str-utils2/partition"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1287,
   :name "partition",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1287"},
  "incanter.datasets/**datasets**"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2930,
   :name "**datasets**",
   :ns "incanter.datasets",
   :url "http://clojuredocs.org/v/2930"},
  "clojure.contrib.datalog.magic/magic-transform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 237,
   :name "magic-transform",
   :ns "clojure.contrib.datalog.magic",
   :url "http://clojuredocs.org/v/237"},
  "clojure.reflect/do-reflect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5957,
   :name "do-reflect",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5957"},
  "clojure.contrib.str-utils2/swap-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1271,
   :name "swap-case",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1271"},
  "clojure.contrib.generic.math-functions/sgn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 412,
   :name "sgn",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/412"},
  "clojure.walk/prewalk-replace"
  {:comments [],
   :see-alsos
   [{:namespace_id 118,
     :weight 0,
     :name "postwalk-replace",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2559",
     :line "119",
     :arglists_comp "[smap form]",
     :url_friendly_name "postwalk-replace",
     :file "clojure/walk.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "replace",
     :updated_at "2011-05-10 18:46:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1831",
     :line "3979",
     :arglists_comp "[smap coll]",
     :url_friendly_name "replace",
     :file "clojure/core.clj"}
    {:namespace_id 118,
     :weight 0,
     :name "prewalk",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2557",
     :line "62",
     :arglists_comp "[f form]",
     :url_friendly_name "prewalk",
     :file "clojure/walk.clj"}],
   :examples
   [{:namespace_id 118,
     :ns "clojure.walk",
     :updated_at "2012-03-28 09:43:25.0",
     :function "prewalk-replace",
     :version 3,
     :created_at "2010-08-11 14:54:11.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.walk/prewalk-replace '{a b} '(c (d a)))\n(c (d b))"}],
   :id 6081,
   :name "prewalk-replace",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6081"},
  "clojure.contrib.core/seqable?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1778",
     :line "114",
     :arglists_comp "[coll]",
     :url_friendly_name "seq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "seq?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1664",
     :line "131",
     :arglists_comp "[x]",
     :url_friendly_name "seq_q",
     :file "clojure/core.clj"}],
   :examples [],
   :id 87,
   :name "seqable?",
   :ns "clojure.contrib.core",
   :url "http://clojuredocs.org/v/87"},
  "clojure.contrib.generic.arithmetic/zero"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 387,
   :name "zero",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/387"},
  "clojure.core/constantly"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-01 01:48:58.0",
     :user_id 226,
     :function "constantly",
     :version "1.2.0",
     :created_at "2010-12-01 01:48:58.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "any examples of when this would be useful? I think it is weird to want a function that always returns \"x\" regardless of the number of arguments passed to it - however since this exists in core I'm sure it is sensible, more a case of I've not enough experience to appreciate its value."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-13 22:51:33.0",
     :user_id 233,
     :function "constantly",
     :version "1.2.0",
     :created_at "2010-12-13 22:49:41.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "I asked about use cases for this function in #clojure and got a good response from amalloy:\n\nSay you want to call a library function that asks you to pass it a function; it's going to call that function ten times with different arguments to decide how to populate a list it gives you.  But your program is really simple and you want the list to just be full of zeroes.  So you call:\n\n    (libfn (constantly 0))\n\nHope that's useful!"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-27 06:23:42.0",
     :user_id 117,
     :function "constantly",
     :version "1.2.0",
     :created_at "2011-05-27 06:23:42.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "(constantly 1) is often useful when it comes to testing. You can think of it like you would a \"stub\"."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "repeatedly",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2069",
     :line "4058",
     :arglists_comp "[f]|[n f]",
     :url_friendly_name "repeatedly",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:47:50.0",
     :function "constantly",
     :version 3,
     :created_at "2010-08-20 09:06:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def boring (constantly 10))\n#'user/boring\n\nuser=> (boring 1 2 3)\n10\nuser=> (boring)\n10\nuser=> (boring \"Is anybody home?\")\n10\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-16 14:10:42.0",
     :function "constantly",
     :version 1,
     :created_at "2011-07-16 14:10:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; A really goofy way to find the size of a collection\nuser=> (reduce + (map (constantly 1) [:a :b :c]))\n3"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-19 02:05:53.0",
     :function "constantly",
     :version 3,
     :created_at "2012-07-19 11:26:08.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; constantly returns a function which always returns the same value\n(map (constantly 9) [1 2 3])\nuser=> (9 9 9)\n\n(map (constantly (rand-int 100)) [:a :b :c])\nuser=> (43 43 43)"}],
   :id 5436,
   :name "constantly",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5436"},
  "clojure.core/monitor-exit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6133,
   :name "monitor-exit",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6133"},
  "clojure.contrib.datalog.literals/conditional-symbol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 226,
   :name "conditional-symbol",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/226"},
  "circumspec.contrib-mocking/times"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3638,
   :name "times",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3638"},
  "incanter.optimize/integrate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2981,
   :name "integrate",
   :ns "incanter.optimize",
   :url "http://clojuredocs.org/v/2981"},
  "net.cgrand.enlive-html/at*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3909,
   :name "at*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3909"},
  "clojure.contrib.generic.arithmetic/one"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 390,
   :name "one",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/390"},
  "clojure.contrib.jmx/as-object-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 572,
   :name "as-object-name",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/572"},
  "clojure.repl/dir"
  {:comments [],
   :see-alsos
   [{:namespace_id 342,
     :weight 1,
     :name "doc",
     :updated_at "2012-07-18 12:19:24.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:15:14.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5970",
     :line "120",
     :arglists_comp "[name]",
     :url_friendly_name "doc",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "source",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/2445",
     :line "43",
     :arglists_comp "[n]",
     :url_friendly_name "source",
     :file "clojure/repl.clj"}
    {:namespace_id 110,
     :weight 1,
     :name "apropos",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/2446",
     :line "52",
     :arglists_comp "[str-or-pattern]",
     :url_friendly_name "apropos",
     :file "clojure/repl.clj"}],
   :examples
   [{:namespace_id 110,
     :ns "clojure.repl",
     :updated_at "2012-03-28 09:43:55.0",
     :function "dir",
     :version 3,
     :created_at "2010-09-08 13:25:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (require 'clojure.string 'clojure.repl)\n\nuser=> (clojure.repl/dir clojure.string)\nblank?\ncapitalize\nescape\njoin\nlower-case\nreplace\nreplace-first\nreverse\nsplit\nsplit-lines\ntrim\ntrim-newline\ntriml\ntrimr\nupper-case"}],
   :id 5968,
   :name "dir",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5968"},
  "clojure.contrib.jmx/mbean-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 559,
   :name "mbean-info",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/559"},
  "clojure.core/all-ns"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:44:23.0",
     :function "all-ns",
     :version 3,
     :created_at "2010-08-10 10:16:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (all-ns)\n(#<Namespace clojure.set> #<Namespace clojure.pprint> #<Namespace cake.contrib.server-socket> #<Namespace user> #<Namespace clojure.main> #<Namespace useful.io> #<Namespace clojure.core> #<Namespace clojure.java.shell> #<Namespace cake.tasks.help> #<Namespace clojure.zip> #<Namespace clojure.java.browse> #<Namespace clojure.repl> #<Namespace cake.tasks.new> #<Namespace cake.server> #<Namespace cake.ant> #<Namespace cake.contrib.find-namespaces> #<Namespace clojure.java.io> #<Namespace clojure.stacktrace> #<Namespace clojure.core.protocols> #<Namespace cake.project> #<Namespace clojure.xml> #<Namespace clojure.java.javadoc> #<Namespace useful> #<Namespace complete> #<Namespace cake>)"}],
   :id 5346,
   :name "all-ns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5346"},
  "swank.util.io/read-chars"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4265,
   :name "read-chars",
   :ns "swank.util.io",
   :url "http://clojuredocs.org/v/4265"},
  "clojure.contrib.pprint/formatter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 824,
   :name "formatter",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/824"},
  "lancet/env"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3481,
   :name "env",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3481"},
  "clojure.core/aset-double"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "double-array",
     :updated_at "2011-08-20 23:07:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/1738",
     :line "4176",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "double-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:17:44.0",
     :function "aset-double",
     :version 1,
     :created_at "2011-08-21 01:17:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 doubles and set one of the elements to 3.1415\n\nuser=> (def ds (double-array 10))\n#'user/ds\nuser=> (vec ds)\n[0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]\nuser=> (aset-double ds 3 3.1415)\n3.1415\nuser=> (vec ds)\n[0.0 0.0 0.0 3.1415 0.0 0.0 0.0 0.0 0.0 0.0]\nuser=>"}],
   :id 5360,
   :name "aset-double",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5360"},
  "clojure.contrib.graph/fixed-point"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 432,
   :name "fixed-point",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/432"},
  "net.cgrand.enlive-html/emit*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3884,
   :name "emit*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3884"},
  "leiningen.deps/copy-dependencies"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3536,
   :name "copy-dependencies",
   :ns "leiningen.deps",
   :url "http://clojuredocs.org/v/3536"},
  "incanter.stats/cdf-normal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2760,
   :name "cdf-normal",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2760"},
  "clj-swing.tree/node"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5216,
   :name "node",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5216"},
  "clojure.contrib.jmx/build-attribute-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 553,
   :name "build-attribute-info",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/553"},
  "swank.core/build-debugger-info-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4114,
   :name "build-debugger-info-for-emacs",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4114"},
  "clojure.pprint/write"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5947,
   :name "write",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5947"},
  "incanter.processing/IMAGE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3159,
   :name "IMAGE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3159"},
  "clojure.core/*source-path*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5310,
   :name "*source-path*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5310"},
  "clojure.xml/content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6089,
   :name "content",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6089"},
  "circumspec.for-all/digit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3662,
   :name "digit",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3662"},
  "net.cgrand.enlive-html/rights"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3912,
   :name "rights",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3912"},
  "clojure.contrib.monads/m-lift"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 810,
   :name "m-lift",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/810"},
  "clojure.contrib.json/read-json"
  {:comments
   [{:namespace_id 48,
     :ns "clojure.contrib.json",
     :updated_at "2010-07-18 11:14:17.0",
     :user_id 46,
     :function "read-json",
     :version "1.2.0",
     :created_at "2010-07-18 11:14:17.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "The read-json function has undergone a transformation between 1.1 and 1.2 beta1.\n\nThe function has moved from clojure.contrib.json.read to clojure.contrib.json.\n\nThe function also has a different default behavior in 1.2 beta1 compared to 1.1.\n\n<pre>\nClojure 1.1.0\nuser=> (use 'clojure.contrib.json.read)\nnil\nuser=> (read-json \"{\\\"name\\\": \\\"Steven\\\"}\")\n{\"name\" \"Steven\"}\nuser=> (get *1 \"name\")\n\"Steven\"\nuser=>\n</pre>\n\n<pre>\nClojure 1.2.0-beta1\nuser=> (use 'clojure.contrib.json)\nnil\nuser=> (read-json \"{\\\"name\\\": \\\"Steven\\\"}\")\n{:name \"Steven\"}\nuser=> (get *1 \"name\")\nnil\nuser=>\n</pre>\n\nTo get 1.1 behavior in 1.2 beta1 you have to pass false as second argument (keywordize?):\n\n<pre>\nClojure 1.2.0-beta1\nuser=> (use 'clojure.contrib.json)\nnil\nuser=> (read-json \"{\\\"name\\\": \\\"Steven\\\"}\" false)\n{\"name\" \"Steven\"}\nuser=> (get *1 \"name\")\n\"Steven\"\nuser=>\n</pre>\n"}],
   :see-alsos
   [{:namespace_id 48,
     :weight 0,
     :name "read-json-from",
     :updated_at "2010-10-20 04:41:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:53:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/597",
     :line nil,
     :arglists_comp "[input keywordize? eof-error? eof-value]",
     :url_friendly_name "read-json-from",
     :file nil}],
   :examples
   [{:namespace_id 48,
     :ns "clojure.contrib.json",
     :updated_at "2010-10-26 19:04:31.0",
     :function "read-json",
     :version 2,
     :created_at "2010-10-06 19:37:27.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(use 'clojure.contrib.json)\n(import 'java.io.FileReader)\n(clojure.contrib.json/read-json (FileReader. \"somedata.json\"))"}
    {:namespace_id 48,
     :ns "clojure.contrib.json",
     :updated_at "2010-10-26 19:06:17.0",
     :function "read-json",
     :version 2,
     :created_at "2010-10-26 19:05:47.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";;Clojure 1.2 and newer (see below)\n;;Note that the read is done into a Clojure data structure\nuser=> (read-json \"{\\\"name\\\": \\\"Steven\\\"}\")\n{:name \"Steven\"}\nuser=> (class (read-json \"{\\\"name\\\": \\\"Steven\\\"}\"))\nclojure.lang.PersistentArrayMap"}],
   :id 603,
   :name "read-json",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/603"},
  "clojure.contrib.test-is/get-possibly-unbound-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1373,
   :name "get-possibly-unbound-var",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1373"},
  "clojure.core/chars"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "char-array",
     :updated_at "2010-12-29 18:12:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1563",
     :line "4160",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "char-array",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5408,
   :name "chars",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5408"},
  "clojure.contrib.datalog.literals/magic-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 222,
   :name "magic-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/222"},
  "swank.util.class-browse/swank.util.class_browse.proxy$java.lang.Object$FilenameFilter$d73a157b"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4156,
   :name
   "swank.util.class_browse.proxy$java.lang.Object$FilenameFilter$d73a157b",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4156"},
  "clojure.contrib.base64/encode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 37,
   :name "encode",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/37"},
  "incanter.stats/cumulative-mean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2800,
   :name "cumulative-mean",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2800"},
  "circumspec.test/testing"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3728,
   :name "testing",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3728"},
  "net.licenser.sandbox.tester/fn-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5140,
   :name "fn-seq",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5140"},
  "clojure.core/counted?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-07 20:33:38.0",
     :function "counted?",
     :version 1,
     :created_at "2010-10-07 20:33:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (counted? [:a :b :c])\ntrue\n\nuser=> (counted? '(:a :b :c))\ntrue\n\nuser=> (counted? {:a 1 :b 2 :c 3})\ntrue\n\nuser=> (counted? #{:a :b :c})\ntrue\n\nuser=> (counted? \"asdf\")\nfalse\n\nuser=> (counted? (into-array Integer/TYPE [1 2 3]))\nfalse"}],
   :id 5440,
   :name "counted?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5440"},
  "clojure.contrib.datalog.util/reverse-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 190,
   :name "reverse-map",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/190"},
  "swank.commands.inspector/label-value-line*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4239,
   :name "label-value-line*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4239"},
  "circumspec.for-all/unicode-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3677,
   :name "unicode-string",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3677"},
  "clojure.contrib.pprint/pprint-newline"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1030,
   :name "pprint-newline",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1030"},
  "clojure.contrib.profile/*profile-data*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1116,
   :name "*profile-data*",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1116"},
  "leiningen.core/-main"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3529,
   :name "-main",
   :ns "leiningen.core",
   :url "http://clojuredocs.org/v/3529"},
  "clojure.core/atom"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "reset!",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1925",
     :line "1802",
     :arglists_comp "[atom newval]",
     :url_friendly_name "reset!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "swap!",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1988",
     :line "1784",
     :arglists_comp
     "[atom f]|[atom f x]|[atom f x y]|[atom f x y & args]",
     :url_friendly_name "swap!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "compare-and-set!",
     :updated_at "2011-06-20 21:12:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2066",
     :line "1795",
     :arglists_comp "[atom oldval newval]",
     :url_friendly_name "compare-and-set!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "add-watch",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1539",
     :line "1613",
     :arglists_comp "[reference key fn]",
     :url_friendly_name "add-watch",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "remove-watch",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1715",
     :line "1631",
     :arglists_comp "[reference key]",
     :url_friendly_name "remove-watch",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:54:49.0",
     :function "atom",
     :version 4,
     :created_at "2010-08-10 10:22:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def my-atom (atom 0))\n#'user/my-atom\n\nuser=> @my-atom\n0\n\nuser=> (swap! my-atom inc)\n1\n\nuser=> @my-atom\n1\n\nuser=> (swap! my-atom (fn [n] (* (+ n n) 2)))\n4"}],
   :id 5370,
   :name "atom",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5370"},
  "clojure.core/unchecked-short"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5817,
   :name "unchecked-short",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5817"},
  "swank.core.threadmap/thread-map-id"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4248,
   :name "thread-map-id",
   :ns "swank.core.threadmap",
   :url "http://clojuredocs.org/v/4248"},
  "incanter.processing/texture"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3030,
   :name "texture",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3030"},
  "swank.swank/start-server"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4317,
   :name "start-server",
   :ns "swank.swank",
   :url "http://clojuredocs.org/v/4317"},
  "clojure.contrib.pprint/*print-pprint-dispatch*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 887,
   :name "*print-pprint-dispatch*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/887"},
  "circumspec.utils/resolve!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3632,
   :name "resolve!",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3632"},
  "clojure.contrib.jmx/simplify-tabular-data-key"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 569,
   :name "simplify-tabular-data-key",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/569"},
  "clojure.main/demunge"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 339,
     :ns "clojure.main",
     :updated_at "2011-12-27 19:01:04.0",
     :function "demunge",
     :version 1,
     :created_at "2011-12-27 19:01:04.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.main)\n\n(demunge \"clojure.core$println\")\n=>\"clojure.core/println\""}],
   :id 5910,
   :name "demunge",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5910"},
  "swank.commands.contrib.swank-c-p-c.internal/delimited-compound-prefix-match-acronym?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4165,
   :name "delimited-compound-prefix-match-acronym?",
   :ns "swank.commands.contrib.swank-c-p-c.internal",
   :url "http://clojuredocs.org/v/4165"},
  "clojure.contrib.except/throwf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 116,
   :name "throwf",
   :ns "clojure.contrib.except",
   :url "http://clojuredocs.org/v/116"},
  "clojure.core/chunk-cons"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5412,
   :name "chunk-cons",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5412"},
  "swank.core.connection/*default-encoding*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4194,
   :name "*default-encoding*",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4194"},
  "incanter.distributions/support"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2933,
   :name "support",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2933"},
  "clojure.zip/children"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6099,
   :name "children",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6099"},
  "lancet/ant-sync"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3423,
   :name "ant-sync",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3423"},
  "clj-ssh.ssh/with-default-identity"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1458,
   :name "with-default-identity",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1458"},
  "clojure.core/reset-meta!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5729,
   :name "reset-meta!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5729"},
  "clojure.core/>"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "=",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1885",
     :line "653",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "not=",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1530",
     :line "671",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "not=",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "<",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1860",
     :line "751",
     :arglists_comp "[x]|[x y]|[x y & more]",
     :url_friendly_name "<",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-27 09:09:59.0",
     :function ">",
     :version 4,
     :created_at "2010-07-28 06:00:39.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (> 1 2)\nfalse\nuser=> (> 2 1)\ntrue\nuser=> (> 2 2)\nfalse\nuser=> (> 6 5 4 3 2)\ntrue\nuser=> (sort > (vals {:foo 5, :bar 2, :baz 10}))\n(10 5 2)"}],
   :id 5333,
   :name ">",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5333"},
  "clojure.core/prefer-method"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "prefers",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1836",
     :line "1388",
     :arglists_comp "[multifn]",
     :url_friendly_name "prefers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5666,
   :name "prefer-method",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5666"},
  "clojure.contrib.repl-utils/source"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 333,
   :name "source",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/333"},
  "clojure.core/bit-test"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 09:45:29.0",
     :function "bit-test",
     :version 4,
     :created_at "2010-07-28 10:36:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (bit-test 2r1001 0)\ntrue \n\nuser=> (bit-test 2r1001 1)\nfalse \n\nuser=> (bit-test 2r1001 7)\nfalse"}],
   :id 5389,
   :name "bit-test",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5389"},
  "clojure.set/union"
  {:comments [],
   :see-alsos
   [{:namespace_id 111,
     :weight 1,
     :name "intersection",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2457",
     :line "32",
     :arglists_comp "[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "intersection",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 2,
     :name "difference",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/2460",
     :line "48",
     :arglists_comp "[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "difference",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 0,
     :name "superset?",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2454",
     :line "150",
     :arglists_comp "[set1 set2]",
     :url_friendly_name "superset_q",
     :file "clojure/set.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-09-26 05:06:36.0",
     :function "union",
     :version 3,
     :created_at "2010-07-12 21:21:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (union)\n#{}\nuser=> (union #{1 2})\n#{1 2}\nuser=> (union #{1 2} #{2 3})\n#{1 2 3}\nuser=> (union #{1 2} #{2 3} #{3 4})\n#{1 2 3 4}\n"}],
   :id 5990,
   :name "union",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5990"},
  "incanter.stats/correlation-ratio"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3357,
   :name "correlation-ratio",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3357"},
  "clojure.contrib.seq-utils/seq-on"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1179,
   :name "seq-on",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1179"},
  "clojure.contrib.datalog.util/trace-datalog"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 203,
   :name "trace-datalog",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/203"},
  "swank.loader/compile-swank"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4291,
   :name "compile-swank",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4291"},
  "clojure.contrib.combinatorics/selections"
  {:comments
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2012-12-11 22:58:18.0",
     :user_id 735,
     :function "selections",
     :version "1.2.0",
     :created_at "2012-12-11 22:58:18.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "This is also useful for getting non-unique permutations. The standard permutations function will not repeat elements, but this will. This comes in handy for certain situations. "}],
   :see-alsos [],
   :examples
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2011-01-09 23:22:04.0",
     :function "selections",
     :version 1,
     :created_at "2011-01-09 23:22:04.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "Clojure=> (selections [1 2 3] 1)\n((1) (2) (3))\nClojure=> (selections [1 2 3] 2)\n((1 1) (1 2) (1 3) (2 1) (2 2) (2 3) (3 1) (3 2) (3 3))\nClojure=> (selections [1 1 2] 2)\n((1 1) (1 1) (1 2) (1 1) (1 1) (1 2) (2 1) (2 1) (2 2))\n"}],
   :id 5257,
   :name "selections",
   :ns "clojure.contrib.combinatorics",
   :url "http://clojuredocs.org/v/5257"},
  "incanter.processing/SUBTRACT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3084,
   :name "SUBTRACT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3084"},
  "incanter.processing/minute"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3083,
   :name "minute",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3083"},
  "circumspec.watch/find-recent-namespaces-in-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3769,
   :name "find-recent-namespaces-in-dir",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3769"},
  "incanter.core/identity-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2739,
   :name "identity-matrix",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2739"},
  "clj-ssh.ssh/ssh-agent?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1481,
   :name "ssh-agent?",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1481"},
  "clj-swing.document/str-remove"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5174,
   :name "str-remove",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5174"},
  "clojure.xml/tag"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6096,
   :name "tag",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6096"},
  "swank.core.connection/encoding-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4200,
   :name "encoding-map",
   :ns "swank.core.connection",
   :url "http://clojuredocs.org/v/4200"},
  "clojure.contrib.repl-utils/add-remote-javadoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 349,
   :name "add-remote-javadoc",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/349"},
  "lancet/loadfile"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3452,
   :name "loadfile",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3452"},
  "clojure.core/definline"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-05 16:25:34.0",
     :user_id 627,
     :function "definline",
     :version "1.3.0",
     :created_at "2012-12-05 16:25:34.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Note that, as for macros, the arguments to definline are potentially subject to double evaluation if they are used more than once in the body. For example:\n\n<pre>\nuser=> (definline bad-sqr [x] `(* ~x ~x))\n#'user/bad-sqr\nuser=> (bad-sqr (do (println \"x\") 5))\nx\nx\n25\n</pre>\n\n"}],
   :see-alsos [],
   :examples [],
   :id 5448,
   :name "definline",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5448"},
  "clojure.core/print-simple"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5673,
   :name "print-simple",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5673"},
  "leiningen.compile/get-os"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3519,
   :name "get-os",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3519"},
  "incanter.processing/incanter.processing.proxy$java.awt.event.WindowAdapter$0"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3082,
   :name "incanter.processing.proxy$java.awt.event.WindowAdapter$0",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3082"},
  "clojure.string/split-lines"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 2,
     :name "split",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2471",
     :line "169",
     :arglists_comp "[s re]|[s re limit]",
     :url_friendly_name "split",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2012-03-28 09:45:56.0",
     :function "split-lines",
     :version 3,
     :created_at "2010-08-12 05:49:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (clojure.string/split-lines \"test \\n string\")\n[\"test \" \" string\"]"}],
   :id 6006,
   :name "split-lines",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6006"},
  "incanter.excel/read-xls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2953,
   :name "read-xls",
   :ns "incanter.excel",
   :url "http://clojuredocs.org/v/2953"},
  "clojure.contrib.string/butlast"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "butlast",
     :updated_at "2010-11-06 03:20:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1658",
     :line "232",
     :arglists_comp "[coll]",
     :url_friendly_name "butlast",
     :file "clojure/core.clj"}
    {:namespace_id 86,
     :weight 0,
     :name "butlast",
     :updated_at "2010-10-20 04:41:58.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:59:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1268",
     :line "131",
     :arglists_comp "[s n]",
     :url_friendly_name "butlast",
     :file "clojure/contrib/str_utils2.clj"}],
   :examples [],
   :id 1319,
   :name "butlast",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1319"},
  "lancet/pathconvert"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3482,
   :name "pathconvert",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3482"},
  "clojure.test/testing-contexts-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6044,
   :name "testing-contexts-str",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6044"},
  "clojure.contrib.str-utils2/title-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1294,
   :name "title-case",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1294"},
  "clojure.core/empty?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1778",
     :line "114",
     :arglists_comp "[coll]",
     :url_friendly_name "seq",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-13 19:16:29.0",
     :function "empty?",
     :version 2,
     :created_at "2010-07-13 19:16:29.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (empty? ())\r\ntrue\r\nuser=> (empty? '(1))\r\nfalse</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-10-14 20:32:52.0",
     :function "empty?",
     :version 4,
     :created_at "2010-07-17 10:16:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (every? empty? [\"\" [] () '() {} #{} nil])\ntrue\n\n;example of recommended idiom for testing if not empty\nuser=> (every? seq [\"1\" [1] '(1) {:1 1} #{1}])\ntrue"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 21:33:56.0",
     :function "empty?",
     :version 2,
     :created_at "2010-07-26 21:33:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (drop-while empty? [\"\" [] \"foobar\"])\r\n(\"foobar\")\r\n</pre>"}],
   :id 5487,
   :name "empty?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5487"},
  "clojure.core/reset!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "swap!",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1988",
     :line "1784",
     :arglists_comp
     "[atom f]|[atom f x]|[atom f x y]|[atom f x y & args]",
     :url_friendly_name "swap!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-08-14 23:42:30.0",
     :function "reset!",
     :version 6,
     :created_at "2010-08-14 22:31:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (def x (atom 10))\r\n#'user/x\r\n\r\nuser=&gt; @x\r\n10\r\n\r\nuser=&gt; (reset! x 20)\r\n20\r\n\r\nuser=&gt; @x\r\n20\r\n</pre>"}],
   :id 5728,
   :name "reset!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5728"},
  "clojure.core/partition-all"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "partition",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1972",
     :line "2354",
     :arglists_comp "[n coll]|[n step coll]|[n step pad coll]",
     :url_friendly_name "partition",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "partition-by",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1603",
     :line "5554",
     :arglists_comp "[f coll]",
     :url_friendly_name "partition-by",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:42:47.0",
     :function "partition-all",
     :version 3,
     :created_at "2010-07-20 09:38:03.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (partition 4 [0 1 2 3 4 5 6 7 8 9])\n((0 1 2 3) (4 5 6 7))\n\nuser=> (partition-all 4 [0 1 2 3 4 5 6 7 8 9])\n((0 1 2 3) (4 5 6 7) (8 9))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-07 06:38:47.0",
     :function "partition-all",
     :version 1,
     :created_at "2012-10-07 06:38:47.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (partition-all 2 4 [0 1 2 3 4 5 6 7 8 9])\n((0 1) (4 5) (8 9))"}],
   :id 5654,
   :name "partition-all",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5654"},
  "clojure.stacktrace/print-throwable"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5994,
   :name "print-throwable",
   :ns "clojure.stacktrace",
   :url "http://clojuredocs.org/v/5994"},
  "fogus.me.trammel/with-constraints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5037,
   :name "with-constraints",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5037"},
  "net.cgrand.enlive-html/select-fragments*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3901,
   :name "select-fragments*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3901"},
  "clojure.core/inc"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-20 01:57:53.0",
     :user_id 385,
     :function "inc",
     :version "1.2.0",
     :created_at "2011-09-20 01:57:53.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Is the documentation suppose to be: \"Returns a number one greater than x.\" ?  If not what is num?"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "dec",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/2014",
     :line "928",
     :arglists_comp "[x]",
     :url_friendly_name "dec",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-24 10:25:05.0",
     :function "inc",
     :version 2,
     :created_at "2010-07-24 10:25:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (inc 1)\r\n2\r\n\r\nuser=> (inc 1.0)\r\n2.0\r\n\r\nuser=> (inc 1/2)\r\n3/2\r\n\r\nuser=> (inc -1)\r\n0\r\n</pre>"}],
   :id 5553,
   :name "inc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5553"},
  "circumspec/should"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3599,
   :name "should",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3599"},
  "incanter.processing/create-input-raw"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3079,
   :name "create-input-raw",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3079"},
  "clojure.contrib.sql.internal/with-connection*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1255,
   :name "with-connection*",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1255"},
  "incanter.core/sqrt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2847,
   :name "sqrt",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2847"},
  "incanter.core/to-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2741,
   :name "to-list",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2741"},
  "clojure.test/assert-any"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6022,
   :name "assert-any",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6022"},
  "incanter.processing/char->text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3135,
   :name "char->text",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3135"},
  "clojure.contrib.datalog.rules/make-rules-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 184,
   :name "make-rules-set",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/184"},
  "clojure.core/bit-shift-left"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-28 10:50:01.0",
     :function "bit-shift-left",
     :version 2,
     :created_at "2010-07-28 10:50:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (bit-shift-left 2r1101 2) ; fill rightmost bits with 0s\r\n52 \r\n;; 52 = 2r110100\r\n</pre>\r\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-13 04:21:02.0",
     :function "bit-shift-left",
     :version 2,
     :created_at "2012-04-13 04:18:46.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;a bogus bit-array implementation\n\n(def ba (atom (long 0)))\n\n(defn set-ba \n\"sets bit n in long atom ba\"\n  [n]\n  (let [number-set (bit-shift-left 1 n)\n\t_ (println \"number to set: \" number-set)\n\tnew-array (bit-or @ba number-set)]\n    (reset! ba new-array)))\n\n(defn get-ba \n\"gets bit n in long atom ba\"\n[n]\n  (not (zero? (bit-and (bit-shift-left 1 n) @ba))))\n\n(comment\n  (set-ba 0) ;; 0 [....0001]\n  (set-ba 3) ;; 2^3 = 8  [....1001]\n  (get-ba 0) ;; (bit-and ba 2^0) = 1\n  (get-ba 1) ;; (bit-and ba 2^1) = 0\n  (get-ba 3) ;; (bit-and ba 2^3) = 1\n  ;;but:\n  (set-ba 65) ;; [....1011]\n  ;;number to set:  2\n  ;;modulo because long has only 64 bit\n  ;;also note that long always is two-complemented (signed) in java implementation\n  )"}],
   :id 5387,
   :name "bit-shift-left",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5387"},
  "ring.handler.dump/ring-keys"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2629,
   :name "ring-keys",
   :ns "ring.handler.dump",
   :url "http://clojuredocs.org/v/2629"},
  "clojure.test/compose-fixtures"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6025,
   :name "compose-fixtures",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6025"},
  "swank.commands.contrib.swank-fuzzy/*fuzzy-completion-symbol-prefixes*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4170,
   :name "*fuzzy-completion-symbol-prefixes*",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4170"},
  "clojure.contrib.monads/domonad"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 767,
   :name "domonad",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/767"},
  "clojure.contrib.except/throw-arg"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 297,
   :name "throw-arg",
   :ns "clojure.contrib.except",
   :url "http://clojuredocs.org/v/297"},
  "incanter.processing/load-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3140,
   :name "load-image",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3140"},
  "clojure.contrib.complex-numbers/imaginary"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 50,
   :name "imaginary",
   :ns "clojure.contrib.complex-numbers",
   :url "http://clojuredocs.org/v/50"},
  "net.cgrand.enlive-html/defsnippet"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 198,
     :ns "net.cgrand.enlive-html",
     :updated_at "2012-05-28 20:05:24.0",
     :function "defsnippet",
     :version 3,
     :created_at "2012-05-28 17:45:52.0",
     :library "enlive",
     :lib_version "1.0.0-SNAPSHOT",
     :library_id 8,
     :body
     ";; snippet1.html\n;; <h1>Welcome <span id=\"name\">Rich</span></h1>\n\n(defsnippet snippet1\n   \"snippet1.html\"\n   [[:h1]]\n   [name]\n   [:#name] (content name))\n\n;; template1.html\n;; <html><body><div id=\"snippetinsert\"/></body></html>\n(deftemplate template1\n   \"template1.html\"\n   [name]\n   [:#snippetinsert] (content (snippet1 name)))\n\n(template1 \"Steven\")"}],
   :id 3881,
   :name "defsnippet",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3881"},
  "ring.middleware.lint/wrap-lint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2673,
   :name "wrap-lint",
   :ns "ring.middleware.lint",
   :url "http://clojuredocs.org/v/2673"},
  "incanter.processing/JAVA2D"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3016,
   :name "JAVA2D",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3016"},
  "circumspec.story/when"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3757,
   :name "when",
   :ns "circumspec.story",
   :url "http://clojuredocs.org/v/3757"},
  "incanter.processing/PERSPECTIVE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3152,
   :name "PERSPECTIVE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3152"},
  "clj-swing.core/drop-nth"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5171,
   :name "drop-nth",
   :ns "clj-swing.core",
   :url "http://clojuredocs.org/v/5171"},
  "lancet/java"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3401,
   :name "java",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3401"},
  "clojure.contrib.datalog.literals/build-literal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 231,
   :name "build-literal",
   :ns "clojure.contrib.datalog.literals",
   :url "http://clojuredocs.org/v/231"},
  "clojure.contrib.pprint/formatter-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 585,
   :name "formatter-out",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/585"},
  "leiningen.jar/write-jar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3555,
   :name "write-jar",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3555"},
  "net.cgrand.enlive-html/transform-content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3849,
   :name "transform-content",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3849"},
  "clojure.test.junit/*var-context*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6051,
   :name "*var-context*",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6051"},
  "clojure.contrib.pprint/pprint-tab"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1037,
   :name "pprint-tab",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1037"},
  "clojure.core/test"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "var",
     :updated_at "2010-11-08 02:40:48.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5272",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "var",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "meta",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:21.0",
     :added nil,
     :url "http://clojuredocs.org/v/2110",
     :line "178",
     :arglists_comp "[obj]",
     :url_friendly_name "meta",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "assert",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1733",
     :line "3726",
     :arglists_comp "[x]",
     :url_friendly_name "assert",
     :file "clojure/core.clj"}
    {:namespace_id 115,
     :weight 1,
     :name "with-test",
     :updated_at "2010-11-08 23:24:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/2523",
     :line "580",
     :arglists_comp "[definition & body]",
     :url_friendly_name "with-test",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 23:05:29.0",
     :function "test",
     :version 2,
     :created_at "2010-11-08 23:04:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defn my-function\n  \"this function adds two numbers\"\n  {:test #(do\n            (assert (= (my-function 2 3) 5))\n            (assert (= (my-function 4 4) 8)))}\n  ([x y] (+ x y)))\n\n(test #'my-function)  ;equal to (test (var my-function))\n=> :ok\n\n-----------------------------------------------------------------------\n\n(defn my-function\n  \"this function adds two numbers\"\n  {:test #(do\n            (assert (= (my-function 2 3) 5))\n            (assert (= (my-function 99 4) 8)))}\n  ([x y] (+ x y)))\n\n(test #'my-function)\n=> java.lang.AssertionError: Assert failed: (= (my-function 99 4) 8) (NO_SOURCE_FILE:0\n\n---------------------------------------------------------------------------\n\n(defn my-function\n  \"this function adds two numbers\"\n  ([x y] (+ x y)))\n\n(test #'my-function)\n=> :no-test"}],
   :id 5788,
   :name "test",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5788"},
  "incanter.processing/create-graphics"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3157,
   :name "create-graphics",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3157"},
  "clj-swing.button/general-button"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5154,
   :name "general-button",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5154"},
  "incanter.charts/scatter-plot*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2775,
   :name "scatter-plot*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2775"},
  "swank.loader/init"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4289,
   :name "init",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4289"},
  "clojure.core/sorted-set"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "sorted-set-by",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1934",
     :line "356",
     :arglists_comp "[comparator & keys]",
     :url_friendly_name "sorted-set-by",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "subseq",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/2102",
     :line "4026",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "subseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "rsubseq",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1719",
     :line "4042",
     :arglists_comp
     "[sc test key]|[sc start-test start-key end-test end-key]",
     :url_friendly_name "rsubseq",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-map",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1494",
     :line "336",
     :arglists_comp "[& keyvals]",
     :url_friendly_name "sorted-map",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-28 05:18:42.0",
     :function "sorted-set",
     :version 2,
     :created_at "2010-07-28 05:18:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (sorted-set 3 2 1)\r\n#{1 2 3}\r\nuser=> (sorted-set 3 2 1 1)\r\n#{1 2 3}\r\n</pre>"}],
   :id 5765,
   :name "sorted-set",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5765"},
  "circumspec.utils/denamespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3762,
   :name "denamespace",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3762"},
  "lancet/sql"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3397,
   :name "sql",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3397"},
  "clojure.pprint/write-out"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5948,
   :name "write-out",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5948"},
  "clojure.contrib.datalog.database/add-tuples"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 186,
   :name "add-tuples",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/186"},
  "incanter.processing/RIGHT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3036,
   :name "RIGHT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3036"},
  "incanter.processing/LINE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3012,
   :name "LINE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3012"},
  "incanter.core/minus"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2724,
   :name "minus",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2724"},
  "clojure.core/vals"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "val",
     :updated_at "2010-11-05 08:28:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1500",
     :line "1227",
     :arglists_comp "[e]",
     :url_friendly_name "val",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:09:45.0",
     :function "vals",
     :version 3,
     :created_at "2010-08-02 12:10:35.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (vals {:a \"foo\", :b \"bar\"})\n(\"foo\" \"bar\")\n"}],
   :id 5827,
   :name "vals",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5827"},
  "swank.commands.inspector/*inspector-stack*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4233,
   :name "*inspector-stack*",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4233"},
  "clojure.core/intern"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-22 16:56:40.0",
     :function "intern",
     :version 4,
     :created_at "2010-09-06 17:51:34.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (intern 'user 'x \"Foobar\")\n#'user/x\n\nuser=> x\n\"Foobar\"\n"}],
   :id 5561,
   :name "intern",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5561"},
  "clj-swing.panel/general-panel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5203,
   :name "general-panel",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5203"},
  "clojure.stacktrace/print-stack-trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5993,
   :name "print-stack-trace",
   :ns "clojure.stacktrace",
   :url "http://clojuredocs.org/v/5993"},
  "net.cgrand.xml/document?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3959,
   :name "document?",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3959"},
  "midje.semi-sweet/in-any-order"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4346,
   :name "in-any-order",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4346"},
  "clojure.contrib.logging/log-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 633,
   :name "log-stream",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/633"},
  "clojure.contrib.jmx/attribute-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 573,
   :name "attribute-info",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/573"},
  "lancet/ant-replace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3398,
   :name "ant-replace",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3398"},
  "clojure.contrib.jmx/tabular-data->map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 551,
   :name "tabular-data->map",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/551"},
  "clojure.contrib.probabilities.monte-carlo/sample-mean-variance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1096,
   :name "sample-mean-variance",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1096"},
  "swank.util.concurrent.thread/thread-id"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4076,
   :name "thread-id",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4076"},
  "incanter.core/atan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2846,
   :name "atan",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2846"},
  "incanter.processing/day"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3235,
   :name "day",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3235"},
  "clojure.core/subs"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 2,
     :name "replace",
     :updated_at "2011-01-15 03:53:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2480",
     :line "63",
     :arglists_comp "[s match replacement]",
     :url_friendly_name "replace",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "split",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2471",
     :line "169",
     :arglists_comp "[s re]|[s re limit]",
     :url_friendly_name "split",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:19:49.0",
     :function "subs",
     :version 3,
     :created_at "2010-07-29 23:16:59.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (subs \"Clojure\" 1)    \n\"lojure\"\nuser=> (subs \"Clojure\" 1 3)\n\"lo\"\n\n\n;; String indexes have to be between 0 and (.length s)\n\nuser=> (subs \"Clojure\" 1 20)\njava.lang.StringIndexOutOfBoundsException: String index out of range: 20 (NO_SOURCE_FILE:0)\n"}],
   :id 5776,
   :name "subs",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5776"},
  "clojure.contrib.datalog.database/make-database"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 166,
   :name "make-database",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/166"},
  "clojure.core/drop-while"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-26 20:49:27.0",
     :user_id 93,
     :function "drop-while",
     :version "1.2.0",
     :created_at "2010-07-26 20:49:27.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The description of this function is throwing me off. I think it should say: returns a sequence of items from `coll` dropping the initial items that evaluate to true when passed to `pred`, once a non-true value is encountered, the rest of the list is returned."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "take-while",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1958",
     :line "2162",
     :arglists_comp "[pred coll]",
     :url_friendly_name "take-while",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "split-with",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1614",
     :line "2224",
     :arglists_comp "[pred coll]",
     :url_friendly_name "split-with",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-16 00:19:58.0",
     :function "drop-while",
     :version 4,
     :created_at "2010-07-17 08:00:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Note: Documentation should be \"starting from the first item for which\n;; (pred item) returns logical false, i.e. either of the values false or nil.\n\nuser=> (drop-while neg? [-1 -2 -6 -7 1 2 3 4 -5 -6 0 1])\n(1 2 3 4 -5 -6 0 1)\n"}],
   :id 5485,
   :name "drop-while",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5485"},
  "lancet/unwar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3429,
   :name "unwar",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3429"},
  "clojure.core/ref-min-history"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5711,
   :name "ref-min-history",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5711"},
  "clojure.core/future-done?"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-14 21:47:32.0",
     :user_id 229,
     :function "future-done?",
     :version "1.2.0",
     :created_at "2011-03-14 21:47:32.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Future \"done\" returns true even for abnormal termination like being cancelled or throwing an exception.\n\nhttp://download.oracle.com/javase/6/docs/api/java/util/concurrent/Future.html#isDone()"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-cancel",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1764",
     :line "5416",
     :arglists_comp "[f]",
     :url_friendly_name "future-cancel",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1722",
     :line "5235",
     :arglists_comp "[x]",
     :url_friendly_name "future_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-cancelled?",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1931",
     :line "5421",
     :arglists_comp "[f]",
     :url_friendly_name "future-cancelled_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:21:59.0",
     :function "future-done?",
     :version 1,
     :created_at "2012-06-09 07:21:59.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (def f (future (Thread/sleep 5000) (inc 0)))\n\nuser=> (future-done? f)                            \nfalse\n\nuser=> (Thread/sleep 5000)\nnil\n\nuser=> (future-done? f)\ntrue\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:29:53.0",
     :function "future-done?",
     :version 1,
     :created_at "2012-06-09 07:29:53.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; beware of cancellation !!!\n\nuser=> (def f (future (Thread/sleep 5000) (inc 0)))\n#'user/f\n\nuser=> (future-cancel f)                           \ntrue\n\nuser=> (future-cancelled? f)                       \ntrue\n\nuser=> (future-done? f)                            \ntrue\n\nuser=> @f                                          \njava.util.concurrent.CancellationException (NO_SOURCE_FILE:0)"}],
   :id 5530,
   :name "future-done?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5530"},
  "clojure.test/*load-tests*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6015,
   :name "*load-tests*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6015"},
  "incanter.processing/list-fonts"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3098,
   :name "list-fonts",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3098"},
  "clojure.contrib.datalog.rules/?-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 145,
   :name "?-",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/145"},
  "clojure.contrib.pprint/compiled-format955"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5237,
   :name "compiled-format955",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5237"},
  "swank.commands.inspector/inspector-content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4213,
   :name "inspector-content",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4213"},
  "incanter.processing/CORNER"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3226,
   :name "CORNER",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3226"},
  "lancet/mkdir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3428,
   :name "mkdir",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3428"},
  "clojure.stacktrace/print-cause-trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5992,
   :name "print-cause-trace",
   :ns "clojure.stacktrace",
   :url "http://clojuredocs.org/v/5992"},
  "swank.commands.contrib.swank-fuzzy/*fuzzy-completion-symbol-suffixes*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4175,
   :name "*fuzzy-completion-symbol-suffixes*",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4175"},
  "incanter.stats/levenshtein-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3312,
   :name "levenshtein-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3312"},
  "clojure.core/print-dup"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-18 13:29:39.0",
     :user_id 61,
     :function "print-dup",
     :version "1.2.0",
     :created_at "2011-03-06 04:35:38.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "This is a multimethod that can be implemented to define the printing of various values when \\*print-dup\\* is bound to true."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "print-ctor",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/1827",
     :line "81",
     :arglists_comp "[o print-args w]",
     :url_friendly_name "print-ctor",
     :file "clojure/core_print.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "print-method",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1946",
     :line "2804",
     :arglists_comp "",
     :url_friendly_name "print-method",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-14 05:16:39.0",
     :function "print-dup",
     :version 2,
     :created_at "2011-03-14 05:11:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; print-dup can be used for basic serialization\n;; the following methods write/read clojure forms to/from a file\n\n(defn to-file\n  \"Save a clojure form to a file\"\n  [#^java.io.File file form]\n  (with-open [w (java.io.FileWriter. file)]\n    (print-dup form w)))\n \n(defn from-file\n  \"Load a clojure form from file.\"\n  [#^java.io.File file]\n  (with-open [r (java.io.PushbackReader. (java.io.FileReader. file))]\n     (read r)))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-14 05:16:13.0",
     :function "print-dup",
     :version 1,
     :created_at "2011-03-14 05:16:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; print-dup is a multimethod, you can extend it to support new types.\n;; The following statement adds print-dup support to \n;; the java.util.Date class\n(defmethod print-dup java.util.Date [o w]\n  (print-ctor o (fn [o w] (print-dup (.getTime  o) w)) w)) "}],
   :id 5671,
   :name "print-dup",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5671"},
  "clojure.test.tap/print-tap-pass"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6070,
   :name "print-tap-pass",
   :ns "clojure.test.tap",
   :url "http://clojuredocs.org/v/6070"},
  "clojure.core/next"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-01 21:11:37.0",
     :user_id 106,
     :function "next",
     :version "1.2.0",
     :created_at "2011-06-01 20:16:09.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "<pre>(next aseq) === (seq (rest aseq))</pre>\n\nWhen writing lazy sequence functions, you should use [rest](../clojure.core/rest), not <b>next</b>."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "rest",
     :updated_at "2011-06-01 19:59:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1994",
     :line "63",
     :arglists_comp "[coll]",
     :url_friendly_name "rest",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "fnext",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1908",
     :line "102",
     :arglists_comp "[x]",
     :url_friendly_name "fnext",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:11:26.0",
     :function "next",
     :version 3,
     :created_at "2010-07-13 18:34:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (next '(:alpha :bravo :charlie))\n(:bravo :charlie)\n\nuser=> (next (next '(:one :two :three)))\n(:three)\n\nuser=> (next (next (next '(:one :two :three))))\nnil"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-01 20:19:55.0",
     :function "next",
     :version 4,
     :created_at "2010-11-06 03:08:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; next is used in the recursive call.  (This is a naive implementation for illustration only.  Using `rest` is usually preferred over `next`.)\n\n(defn my-map [func a-list]\n  (when a-list\n    (cons (func (first a-list))\n          (my-map func (next a-list)))))"}],
   :id 5622,
   :name "next",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5622"},
  "clojure.contrib.stream-utils/defstream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1102,
   :name "defstream",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1102"},
  "leiningen.jar/make-manifest"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3556,
   :name "make-manifest",
   :ns "leiningen.jar",
   :url "http://clojuredocs.org/v/3556"},
  "incanter.stats/sd"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2763,
   :name "sd",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2763"},
  "incanter.charts/add-points*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2794,
   :name "add-points*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2794"},
  "swank.core/sldb-debug"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4113,
   :name "sldb-debug",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4113"},
  "clojure.contrib.seq-utils/flatten"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1186,
   :name "flatten",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1186"},
  "clojure.core/deftype"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-02 04:39:56.0",
     :user_id 61,
     :function "deftype",
     :version "1.3.0",
     :created_at "2012-03-02 04:39:56.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "There's also some undocumented support for annotations:\n\n<https://groups.google.com/group/clojure/browse_thread/thread/d2128e1505c0c117?pli=1>"}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-30 03:09:55.0",
     :function "deftype",
     :version 3,
     :created_at "2010-09-29 11:27:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (import (java.awt.datatransfer Transferable DataFlavor)\n               javax.swing.ImageIcon)\n\n;; create a Transferable Image from an array of bytes\nuser=> (deftype ImageSelection [data]\n         Transferable\n         (getTransferDataFlavors\n          [this]\n          (into-array DataFlavor [DataFlavor/imageFlavor]))\n        \n         (isDataFlavorSupported\n          [this flavor]\n          (= DataFlavor/imageFlavor flavor))\n\n         (getTransferData\n          [this flavor]\n          (when (= DataFlavor/imageFlavor flavor)\n            (.getImage (ImageIcon. data)))))\n\n;; create a new image selection:\nuser=> (def *selection* (ImageSelection. somedata))"}],
   :id 5459,
   :name "deftype",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5459"},
  "swank.commands.contrib.swank-c-p-c.internal/compound-prefix-match?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4162,
   :name "compound-prefix-match?",
   :ns "swank.commands.contrib.swank-c-p-c.internal",
   :url "http://clojuredocs.org/v/4162"},
  "clojure.contrib.accumulators/empty-counter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 7,
   :name "empty-counter",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/7"},
  "incanter.core/div"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2732,
   :name "div",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2732"},
  "swank.commands.contrib.swank-fuzzy/with-timeout"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4181,
   :name "with-timeout",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4181"},
  "clojure.core/unchecked-inc"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unchecked-add",
     :updated_at "2010-11-08 03:25:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1700",
     :line "955",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-add",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-dec",
     :updated_at "2010-11-08 03:52:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1540",
     :line "941",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-dec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-inc",
     :updated_at "2010-11-08 03:53:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1632",
     :line "934",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-inc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "unchecked-negate",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1645",
     :line "948",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-negate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-divide",
     :updated_at "2011-08-20 23:49:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2111",
     :line "976",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-divide",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-subtract",
     :updated_at "2010-11-08 03:42:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1768",
     :line "962",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-subtract",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-multiply",
     :updated_at "2011-08-21 00:16:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1533",
     :line "969",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-multiply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-remainder",
     :updated_at "2010-11-08 03:47:39.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2023",
     :line "983",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-remainder",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 03:53:43.0",
     :function "unchecked-inc",
     :version 1,
     :created_at "2010-11-08 03:53:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "users=> (unchecked-inc Integer/MAX_VALUE)\n-2147483648\n\nusers=> (unchecked-inc 0)\n1"}],
   :id 5808,
   :name "unchecked-inc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5808"},
  "clojure.contrib.str-utils2/split-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1275,
   :name "split-lines",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1275"},
  "clojure.contrib.stream-utils/stream-filter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1309,
   :name "stream-filter",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1309"},
  "clojure.contrib.pprint.pretty-writer/tok"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1028,
   :name "tok",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/1028"},
  "clj-ssh.ssh/open-channel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1486,
   :name "open-channel",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1486"},
  "incanter.charts/add-lines*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2807,
   :name "add-lines*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2807"},
  "lancet/checksum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3426,
   :name "checksum",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3426"},
  "swank.util.class-browse/clojure-ns?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4142,
   :name "clojure-ns?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4142"},
  "clojure.contrib.condition/raise"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 63,
   :name "raise",
   :ns "clojure.contrib.condition",
   :url "http://clojuredocs.org/v/63"},
  "incanter.stats/sample-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3311,
   :name "sample-t",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3311"},
  "clojure.core/seq"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1664",
     :line "131",
     :arglists_comp "[x]",
     :url_friendly_name "seq_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "empty?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1795",
     :line "4962",
     :arglists_comp "[coll]",
     :url_friendly_name "empty_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:05:23.0",
     :function "seq",
     :version 4,
     :created_at "2010-08-02 12:30:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (seq '())\nnil\n\nuser=> (seq '(1))\n(1)\n\nuser=> (seq \"\")\nnil\n\nuser=> (seq \"abc\")\n(\\a \\b \\c)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-14 20:34:44.0",
     :function "seq",
     :version 2,
     :created_at "2012-10-14 20:34:34.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";(seq x) is the recommended idiom for testing if a collection is not empty\nuser=> (every? seq [\"1\" [1] '(1) {:1 1} #{1}])\ntrue"}],
   :id 5743,
   :name "seq",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5743"},
  "incanter.charts/add-box-plot*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2830,
   :name "add-box-plot*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2830"},
  "incanter.processing/begin-shape"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3043,
   :name "begin-shape",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3043"},
  "incanter.mongodb/insert-dataset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2971,
   :name "insert-dataset",
   :ns "incanter.mongodb",
   :url "http://clojuredocs.org/v/2971"},
  "incanter.processing/request-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3247,
   :name "request-image",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3247"},
  "net.cgrand.enlive-html/last-of-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3939,
   :name "last-of-type",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3939"},
  "clojure.contrib.accumulators/acc-tuple"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 10,
   :name "acc-tuple",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/10"},
  "clojure.contrib.miglayout.internal/format-constraint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 707,
   :name "format-constraint",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/707"},
  "swank.util.io/call-on-flush-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4263,
   :name "call-on-flush-stream",
   :ns "swank.util.io",
   :url "http://clojuredocs.org/v/4263"},
  "clojure.contrib.datalog.rules/compute-sip"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 168,
   :name "compute-sip",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/168"},
  "clojure.contrib.test-is/assert-predicate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1366,
   :name "assert-predicate",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1366"},
  "incanter.core/matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2725,
   :name "matrix",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2725"},
  "lancet/xslt"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3425,
   :name "xslt",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3425"},
  "circumspec.contrib-mocking/between"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3643,
   :name "between",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3643"},
  "clojure.core/clear-agent-errors"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "restart-agent",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1754",
     :line "1645",
     :arglists_comp "[a new-state & options]",
     :url_friendly_name "restart-agent",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5419,
   :name "clear-agent-errors",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5419"},
  "clojure.inspector/inspect-tree"
  {:comments [],
   :see-alsos
   [{:namespace_id 101,
     :weight 0,
     :name "inspect-table",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/2128",
     :line "96",
     :arglists_comp "[data]",
     :url_friendly_name "inspect-table",
     :file "clojure/inspector.clj"}],
   :examples [],
   :id 5869,
   :name "inspect-tree",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5869"},
  "swank.core/eval-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4057,
   :name "eval-loop",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4057"},
  "incanter.stats/cdf-poisson"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3322,
   :name "cdf-poisson",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3322"},
  "incanter.processing/texture-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3094,
   :name "texture-mode",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3094"},
  "clojure.contrib.with-ns/with-temp-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1429,
   :name "with-temp-ns",
   :ns "clojure.contrib.with-ns",
   :url "http://clojuredocs.org/v/1429"},
  "clojure.contrib.def/defnk"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 20,
     :ns "clojure.contrib.def",
     :updated_at "2011-02-11 17:17:43.0",
     :function "defnk",
     :version 3,
     :created_at "2010-09-25 00:25:53.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "<pre>\nuser> (use 'clojure.contrib.def)\nnil\nuser> (defnk f [:b 43] (inc b))\n#'user/f\nuser> (f)\n44\nuser> (f :b 100)\n101\nuser=> (defnk with-positional [foo :b 43] (+ foo (inc b)))\n#'user/with-positional\nuser=> (with-positional 5 :b 1)\n7\n</pre>"}],
   :id 97,
   :name "defnk",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/97"},
  "swank.util/returning"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4080,
   :name "returning",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4080"},
  "clojure.contrib.sql.internal/connection*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1242,
   :name "connection*",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1242"},
  "incanter.core/to-labels"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2882,
   :name "to-labels",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2882"},
  "clojure.xml/*current*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6084,
   :name "*current*",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6084"},
  "clojure.contrib.str-utils/re-split"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1259,
   :name "re-split",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1259"},
  "clojure.core/unchecked-subtract"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unchecked-add",
     :updated_at "2010-11-08 03:25:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1700",
     :line "955",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-add",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-dec",
     :updated_at "2010-11-08 03:52:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1540",
     :line "941",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-dec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-inc",
     :updated_at "2010-11-08 03:53:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1632",
     :line "934",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-inc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "unchecked-negate",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1645",
     :line "948",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-negate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-divide",
     :updated_at "2011-08-20 23:49:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2111",
     :line "976",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-divide",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-subtract",
     :updated_at "2010-11-08 03:42:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1768",
     :line "962",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-subtract",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-multiply",
     :updated_at "2011-08-21 00:16:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1533",
     :line "969",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-multiply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-remainder",
     :updated_at "2010-11-08 03:47:39.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2023",
     :line "983",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-remainder",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 17:57:56.0",
     :function "unchecked-subtract",
     :version 2,
     :created_at "2010-11-08 03:42:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; can't interchange INTs with LONGs, only F(int, int) or F(long, long)\n;; F is a function, not an\n;; overflow very easily as shown below.\n\n(unchecked-subtract Long/MIN_VALUE 5555555554)\nuser=> 9223372031299220254\n\n(unchecked-subtract Long/MIN_VALUE 1)\nuser=> java.lang.IllegalArgumentException: No matching method found: unchecked_subtract (NO_SOURCE_FILE:0)\n\n(unchecked-subtract Long/MIN_VALUE Long/MIN_VALUE)\nuser=> 0\n\n(unchecked-subtract Integer/MIN_VALUE Long/MIN_VALUE)\nuser=> java.lang.IllegalArgumentException: No matching method found: unchecked_subtract (NO_SOURCE_FILE:0)\n\n(unchecked-subtract Integer/MIN_VALUE Integer/MIN_VALUE)\nuser=> 0\n\n(unchecked-subtract Integer/MIN_VALUE 0)\nuser=> -2147483648\n\n(unchecked-subtract Integer/MIN_VALUE 1)\nuser=> 2147483647\n\n(unchecked-subtract Integer/MIN_VALUE 54444444)\nuser=> 2093039204\n\n(unchecked-subtract 123456 654321)\nuser=> -530865"}],
   :id 5818,
   :name "unchecked-subtract",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5818"},
  "swank.core/*protocol-version*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3990,
   :name "*protocol-version*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3990"},
  "incanter.processing/CENTER"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3228,
   :name "CENTER",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3228"},
  "swank.commands.inspector/value-part"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4215,
   :name "value-part",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4215"},
  "incanter.stats/rank-index"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3287,
   :name "rank-index",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3287"},
  "incanter.symbolic/deriv"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3376,
   :name "deriv",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3376"},
  "swank.core/*debug-continue-exception*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4067,
   :name "*debug-continue-exception*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4067"},
  "clojure.core/comment"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:21:33.0",
     :function "comment",
     :version 3,
     :created_at "2010-07-17 12:41:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The commented forms do not get executed\nuser=> (comment\n         (functioncall-1)\n         (functioncall-2))\nnil"}],
   :id 5422,
   :name "comment",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5422"},
  "clojure.contrib.str-utils2/chop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1291,
   :name "chop",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1291"},
  "circumspec.watch/needs-test?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3779,
   :name "needs-test?",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3779"},
  "circumspec.watch/reload-exception-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3784,
   :name "reload-exception-message",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3784"},
  "midje.semi-sweet/exactly"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4332,
   :name "exactly",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4332"},
  "clojure.contrib.http.connection/http-connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 484,
   :name "http-connection",
   :ns "clojure.contrib.http.connection",
   :url "http://clojuredocs.org/v/484"},
  "clojure.contrib.duck-streams/read-lines"
  {:comments
   [{:namespace_id 21,
     :ns "clojure.contrib.duck-streams",
     :updated_at "2011-07-07 18:09:24.0",
     :user_id 229,
     :function "read-lines",
     :version "1.2.0",
     :created_at "2011-07-07 18:09:24.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "Note this is deprecated: http://clojure.github.com/clojure-contrib/#duck-streams"}],
   :see-alsos [],
   :examples [],
   :id 266,
   :name "read-lines",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/266"},
  "swank.commands.completion/potential-dot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4126,
   :name "potential-dot",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4126"},
  "clojure.contrib.combinatorics/cartesian-product"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2010-12-30 18:09:23.0",
     :function "cartesian-product",
     :version 1,
     :created_at "2010-12-30 18:09:23.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user> (use 'clojure.contrib.combinatorics)\n\nuser> (cartesian-product [\"A\" \"B\"] [\"a\" \"b\"])\n((\"A\" \"a\") (\"A\" \"b\") (\"B\" \"a\") (\"B\" \"b\"))\n\nuser> (cartesian-product [\"A\" \"B\"] [\"a\" \"b\"] [1 2])\n((\"A\" \"a\" 1) (\"A\" \"a\" 2) (\"A\" \"b\" 1) (\"A\" \"b\" 2) (\"B\" \"a\" 1) (\"B\" \"a\" 2) (\"B\" \"b\" 1) (\"B\" \"b\" 2))"}],
   :id 5228,
   :name "cartesian-product",
   :ns "clojure.contrib.combinatorics",
   :url "http://clojuredocs.org/v/5228"},
  "clojure.contrib.probabilities.finite-distributions/prob"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1090,
   :name "prob",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1090"},
  "circumspec.for-all/famous-whitespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3673,
   :name "famous-whitespace",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3673"},
  "clojure.core/every-pred"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 2,
     :name "some-fn",
     :updated_at "2012-07-31 15:51:35.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:10:52.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5760",
     :line "6421",
     :arglists_comp "[p]|[p1 p2]|[p1 p2 p3]|[p1 p2 p3 & ps]",
     :url_friendly_name "some-fn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-26 02:13:27.0",
     :function "every-pred",
     :version 1,
     :created_at "2012-04-26 02:13:27.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body "user=> ((every-pred number? odd?) 3 9 11)\ntrue"}],
   :id 5494,
   :name "every-pred",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5494"},
  "clj-swing.button/check-box-menu-item"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5160,
   :name "check-box-menu-item",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5160"},
  "circumspec.story/and"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3756,
   :name "and",
   :ns "circumspec.story",
   :url "http://clojuredocs.org/v/3756"},
  "swank.util.class-browse/jar-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4132,
   :name "jar-file?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4132"},
  "swank.commands.contrib.swank-fuzzy/*fuzzy-recursion-soft-limit*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4174,
   :name "*fuzzy-recursion-soft-limit*",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4174"},
  "incanter.stats/variance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3290,
   :name "variance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3290"},
  "swank.commands.basic/list-all-package-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4060,
   :name "list-all-package-names",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4060"},
  "incanter.core/with-data"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2917,
   :name "with-data",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2917"},
  "clojure.core/agent-errors"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5342,
   :name "agent-errors",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5342"},
  "incanter.processing/image-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3223,
   :name "image-mode",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3223"},
  "clojure.contrib.datalog.rules/empty-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 171,
   :name "empty-bindings",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/171"},
  "clojure.contrib.accumulators/empty-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 13,
   :name "empty-map",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/13"},
  "clojure.contrib.logging/error"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 643,
   :name "error",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/643"},
  "incanter.stats/jaccard-index"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3321,
   :name "jaccard-index",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3321"},
  "clj-ssh.keychain/ask-passphrase"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1451,
   :name "ask-passphrase",
   :ns "clj-ssh.keychain",
   :url "http://clojuredocs.org/v/1451"},
  "incanter.stats/sample-uniform"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3310,
   :name "sample-uniform",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3310"},
  "swank.commands.basic/pprint-eval"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4007,
   :name "pprint-eval",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4007"},
  "clj-swing.button/radio-button-menu-item"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5152,
   :name "radio-button-menu-item",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5152"},
  "clojure.contrib.string/replace-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1318,
   :name "replace-str",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1318"},
  "clojure.contrib.repl-utils/javadoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 367,
   :name "javadoc",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/367"},
  "incanter.processing/CONTROL"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3162,
   :name "CONTROL",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3162"},
  "clojure.contrib.accumulators/counter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 8,
   :name "counter",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/8"},
  "clojure.contrib.test-is/use-fixtures"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 91,
     :ns "clojure.contrib.test-is",
     :updated_at "2010-11-15 14:53:50.0",
     :function "use-fixtures",
     :version 1,
     :created_at "2010-11-15 14:53:50.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Assuming you have tests that need to be run with a database connection\n(defn db-fixture [f]\n  (with-connection DB\n    (f)))\n\n(use-fixtures :once db-fixture)\n"}],
   :id 1375,
   :name "use-fixtures",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1375"},
  "clojure.core/chunk-next"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5414,
   :name "chunk-next",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5414"},
  "clojure.contrib.base64/*locals*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3798,
   :name "*locals*",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3798"},
  "incanter.charts/time-series-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2765,
   :name "time-series-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2765"},
  "net.cgrand.enlive-html/clone-for"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3898,
   :name "clone-for",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3898"},
  "swank.core.protocol/read-swank-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4260,
   :name "read-swank-message",
   :ns "swank.core.protocol",
   :url "http://clojuredocs.org/v/4260"},
  "clojure.core/key"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "keys",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1547",
     :line "1211",
     :arglists_comp "[map]",
     :url_friendly_name "keys",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:04:46.0",
     :function "key",
     :version 3,
     :created_at "2010-08-02 12:38:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (map key {:a 1 :b 2})\n(:a :b)\n"}],
   :id 5573,
   :name "key",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5573"},
  "clojure.contrib.monads/update-state"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 800,
   :name "update-state",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/800"},
  "clojure.contrib.duck-streams/spit"
  {:comments [],
   :see-alsos
   [{:namespace_id 21,
     :weight 0,
     :name "slurp*",
     :updated_at "2010-10-20 04:41:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:48:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/257",
     :line "247",
     :arglists_comp "[f]",
     :url_friendly_name "slurp*",
     :file "clojure/contrib/duck_streams.clj"}],
   :examples
   [{:namespace_id 21,
     :ns "clojure.contrib.duck-streams",
     :updated_at "2012-04-17 19:15:47.0",
     :function "spit",
     :version 2,
     :created_at "2012-04-17 19:15:18.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(defn append-to-file\n    \"Uses spit to append to an output file.\n     ostr is the string, and file-name is an\n     actual file name read in using slurp or\n     a constant in double quote characters.\"\n     \n    [file-name ostr]\n    (spit file-name ostr :append true))"}],
   :id 253,
   :name "spit",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/253"},
  "net.cgrand.enlive-html/content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3878,
   :name "content",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3878"},
  "lancet/reset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3399,
   :name "reset",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3399"},
  "clojure.contrib.pprint/compiled-format911"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5234,
   :name "compiled-format911",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5234"},
  "clojure.core/find-var"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-24 19:22:48.0",
     :function "find-var",
     :version 1,
     :created_at "2012-11-24 19:22:48.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (find-var 'map)\nIllegalArgumentException Symbol must be namespace-qualified  clojure.lang.Var.find (Var.java:150)\nuser=> (find-var 'clojure.core/map)\n#'clojure.core/map\nuser=> (find-var 'clojure.core/qwerty)\nnil\n"}],
   :id 5510,
   :name "find-var",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5510"},
  "clojure.contrib.mmap/slurp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 722,
   :name "slurp",
   :ns "clojure.contrib.mmap",
   :url "http://clojuredocs.org/v/722"},
  "incanter.core/vectorize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2738,
   :name "vectorize",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2738"},
  "clojure.contrib.monadic-io-streams/with-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 763,
   :name "with-writer",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/763"},
  "incanter.core/to-vect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2869,
   :name "to-vect",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2869"},
  "clojure.repl/find-doc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5971,
   :name "find-doc",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5971"},
  "clojure.contrib.stream-utils/defst"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1298,
   :name "defst",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1298"},
  "clojure.walk/keywordize-keys"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 118,
     :ns "clojure.walk",
     :updated_at "2010-10-14 08:29:36.0",
     :function "keywordize-keys",
     :version 1,
     :created_at "2010-10-14 08:29:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(clojure.walk/keywordize-keys {\"a\" 1 \"b\" 2}) => {:a 1 :b 2}"}],
   :id 6074,
   :name "keywordize-keys",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6074"},
  "lancet/uptodate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3497,
   :name "uptodate",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3497"},
  "clojure.contrib.string/docodepoints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1331,
   :name "docodepoints",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1331"},
  "clojure.contrib.pprint/use-method"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 964,
   :name "use-method",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/964"},
  "clojure.contrib.io/slurp*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 495,
   :name "slurp*",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/495"},
  "clojure.contrib.datalog.rules/is-safe?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 188,
   :name "is-safe?",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/188"},
  "clj-swing.tree/path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5195,
   :name "path",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5195"},
  "clojure.contrib.datalog.rules/datalog-rule"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 176,
   :name "datalog-rule",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/176"},
  "clj-ssh.keychain/keychain-passphrase"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1450,
   :name "keychain-passphrase",
   :ns "clj-ssh.keychain",
   :url "http://clojuredocs.org/v/1450"},
  "clojure.contrib.str-utils2/chomp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1263,
   :name "chomp",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1263"},
  "clojure.contrib.repl-utils/*core-java-api*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 342,
   :name "*core-java-api*",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/342"},
  "clojure.core/agent-error"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "restart-agent",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1754",
     :line "1645",
     :arglists_comp "[a new-state & options]",
     :url_friendly_name "restart-agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "set-error-handler!",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/2071",
     :line "1660",
     :arglists_comp "[a handler-fn]",
     :url_friendly_name "set-error-handler!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-02-15 22:58:45.0",
     :function "agent-error",
     :version 1,
     :created_at "2012-02-15 22:58:45.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def tdate (agent (java.util.Date.)))\n\n@tdate\n=> #<Date Wed Feb 15 23:25:26 CET 2012>\n\n(send tdate inc) ;;this has no meaning, rendering a (silent) error\n\n(agent-error tdate)\n=> #<ClassCastException java.lang.ClassCastException: java.util.Date cannot be cast to java.lang.Number>"}],
   :id 5341,
   :name "agent-error",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5341"},
  "incanter.censored/censored-mean-two-sided"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2759,
   :name "censored-mean-two-sided",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2759"},
  "clojure.core/chunk-rest"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5415,
   :name "chunk-rest",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5415"},
  "swank.commands.basic/describe-definition-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4009,
   :name "describe-definition-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4009"},
  "clojure.contrib.javadoc.browse/*open-url-script*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 543,
   :name "*open-url-script*",
   :ns "clojure.contrib.javadoc.browse",
   :url "http://clojuredocs.org/v/543"},
  "clojure.core/map-indexed"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "map",
     :updated_at "2010-10-20 05:22:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1734",
     :line "2079",
     :arglists_comp
     "[f coll]|[f c1 c2]|[f c1 c2 c3]|[f c1 c2 c3 & colls]",
     :url_friendly_name "map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "keep-indexed",
     :updated_at "2011-05-25 03:31:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1683",
     :line "5660",
     :arglists_comp "[f coll]",
     :url_friendly_name "keep-indexed",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:03:55.0",
     :function "map-indexed",
     :version 6,
     :created_at "2010-08-02 12:54:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (map-indexed (fn [idx itm] [idx itm]) \"foobar\")\n([0 \\f] [1 \\o] [2 \\o] [3 \\b] [4 \\a] [5 \\r])\n\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-19 06:53:20.0",
     :function "map-indexed",
     :version 1,
     :created_at "2011-12-19 06:53:20.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; or simply\nuser=> (map-indexed vector \"foobar\")\n([0 \\f] [1 \\o] [2 \\o] [3 \\b] [4 \\a] [5 \\r])"}],
   :id 5601,
   :name "map-indexed",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5601"},
  "clojure.core/second"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nth",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/1851",
     :line "740",
     :arglists_comp "[coll index]|[coll index not-found]",
     :url_friendly_name "nth",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-19 15:19:26.0",
     :function "second",
     :version 4,
     :created_at "2010-07-13 18:35:08.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (second '(:alpha :bravo :charlie))\n:bravo\n\nuser=> (second [1 2 3])\n2\n\nuser=> (second {:a 1 :b 2 :c 3})\n[:b 2]\n\nuser=> (second #{1 2 3})\n2\n"}],
   :id 5739,
   :name "second",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5739"},
  "clojure.core/dorun"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "doall",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1806",
     :line "2456",
     :arglists_comp "[coll]|[n coll]",
     :url_friendly_name "doall",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-08-06 04:06:43.0",
     :function "dorun",
     :version 2,
     :created_at "2010-08-06 04:06:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (dorun 5 (repeatedly #(println \"hi\")))\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nhi\r\nnil\r\n</pre>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-26 02:17:14.0",
     :function "dorun",
     :version 1,
     :created_at "2012-04-26 02:17:14.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (let [x (atom 0)]\n         (dorun (take 10 (repeatedly #(swap! x inc))))\n         @x)\n10"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-24 14:45:24.0",
     :function "dorun",
     :version 1,
     :created_at "2012-07-24 14:45:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (dorun (map #(println \"hi\" %) [\"mum\" \"dad\" \"sister\"]))\nhi mum\nhi dad\nhi sister"}],
   :id 5475,
   :name "dorun",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5475"},
  "clojure.xml/element"
  {:comments [],
   :see-alsos
   [{:namespace_id 119,
     :weight 0,
     :name "emit-element",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/2572",
     :line "95",
     :arglists_comp "[e]",
     :url_friendly_name "emit-element",
     :file "clojure/xml.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "struct",
     :updated_at "2010-12-29 18:05:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2011",
     :line "3130",
     :arglists_comp "[s & vals]",
     :url_friendly_name "struct",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "struct-map",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1901",
     :line "3121",
     :arglists_comp "[s & inits]",
     :url_friendly_name "struct-map",
     :file "clojure/core.clj"}
    {:namespace_id 119,
     :weight 0,
     :name "parse",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/2571",
     :line "78",
     :arglists_comp "[s]|[s startparse]",
     :url_friendly_name "parse",
     :file "clojure/xml.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "with-out-str",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:09.0",
     :added nil,
     :url "http://clojuredocs.org/v/1652",
     :line "3674",
     :arglists_comp "[& body]",
     :url_friendly_name "with-out-str",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 351,
     :ns "clojure.xml",
     :updated_at "2011-12-22 14:34:02.0",
     :function "element",
     :version 3,
     :created_at "2011-12-22 14:29:44.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.zip)\n\n;;using our old friend struct for performance in maps \n(struct element :httplink {:href \"http://clojure.org\"} nil)\n=>\n{:tag   :httplink, \n :attrs {:href \"http://clojure.org\"}, \n :content nil}\n\n;;these elements can be output to ordinary xml strings with emit-element\n(emit-element (struct element :httplink {:href \"http://clojure.org\"} nil))\n=>\n<httplink href='http://clojure.org'/>\n;;this is printed - can be catched with macro with-out-str\n\n;;make hierarchies:\n(struct element :parent {:name \"Barbara\"} \n  [(struct element :children {:name \"Gina\"} nil) \n   (struct element :children {:name \"John\"} nil)])\n=>\n{:tag :parent, :attrs {:name \"Barbara\"}, :content \n   [{:tag :children, :attrs {:name \"Gina\"}, :content nil} \n    {:tag :children, :attrs {:name \"John\"}, :content nil}]}\n\n;;which can be emit-elemented as well\n\n(emit-element {:tag :parent, :attrs {:name \"Barbara\"}, :content [{:tag :children, :attrs {:name \"Gina\"}, :content nil} {:tag :children, :attrs {:name \"John\"}, :content nil}]})\n=>\n<parent name='Barbara'>\n <children name='Gina'/>\n <children name='John'/>\n</parent>"}],
   :id 6091,
   :name "element",
   :ns "clojure.xml",
   :url "http://clojuredocs.org/v/6091"},
  "incanter.charts/sliders*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2842,
   :name "sliders*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2842"},
  "net.cgrand.enlive-html/remove-attr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3826,
   :name "remove-attr",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3826"},
  "clojure.contrib.http.agent/bytes"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 474,
   :name "bytes",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/474"},
  "clojure.java.io/writer"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "reader",
     :updated_at "2010-11-20 16:02:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2147",
     :line "80",
     :arglists_comp "[x & opts]",
     :url_friendly_name "reader",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "IOFactory",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2162",
     :line "63",
     :arglists_comp "",
     :url_friendly_name "iofactory",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "output-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2137",
     :line "132",
     :arglists_comp "[x & opts]",
     :url_friendly_name "output-stream",
     :file "clojure/java/io.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "spit",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1555",
     :line "5380",
     :arglists_comp "[f content & options]",
     :url_friendly_name "spit",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 336,
     :ns "clojure.java.io",
     :updated_at "2012-02-15 02:41:20.0",
     :function "writer",
     :version 1,
     :created_at "2012-02-15 02:41:20.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(defn write-file []\n  (with-open [w (clojure.java.io/writer  \"f:/w.txt\" :append true)]\n    (.write w (str \"hello\" \"world\"))))"}],
   :id 5896,
   :name "writer",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5896"},
  "swank.loader/relative-path-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4285,
   :name "relative-path-name",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4285"},
  "clojure.contrib.dataflow/cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 128,
   :name "cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/128"},
  "net.cgrand.enlive-html/template"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3876,
   :name "template",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3876"},
  "clojure.contrib.dataflow/get-value-from-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 143,
   :name "get-value-from-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/143"},
  "incanter.stats/pdf-exp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3307,
   :name "pdf-exp",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3307"},
  "incanter.distributions/pdf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2938,
   :name "pdf",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2938"},
  "incanter.core/abs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2868,
   :name "abs",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2868"},
  "clojure.contrib.string/repeat"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1316,
   :name "repeat",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1316"},
  "net.cgrand.enlive-html/substitute"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3834,
   :name "substitute",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3834"},
  "clojure.contrib.str-utils/re-gsub"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 85,
     :ns "clojure.contrib.str-utils",
     :updated_at "2011-08-29 07:21:21.0",
     :function "re-gsub",
     :version 1,
     :created_at "2011-08-29 07:21:21.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "user=> (def examplestr (str \"jack and jill\" \\newline \"went up the hill\"))\n#'user/examplestr\n\nuser=> (println examplestr)\njack and jill\nwent up the hill\nnil\n\nuser=> (println (re-gsub #\"\\n\" \" \" examplestr))\njack and jill went up the hill\nnil"}],
   :id 1262,
   :name "re-gsub",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1262"},
  "clojure.test/join-fixtures"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "use-fixtures",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/2501",
     :line "641",
     :arglists_comp "",
     :url_friendly_name "use-fixtures",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 0,
     :name "compose-fixtures",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2516",
     :line "660",
     :arglists_comp "[f1 f2]",
     :url_friendly_name "compose-fixtures",
     :file "clojure/test.clj"}],
   :examples [],
   :id 6034,
   :name "join-fixtures",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6034"},
  "clojure.contrib.macros/const"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 686,
   :name "const",
   :ns "clojure.contrib.macros",
   :url "http://clojuredocs.org/v/686"},
  "clojure.contrib.fnmap/fnmap"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 318,
   :name "fnmap",
   :ns "clojure.contrib.fnmap",
   :url "http://clojuredocs.org/v/318"},
  "clj-ssh.ssh/ssh-sftp-cmd"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1453,
   :name "ssh-sftp-cmd",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1453"},
  "clojure.contrib.string/upper-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1323,
   :name "upper-case",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1323"},
  "clojure.contrib.miglayout.internal/format-constraints"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 712,
   :name "format-constraints",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/712"},
  "incanter.processing/cursor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3203,
   :name "cursor",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3203"},
  "swank.commands.basic/interactive-eval"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3994,
   :name "interactive-eval",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3994"},
  "swank.core/*active-threads*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4115,
   :name "*active-threads*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4115"},
  "incanter.distributions/combination-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2941,
   :name "combination-distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2941"},
  "clojure.core/subvec"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "vector",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1693",
     :line "302",
     :arglists_comp "[]|[a]|[a b]|[a b c]|[a b c d]|[a b c d & args]",
     :url_friendly_name "vector",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1723",
     :line "155",
     :arglists_comp "[x]",
     :url_friendly_name "vector_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-21 06:43:51.0",
     :function "subvec",
     :version 6,
     :created_at "2010-08-11 13:35:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; not supplying 'end' returns vector from 'start' to (count vector)\nuser=> (subvec [12 3 4 5 6 7] 2)\n[4 5 6 7]\n\n;; supplying 'end' returns vector from 'start' to element (- end 1)\nuser=> (subvec [12 3 4 5 6 7] 2 4)\n[4 5]\n\n\n\n\n"}],
   :id 5778,
   :name "subvec",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5778"},
  "net.cgrand.enlive-html/even"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3833,
   :name "even",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3833"},
  "clojure.core/rest"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-01 21:10:31.0",
     :user_id 106,
     :function "rest",
     :version "1.2.0",
     :created_at "2011-06-01 20:27:18.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "<b>rest</b> is generally preferred over [next](../clojure.core/next).  See the Clojure.org documentation on writing [lazy](http://clojure.org/lazy) functions.\n\nAlso, the topic is covered on StackOverflow.com: [rest vs. next](http://stackoverflow.com/questions/4288476/clojure-rest-vs-next).\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "next",
     :updated_at "2010-11-06 03:08:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1620",
     :line "55",
     :arglists_comp "[coll]",
     :url_friendly_name "next",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2018",
     :line "2172",
     :arglists_comp "[n coll]",
     :url_friendly_name "drop",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-17 18:25:40.0",
     :function "rest",
     :version 2,
     :created_at "2010-07-17 18:25:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (rest [1 2 3 4 5])\r\n(2 3 4 5)\r\nuser=&gt; (rest [\"a\" \"b\" \"c\" \"d\" \"e\"])\r\n(\"b\" \"c\" \"d\" \"e\")</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-01 20:24:41.0",
     :function "rest",
     :version 2,
     :created_at "2011-04-06 07:33:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (rest '())\n()"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-01 20:24:52.0",
     :function "rest",
     :version 2,
     :created_at "2011-06-01 19:52:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (rest nil)\n()"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-01 20:22:26.0",
     :function "rest",
     :version 2,
     :created_at "2011-06-01 19:59:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; A simple implementation using rest for recursing over a collection.  Note that (seq coll) is used as the test.\n(defn my-map [func coll]\n     (when-let [s (seq coll)]\n        (cons (func (first s))\n\t      (my-map func (rest s)))))"}],
   :id 5731,
   :name "rest",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5731"},
  "clojure.core/ns-map"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ns-interns",
     :updated_at "2011-08-21 21:48:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1612",
     :line "3248",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-interns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-publics",
     :updated_at "2011-02-24 06:02:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/1561",
     :line "3232",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-publics",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-refers",
     :updated_at "2010-10-25 23:37:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1726",
     :line "3290",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-refers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-imports",
     :updated_at "2010-10-25 23:34:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:45.0",
     :added nil,
     :url "http://clojuredocs.org/v/1880",
     :line "3242",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-imports",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-25 23:35:55.0",
     :function "ns-map",
     :version 1,
     :created_at "2010-10-25 23:35:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns-map 'clojure.core)\n{sorted-map #'clojure.core/sorted-map, read-line #'clojure.core/read-line, re-pattern #'clojure.core/re-pattern, keyword? #'clojure.core/keyword?, ClassVisitor clojure.asm.ClassVisitor, asm-type #'clojure.core/asm-type, val #'clojure.core/val, ...chop...}"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-24 02:36:14.0",
     :function "ns-map",
     :version 1,
     :created_at "2012-09-24 02:36:14.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See also http://clojure.org/namespaces for information on namespaces in Clojure and how to inspect and manipulate them"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-12-28 05:54:24.0",
     :function "ns-map",
     :version 1,
     :created_at "2012-12-28 05:54:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; ns-map = ns-refers + ns-interns + ns-imports\nuser=> (count (ns-imports *ns*))\n;;=> 96\n\nuser=> (count (ns-interns *ns*))\n;;=> 2\n\nuser=> (count (ns-refers *ns*))\n;;=> 590\n\nuser=> (+ *1 *2 *3)\n;;=> 688\n\nuser=> (count (ns-map *ns*))\n;;=> 688"}],
   :id 5635,
   :name "ns-map",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5635"},
  "clojure.contrib.monads/set-state"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 807,
   :name "set-state",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/807"},
  "clojure.contrib.dataflow/standard-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 113,
   :name "standard-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/113"},
  "clojure.contrib.pprint/pprint-if"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 895,
   :name "pprint-if",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/895"},
  "clojure.test.junit/suite-attrs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6065,
   :name "suite-attrs",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6065"},
  "swank.commands.basic/invoke-nth-restart-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4066,
   :name "invoke-nth-restart-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4066"},
  "incanter.processing/ELLIPSE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3116,
   :name "ELLIPSE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3116"},
  "clojure.core/ratio?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-13 19:33:48.0",
     :function "ratio?",
     :version 2,
     :created_at "2010-07-13 19:33:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (ratio? 22/7)\r\ntrue\r\nuser=&gt; (ratio? 22)\r\nfalse</pre>"}],
   :id 5693,
   :name "ratio?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5693"},
  "net.cgrand.enlive-html/has"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3838,
   :name "has",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3838"},
  "clojure.test.junit/start-suite"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6064,
   :name "start-suite",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6064"},
  "clojure.contrib.generic.collection/assoc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 393,
   :name "assoc",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/393"},
  "clojure.contrib.pprint.pretty-writer/toks"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 836,
   :name "toks",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/836"},
  "incanter.processing/INVERT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3204,
   :name "INVERT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3204"},
  "clojure.test/try-expr"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "is",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2497",
     :line "533",
     :arglists_comp "[form]|[form msg]",
     :url_friendly_name "is",
     :file "clojure/test.clj"}],
   :examples [],
   :id 6046,
   :name "try-expr",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6046"},
  "clojure.contrib.str-utils2/take"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1292,
   :name "take",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1292"},
  "clojure.test/*initial-report-counters*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6014,
   :name "*initial-report-counters*",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6014"},
  "incanter.stats/minkowski-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3348,
   :name "minkowski-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3348"},
  "circumspec.test/test-description"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3723,
   :name "test-description",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3723"},
  "clojure.contrib.repl-utils/show"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "method-sig",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1921",
     :line "19",
     :arglists_comp "[meth]",
     :url_friendly_name "method-sig",
     :file "clojure/core_proxy.clj"}],
   :examples
   [{:namespace_id 75,
     :ns "clojure.contrib.repl-utils",
     :updated_at "2012-09-07 04:26:44.0",
     :function "show",
     :version 1,
     :created_at "2012-09-07 04:26:44.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(show Integer)\n(show [])\n(show String 23)\n(show String \"case\")"}],
   :id 335,
   :name "show",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/335"},
  "incanter.processing/ALPHA"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3111,
   :name "ALPHA",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3111"},
  "lancet/ant-get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3409,
   :name "ant-get",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3409"},
  "incanter.processing/can-draw?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3178,
   :name "can-draw?",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3178"},
  "clojure.core/sequential?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1664",
     :line "131",
     :arglists_comp "[x]",
     :url_friendly_name "seq_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "coll?",
     :updated_at "2010-11-20 10:40:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2074",
     :line "4968",
     :arglists_comp "[x]",
     :url_friendly_name "coll_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-05 20:12:59.0",
     :function "sequential?",
     :version 5,
     :created_at "2010-09-18 22:51:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (sequential? '(1 2 3))\ntrue\n\nuser=> (sequential? [1 2 3])\ntrue\n\nuser => (sequential? (range 1 5))\ntrue\n\nuser=> (sequential? 1)\nfalse\n\nuser => (sequential? {:a 2 :b 1})\nfalse\n"}],
   :id 5747,
   :name "sequential?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5747"},
  "clojure.contrib.javadoc.browse/browse-url"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 540,
   :name "browse-url",
   :ns "clojure.contrib.javadoc.browse",
   :url "http://clojuredocs.org/v/540"},
  "clojure.core/*command-line-args*"
  {:comments [],
   :see-alsos
   [{:namespace_id 6,
     :weight 1,
     :name "with-command-line",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/45",
     :line "90",
     :arglists_comp "[args desc cmdspec & body]",
     :url_friendly_name "with-command-line",
     :file "clojure/contrib/command_line.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-24 06:30:01.0",
     :function "*command-line-args*",
     :version 1,
     :created_at "2011-02-24 06:30:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; If you save this program as showargs.clj on a Unix-like system, then the\n;; following command will produce the output shown.\n\n;; % java -classpath clojure-1.2.0.jar clojure.main showargs.clj arg1 2 \"whitespace in most command shells if you quote\"\n;; arg='arg1'\n;; arg='2'\n;; arg='whitespace in most command shells if you quote'\n;; \n;; \n;; Second arg is string 2, not number 2.\n\n(ns com.demo.showargs)\n\n(doseq [arg *command-line-args*]\n  (printf \"arg='%s'\\n\" arg))\n\n(if (= \"2\" (second *command-line-args*))\n  (println \"\\n\\nSecond arg is string 2, not number 2.\"))\n"}],
   :id 5292,
   :name "*command-line-args*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5292"},
  "clojure.contrib.lazy-seqs/powers-of-2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 611,
   :name "powers-of-2",
   :ns "clojure.contrib.lazy-seqs",
   :url "http://clojuredocs.org/v/611"},
  "clojure.core/print-ctor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5670,
   :name "print-ctor",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5670"},
  "clojure.core/vary-meta"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "with-meta",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/1651",
     :line "186",
     :arglists_comp "[obj m]",
     :url_friendly_name "with-meta",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:09:31.0",
     :function "vary-meta",
     :version 3,
     :created_at "2010-08-02 12:13:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (meta (vary-meta 'foo assoc :a 1))\n{:a 1}\n"}],
   :id 5831,
   :name "vary-meta",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5831"},
  "clojure.zip/down"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6100,
   :name "down",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6100"},
  "clojure.core/byte-array"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 14:42:39.0",
     :function "byte-array",
     :version 2,
     :created_at "2011-08-21 13:51:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of bytes\n;; and demonstrate that you can use it in the standard Java fill function\n;; note the needed byte coercion in the fill function call\n\nuser=> (def bees (byte-array 10))\n#'user/bees\n\nuser=> (for [i (range 10)](aset-byte bees i (* i i)))\n(0 1 4 9 16 25 36 49 64 81)\n\nuser=> (vec bees)\n[0 1 4 9 16 25 36 49 64 81]\n\nuser=> (java.util.Arrays/fill bees (byte 122))\nnil\nuser=> (vec bees)\n[122 122 122 122 122 122 122 122 122 122]\nuser=>"}],
   :id 5399,
   :name "byte-array",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5399"},
  "circumspec/run-tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3598,
   :name "run-tests",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3598"},
  "clojure.core/definterface"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-24 06:01:26.0",
     :function "definterface",
     :version 2,
     :created_at "2011-02-24 05:51:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Part of a definterface from a Clojure program for the n-body problem\n;; at the Computer Language Benchmarks Game web site.\n;; For the rest of the program using it, see:\n;; http://github.com/jafingerhut/clojure-benchmarks/blob/master/nbody/nbody.clj-14.clj\n\n;; Currently Clojure does not permit type hints of arrays, e.g. ^ints as\n;; argument types or return types in a definterface.  This may be enhanced\n;; later.\n\n(definterface IBody\n  (^String name [])  ;; return type String, no arguments\n  (^double mass [])  ;; return type double\n  (^double x [])\n  (clone [] \"returns copy of self\")   ; return type defaults to ^Object\n  ;; 3 arguments of type double.  A deftype that implements this interface\n  ;; must implement the method p!  The definterface must use:\n  ;; _BANG_ for ! in Clojure method name\n  ;; _PLUS_ for +\n  ;; _ for -\n  (p_BANG_ [^double x ^double y ^double z] \"set pos.\")\n  ;; After name demangling, this must be implemented by Clojure method named v+!\n  (v_PLUS__BANG_ [^double vx ^double vy ^double vz] \"add to velocity\"))\n"}],
   :id 5449,
   :name "definterface",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5449"},
  "swank.util.string/char-position"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4010,
   :name "char-position",
   :ns "swank.util.string",
   :url "http://clojuredocs.org/v/4010"},
  "clojure.contrib.error-kit/bind-continue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 286,
   :name "bind-continue",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/286"},
  "clojure.contrib.generic.math-functions/exp"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 428,
   :name "exp",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/428"},
  "clojure.zip/root"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6119,
   :name "root",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6119"},
  "incanter.processing/CORNERS"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3251,
   :name "CORNERS",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3251"},
  "circumspec/for-these"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3593,
   :name "for-these",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3593"},
  "clojure.core/ancestors"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "parents",
     :updated_at "2011-08-21 16:03:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1834",
     :line "4421",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "parents",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "derive",
     :updated_at "2011-08-10 13:56:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1595",
     :line "4462",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "derive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "underive",
     :updated_at "2011-08-21 14:30:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1964",
     :line "4498",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "underive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "descendants",
     :updated_at "2011-08-21 16:07:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1641",
     :line "4450",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "descendants",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "make-hierarchy",
     :updated_at "2011-08-20 20:11:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1637",
     :line "4367",
     :arglists_comp "[]",
     :url_friendly_name "make-hierarchy",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "isa?",
     :updated_at "2011-08-10 13:56:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1711",
     :line "4400",
     :arglists_comp "[child parent]|[h child parent]",
     :url_friendly_name "isa_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 16:09:55.0",
     :function "ancestors",
     :version 2,
     :created_at "2011-08-20 20:23:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; make up a hierarchy a beagle is a sporting breed is a dog is a quadraped is an \n;; animal\n\nuser=> (derive ::quadruped ::animal)\nnil\nuser=> (derive ::dog ::quadruped)\nnil\nuser=> (derive ::sporting_breed ::dog)\nnil\nuser=> (derive ::beagle ::sporting_breed)\nnil\nuser=> (ancestors ::beagle)\n#{:user/dog :user/sporting_breed :user/animal :user/quadruped}\nuser=>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 16:22:26.0",
     :function "ancestors",
     :version 1,
     :created_at "2011-08-21 16:22:26.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; use ancestors to show which classes ArrayList derives from and which\n;; interfaces it implements\n\nuser=> (ancestors java.util.ArrayList)\n#{java.util.Collection java.util.AbstractList java.io.Serializable java.lang.Cloneable java.util.List java.lang.Object java.util.AbstractCollection java.util.RandomAccess java.lang.Iterable}\nuser=>"}],
   :id 5351,
   :name "ancestors",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5351"},
  "clojure.core/some"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-26 02:26:42.0",
     :user_id 763,
     :function "some",
     :version "1.3.0",
     :created_at "2012-10-26 02:26:42.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Be careful about using sets as predicates if you don't know what is in the set.\nIn particular, <pre>(#{nil} nil)</pre> is <pre>nil</pre> and <pre>(#{false} false)</pre> is <pre>false</pre> Consider using <pre>contains?</pre> instead."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "every?",
     :updated_at "2011-07-16 14:22:36.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/2085",
     :line "2026",
     :arglists_comp "[pred coll]",
     :url_friendly_name "every_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "not-any?",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1809",
     :line "2055",
     :arglists_comp "[pred coll]",
     :url_friendly_name "not-any_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "keep",
     :updated_at "2011-05-25 03:28:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2108",
     :line "5638",
     :arglists_comp "[f coll]",
     :url_friendly_name "keep",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "keep-indexed",
     :updated_at "2011-05-25 03:31:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1683",
     :line "5660",
     :arglists_comp "[f coll]",
     :url_friendly_name "keep-indexed",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-13 18:44:39.0",
     :function "some",
     :version 2,
     :created_at "2010-07-13 18:44:39.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (some even? '(1 2 3 4))\r\ntrue\r\nuser=> (some even? '(1 3 5 7))\r\nnil</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-17 14:39:42.0",
     :function "some",
     :version 2,
     :created_at "2010-07-17 14:39:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (some true? [false false false])\r\nnil\r\nuser=> (some true? [false true false])\r\ntrue\r\nuser=> (some true? [true true true])\r\ntrue\r\n</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-17 18:18:28.0",
     :function "some",
     :version 2,
     :created_at "2010-07-17 18:18:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (some #(= 5 %) [1 2 3 4 5])\r\ntrue\r\nuser=&gt; (some #(= 5 %) [6 7 8 9 10])\r\nnil</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-02-12 12:09:44.0",
     :function "some",
     :version 1,
     :created_at "2011-02-12 12:09:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (some #(when (even? %) %) '(1 2 3 4))\n2"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-16 13:52:43.0",
     :function "some",
     :version 1,
     :created_at "2011-07-16 13:52:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (some {2 \"two\" 3 \"three\"} [nil 3 2])\n\"three\""}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-28 19:27:12.0",
     :function "some",
     :version 1,
     :created_at "2011-08-28 19:27:12.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; some can be used as a substitute for (first (filter ...\n;; in most cases\n\nuser=> (first (filter even? [1 2 3 4]))\n2\nuser=> (some #(if (even? %) %) [1 2 3 4])\n2\nuser=>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-31 14:14:09.0",
     :function "some",
     :version 2,
     :created_at "2011-08-31 02:17:38.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; find a whether a word is in a list of words.\n(def word \"foo\")\n(some (partial = word) words)"}],
   :id 5759,
   :name "some",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5759"},
  "clj-swing.button/*button-known-keys*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5158,
   :name "*button-known-keys*",
   :ns "clj-swing.button",
   :url "http://clojuredocs.org/v/5158"},
  "clojure.core/new"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name ".",
     :updated_at "2010-10-20 04:44:12.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5278",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "_dot",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-16 03:46:45.0",
     :function "new",
     :version 1,
     :created_at "2011-08-16 03:46:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Create a Java ArrayList using the 0 argument constructor\nuser=> (def a  (new java.util.ArrayList))\n#'user/a\nuser=> (.add a \"aaa\")\ntrue\nuser=> (.add a \"bbb\")\ntrue\nuser=> a\n#<ArrayList [aaa, bbb]>\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-16 03:47:09.0",
     :function "new",
     :version 1,
     :created_at "2011-08-16 03:47:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Create another ArrayList and add integers using the doto macro\nuser=> (def ai (doto (new java.util.ArrayList) (.add 1) (.add 2) (.add 0)))\n#'user/ai\nuser=> ai\n#<ArrayList [1, 2, 0]>"}],
   :id 6136,
   :name "new",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6136"},
  "net.cgrand.xml/startparse-sax"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3952,
   :name "startparse-sax",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3952"},
  "clojure.core/defmulti"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-22 22:21:25.0",
     :user_id 174,
     :function "defmulti",
     :version "1.2.0",
     :created_at "2010-11-22 22:21:25.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "See also\n\nhttp://clojure.org/runtime_polymorphism\n\nhttp://clojure.org/multimethods\n\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "defmethod",
     :updated_at "2011-06-15 23:19:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1592",
     :line "1352",
     :arglists_comp "[multifn dispatch-val & fn-tail]",
     :url_friendly_name "defmethod",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-method",
     :updated_at "2011-08-21 02:30:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1528",
     :line "1364",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "remove-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "remove-all-methods",
     :updated_at "2011-08-21 02:46:57.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1882",
     :line "1358",
     :arglists_comp "[multifn]",
     :url_friendly_name "remove-all-methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "prefers",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1836",
     :line "1388",
     :arglists_comp "[multifn]",
     :url_friendly_name "prefers",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defprotocol",
     :updated_at "2010-11-15 06:13:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/2062",
     :line "576",
     :arglists_comp "[name & opts+sigs]",
     :url_friendly_name "defprotocol",
     :file "clojure/core_deftype.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-22 21:21:44.0",
     :function "defmulti",
     :version 1,
     :created_at "2010-11-22 21:21:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(defmulti service-charge (fn [acct] [(account-level acct) (:tag acct)]))\n(defmethod service-charge [::acc/Basic ::acc/Checking]   [_] 25)\n(defmethod service-charge [::acc/Basic ::acc/Savings]    [_] 10)\n(defmethod service-charge [::acc/Premium ::acc/Account] [_] 0)"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-31 01:50:41.0",
     :function "defmulti",
     :version 2,
     :created_at "2010-11-22 22:14:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";this example illustrates that the dispatch type\n;does not have to be a symbol, but can be anything (in this case, it's a string)\n\n(defmulti greeting\n  (fn[x] (x \"language\")))\n\n;params is not used, so we could have used [_]\n(defmethod greeting \"English\" [params]\n \"Hello!\")\n\n(defmethod greeting \"French\" [params]\n \"Bonjour!\")\n\n;;default handling\n(defmethod greeting :default [params]\n (throw (IllegalArgumentException. \n          (str \"I don't know the \" (params \"language\") \" language\"))))\n\n;then can use this like this:\n(def english-map {\"id\" \"1\", \"language\" \"English\"})\n(def  french-map {\"id\" \"2\", \"language\" \"French\"})\n(def spanish-map {\"id\" \"3\", \"language\" \"Spanish\"})\n\n=>(greeting english-map)\n\"Hello!\"\n=>(greeting french-map)\n\"Bounjour!\"\n=>(greeting spanish-map)\n java.lang.IllegalArgumentException: I don't know the Spanish language"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-12 18:02:04.0",
     :function "defmulti",
     :version 1,
     :created_at "2011-08-12 18:02:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Implementing factorial using multimethods Note that factorial-like function \n;; is best implemented using `recur` for enable tail-call optimization to avoid \n;; stack overflow error. This is a only a demonstration of clojure's multimethod\n\n;; identity form returns the same value passed\n(defmulti factorial identity)\n\n(defmethod factorial 0 [_]  1)\n(defmethod factorial :default [num] \n    (* num (factorial (dec num))))\n\n(factorial 0) ; => 1\n(factorial 1) ; => 1\n(factorial 3) ; => 6\n(factorial 7) ; => 5040"}],
   :id 5452,
   :name "defmulti",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5452"},
  "incanter.core/atan2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2892,
   :name "atan2",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2892"},
  "clojure.core/refer"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "refer-clojure",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/1665",
     :line "4647",
     :arglists_comp "[& filters]",
     :url_friendly_name "refer-clojure",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 7,
     :name "ns",
     :updated_at "2011-02-13 23:57:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1794",
     :line "4594",
     :arglists_comp "[name docstring? attr-map? references*]",
     :url_friendly_name "ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-11-22 05:03:51.0",
     :function "refer",
     :version 5,
     :created_at "2010-09-07 22:54:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (refer 'clojure.string :only '[capitalize trim])\nnil\n\nuser=> (capitalize (trim \" hOnduRAS  \"))\n\"Honduras\""}],
   :id 5713,
   :name "refer",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5713"},
  "clojure.contrib.zip-filter/mapcat-chain"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1434,
   :name "mapcat-chain",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1434"},
  "clojure.core/concat"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "conj",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1696",
     :line "71",
     :arglists_comp "[coll x]|[coll x & xs]",
     :url_friendly_name "conj",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "into",
     :updated_at "2011-07-09 22:43:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1813",
     :line "2608",
     :arglists_comp "[to from]",
     :url_friendly_name "into",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-23 15:42:45.0",
     :function "concat",
     :version 5,
     :created_at "2010-07-13 06:12:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\nuser=> (concat [1 2] [3 4])\n(1 2 3 4)\n\nuser=> (into [] (concat [1 2] [3 4]))\n[1 2 3 4]\n\nuser=> (concat [:a :b] nil [1 [2 3] 4])\n(:a :b 1 [2 3] 4)</pre>"}],
   :id 5430,
   :name "concat",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5430"},
  "circumspec.config/colorize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3624,
   :name "colorize",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3624"},
  "swank.util.concurrent.mbox/send"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4322,
   :name "send",
   :ns "swank.util.concurrent.mbox",
   :url "http://clojuredocs.org/v/4322"},
  "net.cgrand.enlive-html/append"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3831,
   :name "append",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3831"},
  "clojure.contrib.generic.math-functions/asin"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 425,
   :name "asin",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/425"},
  "clojure.core/contains?"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-19 06:33:49.0",
     :user_id 63,
     :function "contains?",
     :version "1.2.0",
     :created_at "2010-07-19 06:33:49.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "If like me you wanted to find a value in a collection and read this article then you'll need to find an alternative.  So instead of:\n<pre>\n(contains (1 2 3) 1)\n</pre>\nI used:\n<pre>\n(some #(= 1 %) (1 2 3))\n</pre>\n\nHope that helps."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-19 08:10:12.0",
     :user_id 46,
     :function "contains?",
     :version "1.2.0",
     :created_at "2010-07-19 08:10:12.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "For collections I use the `java.util.Collection#contains()` method:\n\n<pre>\nuser=> (.contains [1 2 3] 1)\ntrue\nuser=> (.contains [1 2 3] 4)\nfalse\n</pre>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-11-27 15:23:15.0",
     :user_id 641,
     :function "contains?",
     :version "1.3.0",
     :created_at "2012-11-27 15:23:15.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "As Rich points out on the ML: \n\n`contains?` tells you whether or not `get` will succeed. It is not a \"rummager\".\n\n`contains?` and `get` abstract over fast lookup.\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 7,
     :name "some",
     :updated_at "2011-08-31 02:17:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1541",
     :line "2045",
     :arglists_comp "[pred coll]",
     :url_friendly_name "some",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1941",
     :line "1154",
     :arglists_comp "[map key]|[map key not-found]",
     :url_friendly_name "get",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2013-01-18 13:32:18.0",
     :function "contains?",
     :version 5,
     :created_at "2010-07-10 21:16:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; `contains?` is straightforward for maps:\nuser=> (contains? {:a 1} :a)\ntrue\nuser=> (contains? {:a nil} :a)\ntrue\nuser=> (contains? {:a 1} :b)\nfalse\n\n\n;; It's likely to surprise you for other sequences because it's \n;; about *indices*, not *contents*:\n\nuser=> (contains? [:a :b :c] :b)\nfalse\n\nuser=> (contains? [:a :b :c] 2)\ntrue\n\nuser=> (contains? \"f\" 0)\ntrue\n\nuser=> (contains? \"f\" 1)\nfalse\n\n\n;; It can be applied to non-sequences:\n\nuser=> (contains? 5 3)\nfalse\n\n\n;; Although lists are sequences, `contains?` seems to always return\n;; `false` for them. (Clojure 1.1)\n\nuser=> (contains? '(1 2 3) 1) => false\n\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-03 03:39:09.0",
     :function "contains?",
     :version 1,
     :created_at "2011-06-03 03:39:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Can be used to test set membership\nuser=> (def s #{\"a\" \"b\" \"c\"})\n\nuser=> (contains? s \"a\")\ntrue\n\nuser=> (contains? s \"z\")\nfalse"}],
   :id 5438,
   :name "contains?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5438"},
  "circumspec.for-all/collection-generator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3676,
   :name "collection-generator",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3676"},
  "clojure.core/keys"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "vals",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1625",
     :line "1216",
     :arglists_comp "[map]",
     :url_friendly_name "vals",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "hash-map",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2064",
     :line "321",
     :arglists_comp "[]|[& keyvals]",
     :url_friendly_name "hash-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "key",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1790",
     :line "1221",
     :arglists_comp "[e]",
     :url_friendly_name "key",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-29 19:56:23.0",
     :function "keys",
     :version 2,
     :created_at "2010-07-29 19:56:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (keys {:keys :and, :some :values})\r\n(:keys :some)\r\n</pre>"}],
   :id 5574,
   :name "keys",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5574"},
  "circumspec.contrib-mocking/make-mock"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3642,
   :name "make-mock",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3642"},
  "swank.util.sys/get-pid"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4258,
   :name "get-pid",
   :ns "swank.util.sys",
   :url "http://clojuredocs.org/v/4258"},
  "swank.core/invoke-debugger"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4085,
   :name "invoke-debugger",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4085"},
  "incanter.stats/correlation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3362,
   :name "correlation",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3362"},
  "swank.core/spawn-repl-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4090,
   :name "spawn-repl-thread",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4090"},
  "incanter.core/sum-of-squares"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2881,
   :name "sum-of-squares",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2881"},
  "clojure.zip/node"
  {:comments
   [{:namespace_id 120,
     :ns "clojure.zip",
     :updated_at "2010-12-09 14:58:11.0",
     :user_id 174,
     :function "node",
     :version "1.2.0",
     :created_at "2010-12-09 14:58:11.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "See tutorial of clojure.zip at \nhttp://www.exampler.com/blog/2010/09/01/editing-trees-in-clojure-with-clojurezip/"}],
   :see-alsos [],
   :examples
   [{:namespace_id 120,
     :ns "clojure.zip",
     :updated_at "2010-12-09 14:57:36.0",
     :function "node",
     :version 3,
     :created_at "2010-12-09 14:55:44.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=>(require '[clojure.zip :as zip])\nnil\nuser=> (def original [1 '(a b c) 2])\n#'user/original\nuser=> (def root-loc (zip/seq-zip (seq original)))\n#'user/root-loc\n\nuser=> (zip/node (zip/down root-loc))\n1\n"}],
   :id 6111,
   :name "node",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6111"},
  "clojure.java.shell/with-sh-dir"
  {:comments [],
   :see-alsos
   [{:namespace_id 106,
     :weight 2,
     :name "sh",
     :updated_at "2011-08-17 16:12:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/2181",
     :line "79",
     :arglists_comp "[& args]",
     :url_friendly_name "sh",
     :file "clojure/java/shell.clj"}],
   :examples [],
   :id 5908,
   :name "with-sh-dir",
   :ns "clojure.java.shell",
   :url "http://clojuredocs.org/v/5908"},
  "incanter.processing/LINES"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3119,
   :name "LINES",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3119"},
  "clojure.contrib.pprint/compiled-format924"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5235,
   :name "compiled-format924",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5235"},
  "incanter.stats/dice-coefficient-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3296,
   :name "dice-coefficient-str",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3296"},
  "clojure.core/struct"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "defstruct",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/1601",
     :line "3115",
     :arglists_comp "[name & keys]",
     :url_friendly_name "defstruct",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 18:05:25.0",
     :function "struct",
     :version 1,
     :created_at "2010-12-29 18:05:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (defstruct mystruct :foo :bar)\n#'user/mystruct\n\nuser> (struct mystruct \"eggplant\" \"pizza\")\n{:foo \"eggplant\", :bar \"pizza\"}"}],
   :id 5774,
   :name "struct",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5774"},
  "incanter.processing/redraw"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2997,
   :name "redraw",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2997"},
  "incanter.processing/bezier-detail"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3058,
   :name "bezier-detail",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3058"},
  "lancet/style"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3454,
   :name "style",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3454"},
  "net.cgrand.enlive-html/only-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3929,
   :name "only-child",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3929"},
  "midje.unprocessed/falsey"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4356,
   :name "falsey",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4356"},
  "clojure.java.shell/with-sh-env"
  {:comments [],
   :see-alsos
   [{:namespace_id 106,
     :weight 2,
     :name "sh",
     :updated_at "2011-08-17 16:12:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/2181",
     :line "79",
     :arglists_comp "[& args]",
     :url_friendly_name "sh",
     :file "clojure/java/shell.clj"}],
   :examples [],
   :id 5909,
   :name "with-sh-env",
   :ns "clojure.java.shell",
   :url "http://clojuredocs.org/v/5909"},
  "clojure.contrib.singleton/per-thread-singleton"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1225,
   :name "per-thread-singleton",
   :ns "clojure.contrib.singleton",
   :url "http://clojuredocs.org/v/1225"},
  "clojure.contrib.error-kit/raise*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 290,
   :name "raise*",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/290"},
  "clojure.core/vector-of"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "vec",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1690",
     :line "313",
     :arglists_comp "[coll]",
     :url_friendly_name "vec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "vector",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1693",
     :line "302",
     :arglists_comp "[]|[a]|[a b]|[a b c]|[a b c d]|[a b c d & args]",
     :url_friendly_name "vector",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "vector?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1723",
     :line "155",
     :arglists_comp "[x]",
     :url_friendly_name "vector_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-17 01:15:09.0",
     :function "vector-of",
     :version 2,
     :created_at "2010-09-17 01:15:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (conj (vector-of :int) 1 2 3)\r\n[1 2 3]  ; <-- note, these are unboxes internally\r\n\r\nuser=> (type (conj (vector-of :int) 1 2 3))\r\nclojure.core.Vec\r\n</pre>"}],
   :id 5834,
   :name "vector-of",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5834"},
  "clojure.core/val"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-08-20 02:16:43.0",
     :user_id 691,
     :function "val",
     :version "1.3.0",
     :created_at "2012-08-06 23:23:03.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "This is my first attempt at using this site to gain an understanding of a closure function. Two of the examples above seem incorrect.  \n\nExample 3(?) seems to have nothing to do with val  \n\n(notice the lack of example identifiers)\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "vals",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1625",
     :line "1216",
     :arglists_comp "[map]",
     :url_friendly_name "vals",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:04:55.0",
     :function "val",
     :version 3,
     :created_at "2010-08-02 12:35:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (map val {:a 1 :b 2})\n(1 2)\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-05 08:24:54.0",
     :function "val",
     :version 1,
     :created_at "2010-11-05 08:24:54.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "(val (first {:one :two}))\n:two"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-05 08:28:05.0",
     :function "val",
     :version 1,
     :created_at "2010-11-05 08:28:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body ";syntactic sugar for (val)\n(:doc (meta #'meta))"}],
   :id 5826,
   :name "val",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5826"},
  "clojure.core/some-fn"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 1,
     :name "every-pred",
     :updated_at "2012-04-26 02:13:27.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:05:32.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5494",
     :line "6381",
     :arglists_comp "[p]|[p1 p2]|[p1 p2 p3]|[p1 p2 p3 & ps]",
     :url_friendly_name "every-pred",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-11-15 05:41:18.0",
     :function "some-fn",
     :version 1,
     :created_at "2011-11-15 05:41:18.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "<pre>\nuser=> ((some-fn even?) 1)\nfalse\nuser=> ((some-fn even?) 2)\ntrue\nuser=> ((some-fn even?) 1 2)\ntrue\n</pre>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-31 15:51:35.0",
     :function "some-fn",
     :version 1,
     :created_at "2012-07-31 15:51:35.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; `some-fn` is useful for when you'd use `some` (to find out if any\n;; values in a given coll satisfy some predicate), but have more than\n;; one predicate. For example, to check if any values in a coll are\n;; either even or less than 10:\n\n(or (some even? [1 2 3])\n    (some #(< % 10) [1 2 3]))\n\n;; but `some-fn` can save you some duplication here:\n\n((some-fn even? #(< % 10)) 1 2 3)\n\n;; Minor note: the former returns nil if it doesn't find\n;; what it's looking for. The latter returns false."}],
   :id 5760,
   :name "some-fn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5760"},
  "incanter.processing/end-camera"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3210,
   :name "end-camera",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3210"},
  "incanter.processing/screen-x"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3207,
   :name "screen-x",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3207"},
  "clojure.contrib.probabilities.finite-distributions/choose"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1077,
   :name "choose",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1077"},
  "incanter.processing/seconds"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3055,
   :name "seconds",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3055"},
  "incanter.processing/PROBLEM"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3060,
   :name "PROBLEM",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3060"},
  "clj-ssh.ssh/*ssh-agent*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1490,
   :name "*ssh-agent*",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1490"},
  "incanter.core/det"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2890,
   :name "det",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2890"},
  "clojure.contrib.zip-filter/auto"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1435,
   :name "auto",
   :ns "clojure.contrib.zip-filter",
   :url "http://clojuredocs.org/v/1435"},
  "clojure.contrib.datalog.database/add-tuple"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 189,
   :name "add-tuple",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/189"},
  "net.cgrand.enlive-html/re-pred"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3873,
   :name "re-pred",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3873"},
  "circumspec.watch/last-watched"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3765,
   :name "last-watched",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3765"},
  "swank.loader/delete-file-recursive"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4296,
   :name "delete-file-recursive",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4296"},
  "incanter.charts/add-text"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2818,
   :name "add-text",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2818"},
  "clojure.contrib.except/throw-if"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 295,
   :name "throw-if",
   :ns "clojure.contrib.except",
   :url "http://clojuredocs.org/v/295"},
  "clojure.core/aget"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-10 21:07:16.0",
     :function "aget",
     :version 2,
     :created_at "2010-09-10 21:07:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\n;; create two arrays\r\nuser=> (def a1 (double-array '(1.0 2.0 3.0 4.0)))\r\n#'user/a1\r\nuser=> (def a2 (int-array '(9 8 7 6)))\r\n#'user/a2\r\n\r\n;; get an item by index\r\nuser=> (aget a1 2)\r\n3.0\r\nuser=> (aget a2 3)\r\n6\r\n\r\n;; 2d array and 2 indicies\r\nuser=> (def a3 (make-array Integer/TYPE 100 100))\r\n#'user/a3\r\nuser=> (aget a3 23 42)\r\n0\r\n</pre>"}],
   :id 5343,
   :name "aget",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5343"},
  "circumspec.story/then"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3758,
   :name "then",
   :ns "circumspec.story",
   :url "http://clojuredocs.org/v/3758"},
  "clojure.core/unchecked-char"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5802,
   :name "unchecked-char",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5802"},
  "clojure.contrib.probabilities.monte-carlo/discrete"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1099,
   :name "discrete",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1099"},
  "circumspec.config/test-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3628,
   :name "test-dir",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3628"},
  "clojure.contrib.pprint/pprint-code-symbol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1013,
   :name "pprint-code-symbol",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1013"},
  "circumspec.test/rewrite-=>"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3738,
   :name "rewrite-=>",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3738"},
  "net.cgrand.enlive-html/defsnippets"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3869,
   :name "defsnippets",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3869"},
  "leiningen.compile/*silently*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3514,
   :name "*silently*",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3514"},
  "clojure.java.io/make-reader"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5891,
   :name "make-reader",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5891"},
  "incanter.core/$where"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2877,
   :name "$where",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2877"},
  "clojure.contrib.stream-utils/stream-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1308,
   :name "stream-type",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1308"},
  "clojure.core/unchecked-inc-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5809,
   :name "unchecked-inc-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5809"},
  "clojure.java.io/make-input-stream"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 0,
     :name "IOFactory",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2162",
     :line "63",
     :arglists_comp "",
     :url_friendly_name "iofactory",
     :file "clojure/java/io.clj"}],
   :examples [],
   :id 5888,
   :name "make-input-stream",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5888"},
  "clojure.contrib.base64/counter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3793,
   :name "counter",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3793"},
  "lancet/safe-ant-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3406,
   :name "safe-ant-name",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3406"},
  "clojure.core/with-bindings*"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-27 22:42:41.0",
     :function "with-bindings*",
     :version 1,
     :created_at "2012-04-27 22:42:41.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (let [f (fn [] *warn-on-reflection*)]\n         (with-bindings* {#'*warn-on-reflection* true} f))\ntrue"}],
   :id 5842,
   :name "with-bindings*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5842"},
  "circumspec.watch/try-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3771,
   :name "try-ns",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3771"},
  "incanter.charts/bland-altman-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2833,
   :name "bland-altman-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2833"},
  "clojure.contrib.sql/delete-rows"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 83,
     :ns "clojure.contrib.sql",
     :updated_at "2010-09-26 04:33:15.0",
     :function "delete-rows",
     :version 3,
     :created_at "2010-07-14 19:33:16.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";;\n;; the first line allows us to say sql/with-connection instead of\n;; clojure.contrib.sql/with-connection\n;;\n\n(require '[clojure.contrib.sql :as sql])\n\n(defn delete-blog\n  \"Deletes a blog entry given the id\"\n  [id]\n  (sql/with-connection db\n    (sql/delete-rows :blogs [\"id=?\" id])))\n\n\n\n;; From http://en.wikibooks.org/wiki/Clojure_Programming/Examples/JDBC_Examples#DELETE"}],
   :id 1253,
   :name "delete-rows",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1253"},
  "net.cgrand.enlive-html/html-snippet"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3868,
   :name "html-snippet",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3868"},
  "clojure.pprint/fresh-line"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5934,
   :name "fresh-line",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5934"},
  "clojure.contrib.pprint.pretty-writer/set-miser-width"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 923,
   :name "set-miser-width",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/923"},
  "clojure.core/find-keyword"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5506,
   :name "find-keyword",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5506"},
  "clojure.contrib.core/-?>"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "->>",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/1660",
     :line "1296",
     :arglists_comp "[x form]|[x form & more]",
     :url_friendly_name "->>",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "->",
     :updated_at "2011-01-03 08:13:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1872",
     :line "1284",
     :arglists_comp "[x]|[x form]|[x form & more]",
     :url_friendly_name "->",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 11,
     :ns "clojure.contrib.core",
     :updated_at "2011-08-03 03:52:13.0",
     :function "-?>",
     :version 1,
     :created_at "2011-08-03 03:52:13.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     ";; -?>> can be used if intermediate forms may potentially return nil. \n;; This is to prevent \n\nuser=> (use '[clojure.contrib.core :only (-?>>)])\nnil\n\n;; create function that will return nil if the passed value is \"Hello\"\n\nuser=> (defn return-nil-for-hello [str-value] \n\t\t(if (= str-value \"Hello\") \n\t\t\tnil \n\t\t\tstr-value))\n#'user/return-nil\n\nuser=> (->> \"Greetings\" return-nil-for-hello .toUpperCase)\n\"GREETINGS\"\n\n;; null pointer exception is thrown because return-nil-for-hello\n;; returns nil and method .toUpperCase cannot process nil\n\nuser=> (->> \"Hello\" return-nil-for-hello .toUpperCase)\nNullPointerException   clojure.lang.Reflector.invokeNoArgInstanceMember (Reflector.java:314)\n\n;; using -?>> will prevent null exception thrown\nuser=> (-?>> \"Hello\" return-nil-for-hello .toUpperCase)\nnil"}],
   :id 84,
   :name "-?>",
   :ns "clojure.contrib.core",
   :url "http://clojuredocs.org/v/84"},
  "incanter.processing/save-font"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3253,
   :name "save-font",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3253"},
  "clojure.core/partial"
  {:comments [],
   :see-alsos
   [{:namespace_id 86,
     :weight 1,
     :name "partial",
     :updated_at "2012-04-19 19:03:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:59:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/1282",
     :line "326",
     :arglists_comp "[f & args]",
     :url_friendly_name "partial",
     :file "clojure/contrib/str_utils2.clj"}
    {:namespace_id 99,
     :weight 6,
     :name "comp",
     :updated_at "2011-08-21 18:12:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1850",
     :line "1936",
     :arglists_comp "[f]|[f g]|[f g h]|[f1 f2 f3 & fs]",
     :url_friendly_name "comp",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "juxt",
     :updated_at "2011-02-12 17:43:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/2058",
     :line "1965",
     :arglists_comp "[f]|[f g]|[f g h]|[f g h & fs]",
     :url_friendly_name "juxt",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:51:47.0",
     :function "partial",
     :version 4,
     :created_at "2010-07-13 13:35:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def to-english (partial clojure.pprint/cl-format nil \"~@(~@[~R~]~^ ~A.~)\"))\n#'user/to-english\n\nuser=> (to-english 1234567890)\n\"One billion, two hundred thirty-four million, five hundred sixty-seven thousand, eight hundred ninety\"\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-08 03:16:11.0",
     :function "partial",
     :version 5,
     :created_at "2010-07-13 13:39:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def hundred-times (partial * 100))\n#'user/hundred-times\n\nuser=> (hundred-times 5)\n500\n\nuser=> (hundred-times 4 5 6)\n12000\n\nuser=> (def add-hundred (partial + 100))\n#'user/add-hundred\n\nuser=> (add-hundred 5)\n105\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-10-12 07:51:24.0",
     :function "partial",
     :version 3,
     :created_at "2011-10-04 08:57:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def subtract-from-hundred (partial - 100))\n\nuser=> (subtract-from-hundred 10)      ; same as (- 100 10)\n90\n\nuser=> (subtract-from-hundred 10 20)   ; same as (- 100 10 20)\n70"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 08:30:51.0",
     :function "partial",
     :version 1,
     :created_at "2012-06-09 08:30:51.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "; Maps exponent to coefficient\n; x^3 + 2x + 1\n(def poly (fn [n]\n\t\t\t(cond\n\t\t\t\t(= 0 n) 1\n\t\t\t\t(= 1 n) 2\n\t\t\t\t(= 3 n) 1\n\t\t\t\t:else 0)\n\t\t\t)\n)\n\n; Differentiates input by returning a polynomial that is curried\n; 3x^2 + 2\n(defn diff [p]\n\t\t(partial (fn [p n] (* (+ 1 n) (p (+ 1 n)))) p)\n\t)\n\n(poly 3)\n;=> 1\n((diff poly) 3)\n;=> 0\n((diff poly) 2)\n;=> 3\n"}],
   :id 5652,
   :name "partial",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5652"},
  "net.cgrand.enlive-html/attr-contains"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3872,
   :name "attr-contains",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3872"},
  "clojure.java.io/as-url"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 104,
     :ns "clojure.java.io",
     :updated_at "2011-05-24 13:47:41.0",
     :function "as-url",
     :version 1,
     :created_at "2011-05-24 13:47:41.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(use '[clojure.java.io :only (as-url)])\n(import 'java.io.File)\n\nuser=> (as-url nil)\nnil\n\nuser=> (as-url (File. \"/tmp\"))\n#<URL file:/tmp/>\n\nuser=> (as-url \"http://clojuredocs.org\")\n#<URL http://clojuredocs.org>\n\nuser=> (as-url \"http://clojuredocs.org:8080\")\n#<URL http://clojuredocs.org:8080>\n\nuser=> (as-url \"clojuredocs.org\")\n#<CompilerException java.net.MalformedURLException: no protocol: clojuredocs.org>\n\n\n\n\n\n"}],
   :id 5882,
   :name "as-url",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5882"},
  "swank.loader/file-directory?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4294,
   :name "file-directory?",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4294"},
  "clojure.contrib.pprint/pprint-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 902,
   :name "pprint-list",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/902"},
  "incanter.core/to-matrix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2925,
   :name "to-matrix",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2925"},
  "incanter.censored/censored-variance-lower"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2758,
   :name "censored-variance-lower",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2758"},
  "clojure.contrib.base64/encode-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 39,
   :name "encode-str",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/39"},
  "clojure.contrib.jmx.Bean/-getMBeanInfo"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 582,
   :name "-getMBeanInfo",
   :ns "clojure.contrib.jmx.Bean",
   :url "http://clojuredocs.org/v/582"},
  "clojure.core/list?"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-10-15 13:46:17.0",
     :user_id 106,
     :function "list?",
     :version "1.3.0",
     :created_at "2011-10-15 13:46:17.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "You may want to use `seq?` instead of `list?`, especially if you might be dealing with a lazy sequence as returned by `filter`, `range`, etc."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "seq?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/1664",
     :line "131",
     :arglists_comp "[x]",
     :url_friendly_name "seq_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sequential?",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1522",
     :line "5000",
     :arglists_comp "[coll]",
     :url_friendly_name "sequential_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "coll?",
     :updated_at "2010-11-20 10:40:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2074",
     :line "4968",
     :arglists_comp "[x]",
     :url_friendly_name "coll_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-10-15 13:32:15.0",
     :function "list?",
     :version 4,
     :created_at "2010-07-13 19:23:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (list? '(1 2 3))\ntrue\nuser=> (list? (list 1 2))\ntrue\nuser=> (list? 0)\nfalse\nuser=> (list? {})\nfalse\nuser=> (list? [])\nfalse\nuser=> (list? (range 10))\nfalse\n"}],
   :id 5585,
   :name "list?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5585"},
  "clj-ssh.ssh/memfn-varargs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1462,
   :name "memfn-varargs",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1462"},
  "incanter.optimize/non-linear-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2983,
   :name "non-linear-model",
   :ns "incanter.optimize",
   :url "http://clojuredocs.org/v/2983"},
  "clojure.contrib.pprint.utilities/prlabel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 979,
   :name "prlabel",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/979"},
  "lancet/echo"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3418,
   :name "echo",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3418"},
  "incanter.charts/pie-chart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2795,
   :name "pie-chart",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2795"},
  "clj-swing.document/string-ref-content"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5179,
   :name "string-ref-content",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5179"},
  "clojure.set/index"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "hash-map",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2064",
     :line "321",
     :arglists_comp "[]|[& keyvals]",
     :url_friendly_name "hash-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1941",
     :line "1154",
     :arglists_comp "[map key]|[map key not-found]",
     :url_friendly_name "get",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2012-10-06 05:56:02.0",
     :function "index",
     :version 7,
     :created_at "2010-07-12 21:54:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(use '[clojure.set :only (index)])\n\n;; Suppose you have a set of descriptions of the weights of animals:\n\nuser=> (def weights #{ {:name 'betsy :weight 1000}\n                       {:name 'jake :weight 756}\n                       {:name 'shyq :weight 1000} })\n\n\n;; You want the names of all the animals that weight 1000. One way to do \n;; that uses `index`. First, you can group the set elements (the maps) so\n;; that those with the same weights are in the same group.\n\nuser=> (def by-weight (index weights [:weight]))\n#'user/by-weight\n\n;; index returns a map.  The keys are maps themselves, where {:weight 756} and {:weight 1000} are taken from the maps in the weights set.  The values in the map returned by index are sets that contain map entries from the above weights set.\n\nuser=> by-weight\n{{:weight 756} #{{:name jake, :weight 756}}, \n {:weight 1000} #{{:name shyq, :weight 1000} \n                  {:name betsy, :weight 1000}}}\n\n\n;; To better visualize the by-weight map that is returned by index, you can query it using get, using {:weight 756} as the key.  This will return all the maps (animals) that contain a weight of 756.  In this case, there is only one result, which is a set containing a single map. \n\nuser=> (get by-weight {:weight 756})\n#{{:name jake, :weight 756}}\n\n\n;; To see that there are two animals with a weight of 1000, you can query by-weight with the key {:weight 1000}.  This returns a set containing two maps.\n\nuser=> (get by-weight {:weight 1000})\n#{{:name shyq, :weight 1000} {:name betsy :weight 1000}}\n \n\n;; You can verify by using count\n\nuser=> (count (get by-weight {:weight 1000}))\n2\n\n\n;; To get the names of those two animals we can map a name-extracting function\n;; over the set of two maps. Since a keyword in a map is also a function that\n;; returns its corresponding value, we can just use `:name` as our function:\n\nuser=> (map :name (get by-weight {:weight 1000}))\n(shyq betsy)\n"}],
   :id 5980,
   :name "index",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5980"},
  "midje.semi-sweet/call-being-tested"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4336,
   :name "call-being-tested",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4336"},
  "lancet/cvspass"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3407,
   :name "cvspass",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3407"},
  "clojure.contrib.base64/element"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3791,
   :name "element",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3791"},
  "clojure.contrib.generic.collection/get"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 396,
   :name "get",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/396"},
  "clojure.core/unchecked-subtract-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5819,
   :name "unchecked-subtract-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5819"},
  "clojure.contrib.pprint/two-forms"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1002,
   :name "two-forms",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1002"},
  "clojure.contrib.dataflow/build-standard-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 142,
   :name "build-standard-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/142"},
  "clojure.contrib.string/lower-case"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1315,
   :name "lower-case",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1315"},
  "clojure.contrib.seq/positions"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 76,
     :ns "clojure.contrib.seq",
     :updated_at "2010-12-04 13:36:22.0",
     :function "positions",
     :version 1,
     :created_at "2010-12-04 13:36:22.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body "(positions vector? '( 1 2 [ 3 4] 5 [6 7])) \n(2 4)"}],
   :id 1165,
   :name "positions",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1165"},
  "clojure.contrib.datalog.rules/predicate-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 164,
   :name "predicate-map",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/164"},
  "clojure.contrib.probabilities.monte-carlo/normal-box-muller"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1105,
   :name "normal-box-muller",
   :ns "clojure.contrib.probabilities.monte-carlo",
   :url "http://clojuredocs.org/v/1105"},
  "clojure.contrib.duck-streams/make-parents"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 261,
   :name "make-parents",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/261"},
  "clj-swing.frame/set-constraint!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5200,
   :name "set-constraint!",
   :ns "clj-swing.frame",
   :url "http://clojuredocs.org/v/5200"},
  "clojure.contrib.test-is/*report-counters*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1389,
   :name "*report-counters*",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1389"},
  "swank.util.concurrent.thread/dothread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4100,
   :name "dothread",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4100"},
  "ring.util.codec/url-encode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2652,
   :name "url-encode",
   :ns "ring.util.codec",
   :url "http://clojuredocs.org/v/2652"},
  "clojure.contrib.stream-utils/stream-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1307,
   :name "stream-map",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1307"},
  "clojure.reflect/resolve-class"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 341,
     :ns "clojure.reflect",
     :updated_at "2012-10-24 19:34:39.0",
     :function "resolve-class",
     :version 1,
     :created_at "2012-10-24 19:34:39.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;Check if class c exists on the classpath\n(use '[clojure.reflect :only [resolve-class]])\n\n(defn class-exists? [c] \n  (resolve-class (.getContextClassLoader (Thread/currentThread)) c))\n\nuser=> (class-exists? 'org.joda.time.DateTime) \nnil"}],
   :id 5963,
   :name "resolve-class",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5963"},
  "clojure.core/*read-eval*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "read",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1635",
     :line "2872",
     :arglists_comp
     "[]|[stream]|[stream eof-error? eof-value]|[stream eof-error? eof-value recursive?]",
     :url_friendly_name "read",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "read-string",
     :updated_at "2012-08-20 22:21:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1707",
     :line "2894",
     :arglists_comp "[s]",
     :url_friendly_name "read-string",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "load",
     :updated_at "2011-06-12 20:39:31.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1857",
     :line "4887",
     :arglists_comp "[& paths]",
     :url_friendly_name "load",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-20 12:19:20.0",
     :function "*read-eval*",
     :version 2,
     :created_at "2012-01-20 12:19:10.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;just from the doc\n\n(binding [*read-eval* false] (read-string \"#=(eval (def x 3))\"))\n=> EvalReader not allowed when *read-eval* is false.\n  [Thrown class java.lang.RuntimeException]\n\n;;remove the anonymous function:\n\n(binding [*read-eval* false] (read-string \"(def x 3)\"))\n=> (def x 3)\n\n;;which is evaluable\n\n(eval (binding [*read-eval* false] (read-string \"(def x 3)\")))\n=> #'user/x\n\nx\n=>3"}],
   :id 5309,
   :name "*read-eval*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5309"},
  "clojure.contrib.dataflow/eval-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 111,
   :name "eval-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/111"},
  "clj-swing.example/clj_swing.example.proxy$java.lang.Object$TreeSelectionListener$967501a6"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5190,
   :name
   "clj_swing.example.proxy$java.lang.Object$TreeSelectionListener$967501a6",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5190"},
  "incanter.core/query-dataset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2864,
   :name "query-dataset",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2864"},
  "leiningen.uberjar/include-dep"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3586,
   :name "include-dep",
   :ns "leiningen.uberjar",
   :url "http://clojuredocs.org/v/3586"},
  "clojure.contrib.str-utils2/ltrim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1277,
   :name "ltrim",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1277"},
  "clojure.contrib.probabilities.random-numbers/lcg"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1110,
   :name "lcg",
   :ns "clojure.contrib.probabilities.random-numbers",
   :url "http://clojuredocs.org/v/1110"},
  "clojure.core/nnext"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-08-05 11:36:02.0",
     :function "nnext",
     :version 2,
     :created_at "2010-08-05 11:36:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (nnext '(1 2 3))\r\n(3)\r\n</pre>\r\n\r\n<pre>user=&gt; (nnext [])\r\nnil \r\n</pre>\r\n\r\n<pre>user=&gt; (nnext ['(a b c) '(b a c) '(c b a) '(a c b)])\r\n((c b a) (a c b)) \r\n</pre>\r\n\r\n<pre>user=&gt; (nnext {:a 1, :b 2, :c 3, :d 4})\r\n([:c 3] [:d 4]) \r\n</pre>\r\n\r\n<pre>user=&gt; (nnext #{:a :b :c})\r\n(:c)\r\n</pre>\r\n"}],
   :id 5625,
   :name "nnext",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5625"},
  "clojure.contrib.generic.comparison/pos?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 406,
   :name "pos?",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/406"},
  "incanter.processing/NORMALIZED"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3005,
   :name "NORMALIZED",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3005"},
  "clojure.contrib.jmx/*connection*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 549,
   :name "*connection*",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/549"},
  "incanter.charts/set-stroke-color"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2778,
   :name "set-stroke-color",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2778"},
  "net.licenser.sandbox.safe-fns/bad-objects"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5104,
   :name "bad-objects",
   :ns "net.licenser.sandbox.safe-fns",
   :url "http://clojuredocs.org/v/5104"},
  "swank.core.protocol/read-fail-exception"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4257,
   :name "read-fail-exception",
   :ns "swank.core.protocol",
   :url "http://clojuredocs.org/v/4257"},
  "clojure.contrib.command-line/print-help"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 46,
   :name "print-help",
   :ns "clojure.contrib.command-line",
   :url "http://clojuredocs.org/v/46"},
  "clojure.contrib.stream-utils/st-as-stream"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1306,
   :name "st-as-stream",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1306"},
  "clojure.main/repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5913,
   :name "repl",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5913"},
  "swank.util.concurrent.thread/start-thread"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4098,
   :name "start-thread",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/4098"},
  "clojure.contrib.jmx/write!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 550,
   :name "write!",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/550"},
  "incanter.processing/bezier-tangent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3209,
   :name "bezier-tangent",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3209"},
  "incanter.processing/emissive"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3212,
   :name "emissive",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3212"},
  "clojure.contrib.string/split"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "re-seq",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1792",
     :line "3777",
     :arglists_comp "[re s]",
     :url_friendly_name "re-seq",
     :file "clojure/core.clj"}],
   :examples [],
   :id 1317,
   :name "split",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1317"},
  "circumspec.config/src-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3623,
   :name "src-dir",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3623"},
  "fogus.me.trammel/contract"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5039,
   :name "contract",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5039"},
  "clojure.java.javadoc/javadoc"
  {:comments [],
   :see-alsos
   [{:namespace_id 342,
     :weight 1,
     :name "doc",
     :updated_at "2012-07-18 12:19:24.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:15:14.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5970",
     :line "120",
     :arglists_comp "[name]",
     :url_friendly_name "doc",
     :file "clojure/repl.clj"}],
   :examples
   [{:namespace_id 105,
     :ns "clojure.java.javadoc",
     :updated_at "2010-09-26 02:10:32.0",
     :function "javadoc",
     :version 3,
     :created_at "2010-08-31 09:08:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (use 'clojure.java.javadoc)\nnil\n\nuser=> (javadoc String)\n\"http://java.sun.com/javase/6/docs/api/java/lang/String.html\"\n\nuser=> (javadoc (java.util.Date.))\n\"http://java.sun.com/javase/6/docs/api/java/util/Date.html\"\n"}],
   :id 5904,
   :name "javadoc",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5904"},
  "incanter.processing/BACKSPACE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3122,
   :name "BACKSPACE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3122"},
  "clojure.zip/seq-zip"
  {:comments [],
   :see-alsos
   [{:namespace_id 120,
     :weight 0,
     :name "xml-zip",
     :updated_at "2010-10-20 04:42:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/2595",
     :line "53",
     :arglists_comp "[root]",
     :url_friendly_name "xml-zip",
     :file "clojure/zip.clj"}
    {:namespace_id 120,
     :weight 1,
     :name "vector-zip",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2582",
     :line "44",
     :arglists_comp "[root]",
     :url_friendly_name "vector-zip",
     :file "clojure/zip.clj"}],
   :examples
   [{:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2011-10-30 15:21:33.0",
     :function "seq-zip",
     :version 1,
     :created_at "2011-10-30 15:21:33.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (require '[clojure.zip :as zip])\r\nnil\r\nuser=> (def zz (zip/seq-zip '(a b (c d e) (f (g h) i) j)))\r\n#'user/zz\r\nuser=> zz\r\n[(a b (c d e) (f (g h) i) j) nil]"}],
   :id 6120,
   :name "seq-zip",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6120"},
  "incanter.charts/set-x-range"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2815,
   :name "set-x-range",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2815"},
  "clojure.contrib.generic.collection/into"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "list",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/2082",
     :line "16",
     :arglists_comp "[& items]",
     :url_friendly_name "list",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "set",
     :updated_at "2010-11-15 00:53:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/1848",
     :line "3163",
     :arglists_comp "[coll]",
     :url_friendly_name "set",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "vector",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1693",
     :line "302",
     :arglists_comp "[]|[a]|[a b]|[a b c]|[a b c d]|[a b c d & args]",
     :url_friendly_name "vector",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 18:45:44.0",
     :function "into",
     :version 1,
     :created_at "2011-11-29 18:45:44.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Adds a list to beginning of another.  Note that elements of list are added in reverse since each is processed sequentially.\n(into '(1 2 3) '(4 5 6))\n\n=> (6 5 4 1 2 3)"}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2011-11-29 18:48:15.0",
     :function "into",
     :version 1,
     :created_at "2011-11-29 18:48:15.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "; Adds a list into an empty list.  Because of the sequential processing, this also essentially produces a reversed version of the original list.\n(into () '(1 2 3 4))\n\n=> (4 3 2 1)\n"}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2012-07-23 15:18:01.0",
     :function "into",
     :version 1,
     :created_at "2012-07-23 15:18:01.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(into [5 6 7 8] '(1 2 3 4))\n==> [5 6 7 8 1 2 3 4]        \n(into #{5 6 7 8} [1 2 3 4])\n==> #{1 2 3 4 5 6 7 8}       \n(into [[5 6] [7 8]] #{[1 2] [3 4]})\n==> [[5 6] [7 8] [3 4] [1 2]]  \n(into #{{5 6} {7 8}} [{1 2} {3 4}])\n ==> #{{5 6} {1 2} {3 4} {7 8}} "}
    {:namespace_id 31,
     :ns "clojure.contrib.generic.collection",
     :updated_at "2012-12-27 15:51:47.0",
     :function "into",
     :version 1,
     :created_at "2012-12-27 15:51:47.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(defn all-files-present?\n\"Takes a list of real file names, and returns a sequence of maps \n indicating  the file name and its availability status 1 for \n present and 0 for not present.\"\n  [file-seq]\n  (for [fnam file-seq\n        :let [stat-map {(keyword fnam) (if (= (look-for fnam \"f\") 0)\n                                              1\n                                              0)}]]\n   stat-map))\n\n(into {}  (all-files-present? '(\"Makefile\" \"build.sh\" \"real-estate.csv\")) )\n{:Makefile 1, :build.sh 1, :real-estate.csv 0}\n\n"}],
   :id 395,
   :name "into",
   :ns "clojure.contrib.generic.collection",
   :url "http://clojuredocs.org/v/395"},
  "clojure.contrib.generic.arithmetic/*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 384,
   :name "*",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/384"},
  "clojure.contrib.miglayout.internal/MigLayout"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 714,
   :name "MigLayout",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/714"},
  "incanter.processing/stroke-join"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3262,
   :name "stroke-join",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3262"},
  "fogus.me.trammel/funcify*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5266,
   :name "funcify*",
   :ns "fogus.me.trammel",
   :url "http://clojuredocs.org/v/5266"},
  "clojure.repl/pst"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "*e",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/1717",
     :line "5035",
     :arglists_comp "",
     :url_friendly_name "*e",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5972,
   :name "pst",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5972"},
  "clojure.contrib.test-is/inc-report-counter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1391,
   :name "inc-report-counter",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1391"},
  "clj-swing.tree/mapref-tree-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5199,
   :name "mapref-tree-model",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5199"},
  "clojure.contrib.datalog.rules/<-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 149,
   :name "<-",
   :ns "clojure.contrib.datalog.rules",
   :url "http://clojuredocs.org/v/149"},
  "net.cgrand.enlive-html/do->"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3819,
   :name "do->",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3819"},
  "clojure.contrib.datalog.database/empty-database"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 160,
   :name "empty-database",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/160"},
  "clojure.inspector/list-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5871,
   :name "list-model",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5871"},
  "clojure.contrib.trace/trace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1409,
   :name "trace",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1409"},
  "clojure.core.protocols/InternalReduce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5855,
   :name "InternalReduce",
   :ns "clojure.core.protocols",
   :url "http://clojuredocs.org/v/5855"},
  "clojure.core/ns-aliases"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5632,
   :name "ns-aliases",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5632"},
  "incanter.core/decomp-svd"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2863,
   :name "decomp-svd",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2863"},
  "clojure.contrib.http.connection/send-request-entity"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 485,
   :name "send-request-entity",
   :ns "clojure.contrib.http.connection",
   :url "http://clojuredocs.org/v/485"},
  "clojure.contrib.pprint/compiled-format947"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5236,
   :name "compiled-format947",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5236"},
  "clojure.core/mod"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-02 02:26:36.0",
     :user_id 343,
     :function "mod",
     :version "1.2.0",
     :created_at "2011-09-02 02:26:36.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The difference between **rem** and **mod** can be remembered by noting that **mod** always returns a value between 0 and div."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-17 12:02:45.0",
     :user_id 757,
     :function "mod",
     :version "1.3.0",
     :created_at "2012-10-16 16:31:33.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "I am confused by the comment about the definition on lines 13+ of the example - which is not accurate when invoking mod when 'num' is positive and 'div' negative. Applying the definition to <pre>(mod 10 -3)</pre> we have \n<li> the largest multiple of -3 not exceeding 10 is 9, from using -3 as a multiplier</li>\n<li> however (mod 10 -3) yields -2, meaning that 10 exceeds the largest multiple not greater than 10 by -2 i.e. 10 - -2 = 12 is the largest multiple &lt;= 10, a contradiction.</li>\n<li> therefore (mod 10 -3) should yield 1, not -2 </li>\n\n<i>So unless I misunderstood</i>, the definition should be changed to something like: <br>\n<p>\"The mod function is defined as the amount by which a number exceeds the largest integer multiple of the divisor that is not greater than that number, <i>except when the number is positive and the divisor negative, in which case the result is the amount by which the number exceeds the smallest multiple that is not smaller than the number.</i>\"</p>\n\n<b>Or, change the implementation to something similar to</b>:\n\n<pre>(defn mod-2\n\t  [num div]\n\t  (let [m (rem num div)]\n\t    (if (or (zero? m) (= (pos? num) (pos? div)))\n\t     \tm\n\t     \t(if (pos? div) (+ m div) m)))) \n</pre>\n\t     \t\nto fit the current definition."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "rem",
     :updated_at "2011-08-24 14:31:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/1604",
     :line "1010",
     :arglists_comp "[num div]",
     :url_friendly_name "rem",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-09-17 04:52:55.0",
     :function "mod",
     :version 4,
     :created_at "2010-07-24 10:23:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\nuser=> (mod 10 5)\n0\n\nuser=> (mod 10 6)\n4\n\nuser=> (mod 10 10)\n0\n\nuser=> (mod 10 -1)\n0\n\n;; The mod function is defined as the amount by which a number exceeds the largest integer multiple of the divisor that is not greater than that number.\n;; The largest integer multiple of 5 not greater than -2 is 5 * -1 = -5. The amount by which -2 exceeds -5 is 3. \n;;\nuser=> (mod -2  5) \n3\n</pre>"}],
   :id 5615,
   :name "mod",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5615"},
  "clj-ssh.ssh/when-feature"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1473,
   :name "when-feature",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1473"},
  "incanter.symbolic/deriv-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3370,
   :name "deriv-fn",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3370"},
  "clojure.contrib.find-namespaces/clojure-source-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 311,
   :name "clojure-source-file?",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/311"},
  "incanter.charts/stacked-bar-chart"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2780,
   :name "stacked-bar-chart",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2780"},
  "clojure.core/last"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "next",
     :updated_at "2010-11-06 03:08:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1620",
     :line "55",
     :arglists_comp "[coll]",
     :url_friendly_name "next",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 4,
     :name "rest",
     :updated_at "2011-06-01 19:59:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1994",
     :line "63",
     :arglists_comp "[coll]",
     :url_friendly_name "rest",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "butlast",
     :updated_at "2010-11-06 03:20:28.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1658",
     :line "232",
     :arglists_comp "[coll]",
     :url_friendly_name "butlast",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "take-last",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/2047",
     :line "2189",
     :arglists_comp "[n coll]",
     :url_friendly_name "take-last",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-04-28 09:18:15.0",
     :function "last",
     :version 4,
     :created_at "2010-07-17 18:23:24.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (last [1 2 3 4 5])\n5\nuser=> (last [\"a\" \"b\" \"c\" \"d\" \"e\"])\n\"e\"\nuser=> (last {:one 1 :two 2 :three 3})\n[:three 3]\nuser=> (last [])\nnil\n</pre>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:20:18.0",
     :function "last",
     :version 1,
     :created_at "2010-11-06 03:20:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";really slow reverse\n;put the last item of the list at the start of a new list, and recur over all but the last item of the list.\n;butlast acts similar to next in that it returns null for a 1-item list.\n\n(defn my-reverse\n  ([a-list]\n     (cond (= a-list nil) nil\n           :else (cons (last a-list)\n                       (my-reverse (butlast a-list))))))"}],
   :id 5577,
   :name "last",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5577"},
  "clojure.zip/remove"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6114,
   :name "remove",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6114"},
  "incanter.processing/stroke"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3260,
   :name "stroke",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3260"},
  "clojure.contrib.pprint/pprint-array"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 845,
   :name "pprint-array",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/845"},
  "net.licenser.sandbox/dot-replace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5138,
   :name "dot-replace",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5138"},
  "ring.util.response/redirect"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2634,
   :name "redirect",
   :ns "ring.util.response",
   :url "http://clojuredocs.org/v/2634"},
  "incanter.processing/screen-y"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3184,
   :name "screen-y",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3184"},
  "swank.rpc/*log-events*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4308,
   :name "*log-events*",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4308"},
  "leiningen.install/make-artifact"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3549,
   :name "make-artifact",
   :ns "leiningen.install",
   :url "http://clojuredocs.org/v/3549"},
  "clj-swing.example/selected"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5191,
   :name "selected",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5191"},
  "clojure.contrib.string/replace-first-str"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1341,
   :name "replace-first-str",
   :ns "clojure.contrib.string",
   :url "http://clojuredocs.org/v/1341"},
  "clojure.contrib.datalog.database/any-match?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 152,
   :name "any-match?",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/152"},
  "clojure.core/nth"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "first",
     :updated_at "2011-04-24 14:25:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1883",
     :line "48",
     :arglists_comp "[coll]",
     :url_friendly_name "first",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "second",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1545",
     :line "84",
     :arglists_comp "[x]",
     :url_friendly_name "second",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "nthnext",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/2006",
     :line "3393",
     :arglists_comp "[coll n]",
     :url_friendly_name "nthnext",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-17 18:43:47.0",
     :function "nth",
     :version 2,
     :created_at "2010-07-17 18:43:47.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=&gt; (nth [\"a\" \"b\" \"c\" \"d\"] 0)             \r\n\"a\"\r\nuser=&gt; (nth [\"a\" \"b\" \"c\" \"d\"] 1)             \r\n\"b\"\r\nuser=&gt; (nth [] 0 \"nothing found\")\r\n\"nothing found\"\r\nuser=&gt; (nth [0 1 2] 77 1337)\r\n1337\r\n</pre>"}],
   :id 5642,
   :name "nth",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5642"},
  "clojure.zip/end?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6102,
   :name "end?",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6102"},
  "incanter.stats/discordant?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3346,
   :name "discordant?",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3346"},
  "clojure.pprint/*print-suppress-namespaces*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5929,
   :name "*print-suppress-namespaces*",
   :ns "clojure.pprint",
   :url "http://clojuredocs.org/v/5929"},
  "clojure.contrib.io/*buffer-size*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 492,
   :name "*buffer-size*",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/492"},
  "clojure.contrib.miglayout.internal/add-components"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 711,
   :name "add-components",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/711"},
  "clojure.java.javadoc/*local-javadocs*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5900,
   :name "*local-javadocs*",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5900"},
  "clojure.contrib.pprint.pretty-writer/nl-t"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 874,
   :name "nl-t",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/874"},
  "midje.checkers/falsey"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4327,
   :name "falsey",
   :ns "midje.checkers",
   :url "http://clojuredocs.org/v/4327"},
  "swank.util.class-browse/clojure-ns-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4155,
   :name "clojure-ns-file?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4155"},
  "clojure.contrib.test-is/template?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1403,
   :name "template?",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1403"},
  "clojure.contrib.miglayout.internal/component?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 713,
   :name "component?",
   :ns "clojure.contrib.miglayout.internal",
   :url "http://clojuredocs.org/v/713"},
  "net.cgrand.enlive-html/set-attr"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3825,
   :name "set-attr",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3825"},
  "clojure.contrib.dataflow/source-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 137,
   :name "source-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/137"},
  "net.cgrand.enlive-html/after"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3875,
   :name "after",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3875"},
  "clojure.contrib.test-is/successful?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1392,
   :name "successful?",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1392"},
  "clojure.core/char"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "char?",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1684",
     :line "137",
     :arglists_comp "[x]",
     :url_friendly_name "char_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "int",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:07.0",
     :added nil,
     :url "http://clojuredocs.org/v/2001",
     :line "733",
     :arglists_comp "[x]",
     :url_friendly_name "int",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "chars",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/1743",
     :line "4217",
     :arglists_comp "[xs]",
     :url_friendly_name "chars",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "char-array",
     :updated_at "2010-12-29 18:12:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1563",
     :line "4160",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "char-array",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-28 07:10:55.0",
     :function "char",
     :version 3,
     :created_at "2010-07-28 06:09:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; can coerce an int (or similar)\nuser=> (char 97)\n\\a\n\n;; a byte can be coerced to a char\nuser=> (let [bytes-array (.getBytes \"abc\")]\n         (char (first bytes-array)))\n\\a\n\n;; char is just a function\nuser=> (map char [65 66 67 68])\n(\\A \\B \\C \\D)"}],
   :id 5403,
   :name "char",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5403"},
  "lancet/define-ant-type"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3468,
   :name "define-ant-type",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3468"},
  "clojure.contrib.java-utils/set-system-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 536,
   :name "set-system-properties",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/536"},
  "clojure.core/dec"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 1,
     :name "dec'",
     :updated_at "2012-04-22 14:33:12.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:04:25.0",
     :added "1.0",
     :url "http://clojuredocs.org/v/5445",
     :line "1070",
     :arglists_comp "[x]",
     :url_friendly_name "dec'",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-24 10:26:08.0",
     :function "dec",
     :version 3,
     :created_at "2010-07-24 10:25:56.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=&gt; (dec 2)\r\n1\r\n\r\nuser=&gt; (dec 2.0)\r\n1.0\r\n\r\nuser=&gt; (dec 1)\r\n0\r\n\r\nuser=&gt; (dec -1)\r\n-2\r\n</pre>"}],
   :id 5444,
   :name "dec",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5444"},
  "circumspec.should/default-fail-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3713,
   :name "default-fail-message",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3713"},
  "clojure.core/sorted?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "sorted-map",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:15.0",
     :added nil,
     :url "http://clojuredocs.org/v/1494",
     :line "336",
     :arglists_comp "[& keyvals]",
     :url_friendly_name "sorted-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-set",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2099",
     :line "350",
     :arglists_comp "[& keys]",
     :url_friendly_name "sorted-set",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 02:48:45.0",
     :function "sorted?",
     :version 3,
     :created_at "2010-08-16 05:30:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (sorted? (sorted-set 5 3 1 2 4))\ntrue\nuser=> (sorted? (sorted-map :a 1 :c 3 :b 2))\ntrue\n\n;; Note you can't just pass in a collection that happens to be sorted.\nuser=> (sorted? [1 2 3 4 5])\nfalse\n"}],
   :id 5767,
   :name "sorted?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5767"},
  "net.cgrand.enlive-html/right"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3932,
   :name "right",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3932"},
  "clojure.contrib.seq/seq-on"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1161,
   :name "seq-on",
   :ns "clojure.contrib.seq",
   :url "http://clojuredocs.org/v/1161"},
  "clojure.contrib.mock.test-adapter/report-problem"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 750,
   :name "report-problem",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/750"},
  "net.cgrand.enlive-html/select"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3820,
   :name "select",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3820"},
  "lancet/length"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3457,
   :name "length",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3457"},
  "clojure.zip/replace"
  {:comments [],
   :see-alsos
   [{:namespace_id 120,
     :weight 0,
     :name "edit",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:17.0",
     :added nil,
     :url "http://clojuredocs.org/v/2588",
     :line "210",
     :arglists_comp "[loc f & args]",
     :url_friendly_name "edit",
     :file "clojure/zip.clj"}],
   :examples
   [{:namespace_id 352,
     :ns "clojure.zip",
     :updated_at "2012-02-16 15:15:06.0",
     :function "replace",
     :version 1,
     :created_at "2012-02-16 15:15:06.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use 'clojure.zip)\n\n(def vz (vector-zip [1 2 [73 88] 4]))\n\n(root (replace (-> vz down right right) 3))\n=>[1 2 3 4]"}],
   :id 6115,
   :name "replace",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6115"},
  "clojure.java.io/copy"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "file",
     :updated_at "2010-12-29 17:45:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/2140",
     :line "395",
     :arglists_comp "[arg]|[parent child]|[parent child & more]",
     :url_friendly_name "file",
     :file "clojure/java/io.clj"}],
   :examples
   [{:namespace_id 104,
     :ns "clojure.java.io",
     :updated_at "2011-05-27 06:39:27.0",
     :function "copy",
     :version 1,
     :created_at "2011-05-27 06:39:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns your-project\n  (:use [clojure.java.io :only (file copy)]))\n\n(defn copy-file [src-path dest-path]\n  (copy (file source-path) (file dest-path)))\n\n(copy-file \"/home/username/squirrel.txt\" \"/home/username/burt-reynolds.txt\")"}],
   :id 5883,
   :name "copy",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5883"},
  "clojure.core/set"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-22 20:12:26.0",
     :user_id 385,
     :function "set",
     :version "1.2.0",
     :created_at "2011-09-22 20:12:26.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "The documentation doesn't mention the order, is it undefined?\n\n#{:a :b :c :d}\n-> #{:d :a :b :c}\n"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "hash-set",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:45.0",
     :added nil,
     :url "http://clojuredocs.org/v/1538",
     :line "329",
     :arglists_comp "[]|[& keys]",
     :url_friendly_name "hash-set",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "sorted-set",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:14.0",
     :added nil,
     :url "http://clojuredocs.org/v/2099",
     :line "350",
     :arglists_comp "[& keys]",
     :url_friendly_name "sorted-set",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "conj",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:39.0",
     :added nil,
     :url "http://clojuredocs.org/v/1696",
     :line "71",
     :arglists_comp "[coll x]|[coll x & xs]",
     :url_friendly_name "conj",
     :file "clojure/core.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "join",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/2455",
     :line "111",
     :arglists_comp "[xrel yrel]|[xrel yrel km]",
     :url_friendly_name "join",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "select",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:36.0",
     :added nil,
     :url "http://clojuredocs.org/v/2452",
     :line "64",
     :arglists_comp "[pred xset]",
     :url_friendly_name "select",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 2,
     :name "difference",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/2460",
     :line "48",
     :arglists_comp "[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "difference",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "intersection",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2457",
     :line "32",
     :arglists_comp "[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "intersection",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "union",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/2451",
     :line "19",
     :arglists_comp "[]|[s1]|[s1 s2]|[s1 s2 & sets]",
     :url_friendly_name "union",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "index",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/2462",
     :line "95",
     :arglists_comp "[xrel ks]",
     :url_friendly_name "index",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "project",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2453",
     :line "71",
     :arglists_comp "[xrel ks]",
     :url_friendly_name "project",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "rename",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2461",
     :line "89",
     :arglists_comp "[xrel kmap]",
     :url_friendly_name "rename",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 2,
     :name "rename-keys",
     :updated_at "2011-05-12 21:52:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:34.0",
     :added nil,
     :url "http://clojuredocs.org/v/2450",
     :line "77",
     :arglists_comp "[map kmap]",
     :url_friendly_name "rename-keys",
     :file "clojure/set.clj"}
    {:namespace_id 111,
     :weight 1,
     :name "map-invert",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/2459",
     :line "106",
     :arglists_comp "[m]",
     :url_friendly_name "map-invert",
     :file "clojure/set.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "disj",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/2035",
     :line "1177",
     :arglists_comp "[set]|[set key]|[set key & ks]",
     :url_friendly_name "disj",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "distinct",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1580",
     :line "3963",
     :arglists_comp "[coll]",
     :url_friendly_name "distinct",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-06-21 06:52:29.0",
     :function "set",
     :version 5,
     :created_at "2010-07-17 18:51:37.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; returns distinct elements\nuser=> (set '(1 1 2 3 2 4 5 5))\n#{1 2 3 4 5}\n\n;; returns distinct elements (different nomenclature)\nuser=> (set [1 1 2 3 2 4 5 5])\n#{1 2 3 4 5}\n\nuser=> (set [1 2 3 4 5])  \n#{1 2 3 4 5}\n\nuser=> (set \"abcd\")\n#{\\a \\b \\c \\d}\n\nuser=> (set '(\"a\" \"b\" \"c\" \"d\"))\n#{\"a\" \"b\" \"c\" \"d\"}\n\nuser=> (set {:one 1 :two 2 :three 3})\n#{[:two 2] [:three 3] [:one 1]}\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-15 00:54:59.0",
     :function "set",
     :version 2,
     :created_at "2010-11-15 00:53:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(set [1 2 3 2 1 2 3])\n-> #{1 2 3}\n\n#{:a :b :c :d}\n-> #{:d :a :b :c}\n\n(hash-set :a :b :c :d)\n-> #{:d :a :b :c}\n \n(sorted-set :a :b :c :d)\n-> #{:a :b :c :d}\n\n;------------------------------------------------\n\n(def s #{:a :b :c :d})\n(conj s :e)\n-> #{:d :a :b :e :c}\n \n(count s)\n-> 4\n \n(seq s)\n-> (:d :a :b :c)\n \n(= (conj s :e) #{:a :b :c :d :e})\n-> true\n\n(s :b)\n-> :b\n \n(s :k)\n-> nil"}],
   :id 5748,
   :name "set",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5748"},
  "clojure.contrib.io/append-writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 518,
   :name "append-writer",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/518"},
  "incanter.core/kronecker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2737,
   :name "kronecker",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2737"},
  "circumspec/tests"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3590,
   :name "tests",
   :ns "circumspec",
   :url "http://clojuredocs.org/v/3590"},
  "clojure.contrib.pprint.pretty-writer/buffer-length"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 913,
   :name "buffer-length",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/913"},
  "clojure.contrib.probabilities.finite-distributions/cond-prob"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1074,
   :name "cond-prob",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1074"},
  "clojure.core/unchecked-add"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unchecked-dec",
     :updated_at "2010-11-08 03:52:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1540",
     :line "941",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-dec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-inc",
     :updated_at "2010-11-08 03:53:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1632",
     :line "934",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-inc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "unchecked-negate",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1645",
     :line "948",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-negate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-divide",
     :updated_at "2011-08-20 23:49:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2111",
     :line "976",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-divide",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-subtract",
     :updated_at "2010-11-08 03:42:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1768",
     :line "962",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-subtract",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-multiply",
     :updated_at "2011-08-21 00:16:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1533",
     :line "969",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-multiply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-remainder",
     :updated_at "2010-11-08 03:47:39.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2023",
     :line "983",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-remainder",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 17:57:08.0",
     :function "unchecked-add",
     :version 2,
     :created_at "2010-11-08 03:25:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; can't interchange INTs with LONGs, only F(int, int) or F(long, long)\n;; F is a function, not an operator.\n;; overflow very easily as shown below.\n\nuser=> (unchecked-add Integer/MAX_VALUE 0)\n2147483647\n\nuser=> (unchecked-add Integer/MAX_VALUE 1)\n-2147483648\n\nuser=> (unchecked-add Integer/MAX_VALUE Integer/MAX_VALUE)\n-2\n\nuser=> (unchecked-add Integer/MAX_VALUE Long/MAX_VALUE)\njava.lang.IllegalArgumentException: No matching method found: unchecked_add (NO_SOURCE_FILE:0)\n\nuser=> (unchecked-add Integer/MAX_VALUE Long/MAX_VALUE)\njava.lang.IllegalArgumentException: No matching method found: unchecked_add (NO_SOURCE_FILE:0)\n\nuser=> (unchecked-add Long/MAX_VALUE Long/MAX_VALUE)\n-2\n\nuser=> (unchecked-add 5 Long/MAX_VALUE)\njava.lang.IllegalArgumentException: No matching method found: unchecked_add (NO_SOURCE_FILE:0)\n\nuser=> (unchecked-add 5555555555 Long/MAX_VALUE)\n-9223372031299220254"}],
   :id 5799,
   :name "unchecked-add",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5799"},
  "incanter.distributions/draw"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2943,
   :name "draw",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2943"},
  "clojure.core/comparator"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-08-16 15:35:31.0",
     :function "comparator",
     :version 2,
     :created_at "2011-08-16 03:29:36.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; simple example to create an ArrayList, initially [1,2,0]\n;; and sort it in descending order\n\nuser=> (def a (new java.util.ArrayList [1 2 0]))\n#'user/a\nuser=> (def compx (comparator (fn [x y] (> x y))))\n#'user/compx\nuser=> (java.util.Collections/sort a compx)\nnil\nuser=> a\n#<ArrayList [2, 1, 0]>\n\n;; Note however that 'comparator' is rarely (never?) needed because if\n;; the fn returns a boolean, the .compare implementation Clojure provides\n;; causes it to behave the same as if 'comparator' were wrapped around it:\n\n(sort (comparator (fn [x y] (> x y))) [1 2 0]) ;=> (2 1 0)\n(sort (fn [x y] (> x y)) [1 2 0])              ;=> (2 1 0)\n(sort > [1 2 0])                               ;=> (2 1 0)\n(sort < [1 2 0])                               ;=> (0 1 2)"}],
   :id 5425,
   :name "comparator",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5425"},
  "clojure.contrib.logging/impl-enabled?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 632,
   :name "impl-enabled?",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/632"},
  "clojure.contrib.repl-utils/run*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 340,
   :name "run*",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/340"},
  "clojure.core/keyword?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-13 19:22:48.0",
     :function "keyword?",
     :version 2,
     :created_at "2010-07-13 19:22:48.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (keyword? x)\r\nfalse\r\nuser=> (keyword? :x)\r\ntrue\r\nuser=> (keyword? true)\r\nfalse</pre>"}],
   :id 5576,
   :name "keyword?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5576"},
  "clojure.contrib.jmx/guess-attribute-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 565,
   :name "guess-attribute-map",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/565"},
  "clojure.core/bases"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-08 13:18:19.0",
     :function "bases",
     :version 2,
     :created_at "2010-09-08 13:18:19.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (import 'java.io.File)\r\n\r\nuser=> (bases java.io.File)\r\n(java.lang.Object java.io.Serializable java.lang.Comparable)</pre>"}],
   :id 5374,
   :name "bases",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5374"},
  "swank.clj-contrib.macroexpand/macroexpand-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3964,
   :name "macroexpand-all",
   :ns "swank.clj-contrib.macroexpand",
   :url "http://clojuredocs.org/v/3964"},
  "incanter.charts/set-theme"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2839,
   :name "set-theme",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2839"},
  "incanter.processing/create-font"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3211,
   :name "create-font",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3211"},
  "clojure.java.javadoc/*core-java-api*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5897,
   :name "*core-java-api*",
   :ns "clojure.java.javadoc",
   :url "http://clojuredocs.org/v/5897"},
  "clojure.contrib.accumulators/combine"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 23,
   :name "combine",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/23"},
  "swank.commands.inspector/describe-inspectee"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4237,
   :name "describe-inspectee",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4237"},
  "incanter.charts/set-y-range"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2777,
   :name "set-y-range",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2777"},
  "clojure.core/aset-char"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 01:15:05.0",
     :function "aset-char",
     :version 1,
     :created_at "2011-08-21 01:15:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create an array of 10 characters (initially set to blank by default)\n;; and set one of the elements to the character \"a\"\n\nuser=> (def cs (char-array 10))\n#'user/cs\nuser=> (vec cs)\n[\\  \\  \\  \\  \\  \\  \\  \\  \\  \\ ]\nuser=> (aset-char cs 3 \\a)\n\\a\nuser=> (vec cs)\n[\\  \\  \\  \\a \\  \\  \\  \\  \\  \\ ]\nuser=>"}],
   :id 5359,
   :name "aset-char",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5359"},
  "swank.util.hooks/run-hook"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4192,
   :name "run-hook",
   :ns "swank.util.hooks",
   :url "http://clojuredocs.org/v/4192"},
  "clojure.inspector/tree-model"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5875,
   :name "tree-model",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5875"},
  "clojure.core/doubles"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-20 15:02:10.0",
     :user_id 342,
     :function "doubles",
     :version "1.2.0",
     :created_at "2011-08-20 15:01:15.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Anybody know what this is used for?\nAll I could find is that you can cast an existing double-array to another \ndouble-array???\n\n<pre>user=&gt; (doubles [1 2 3 4 5])\njava.lang.ClassCastException: clojure.lang.PersistentVector cannot be cast to [D (NO_SOURCE_FILE:0)\nuser=&gt; (doubles (int-array [2 3 2]))\njava.lang.ClassCastException: [I cannot be cast to [D (NO_SOURCE_FILE:0)\nuser=&gt; (doubles (float-array [2 3 2]))\njava.lang.ClassCastException: [F cannot be cast to [D (NO_SOURCE_FILE:0)\nuser=&gt; (doubles (double-array [2 3 2]))\n#<double[] [d@3c1fc1a6=\"\">\nuser=&gt; (type (double-array [2 3 2]))\n[D\nuser=&gt; (type (doubles (double-array [2 3 2])))\n[D\nuser=&gt;\n</pre>\n"}],
   :see-alsos [],
   :examples [],
   :id 5482,
   :name "doubles",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5482"},
  "clojure.contrib.prxml/prxml"
  {:comments
   [{:namespace_id 72,
     :ns "clojure.contrib.prxml",
     :updated_at "2012-01-31 21:44:11.0",
     :user_id 41,
     :function "prxml",
     :version "1.2.0",
     :created_at "2011-03-05 07:07:03.0",
     :library "Clojure Contrib",
     :library_id 1,
     :body
     "A good discussion of how to use this can be found <a href=\"http://nakkaya.com/2009/10/10/processing-xml-with-clojure/\">here</a>.\n\nAlso, a 1.3 compatible port is <a href=\"https://github.com/weissjeffm/clojure.prxml\">available on github</a>."}],
   :see-alsos
   [{:namespace_id 119,
     :weight 0,
     :name "emit",
     :updated_at "2010-10-20 04:42:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:29:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2574",
     :line "111",
     :arglists_comp "[x]",
     :url_friendly_name "emit",
     :file "clojure/xml.clj"}],
   :examples [],
   :id 371,
   :name "prxml",
   :ns "clojure.contrib.prxml",
   :url "http://clojuredocs.org/v/371"},
  "clojure.core/reverse"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-23 03:22:17.0",
     :user_id 41,
     :function "reverse",
     :version "1.2.0",
     :created_at "2010-12-23 03:22:17.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "If you've got a vector rseq is a good option instead of reverse."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "rseq",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1662",
     :line "1233",
     :arglists_comp "[rev]",
     :url_friendly_name "rseq",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:26:03.0",
     :function "reverse",
     :version 3,
     :created_at "2010-07-28 05:59:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (reverse '(1 2 3))\n(3 2 1)\n"}],
   :id 5734,
   :name "reverse",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5734"},
  "circumspec.locator/tests-in-namespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3685,
   :name "tests-in-namespace",
   :ns "circumspec.locator",
   :url "http://clojuredocs.org/v/3685"},
  "clojure.contrib.io/to-byte-array"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 512,
   :name "to-byte-array",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/512"},
  "net.cgrand.enlive-html/cacheable"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3871,
   :name "cacheable",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3871"},
  "clojure.test.tap/tap-report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6072,
   :name "tap-report",
   :ns "clojure.test.tap",
   :url "http://clojuredocs.org/v/6072"},
  "clojure.core/re-pattern"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "re-find",
     :updated_at "2011-08-03 05:05:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1773",
     :line "3799",
     :arglists_comp "[m]|[re s]",
     :url_friendly_name "re-find",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "replace",
     :updated_at "2011-01-15 03:53:45.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2480",
     :line "63",
     :arglists_comp "[s match replacement]",
     :url_friendly_name "replace",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 0,
     :name "replace-first",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/2485",
     :line "103",
     :arglists_comp "[s match replacement]",
     :url_friendly_name "replace-first",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-12-14 23:11:41.0",
     :function "re-pattern",
     :version 5,
     :created_at "2010-07-30 20:32:18.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (re-pattern \"\\\\d+\")\n#\"\\d+\"\n\nuser=> (re-find (re-pattern \"\\\\d+\") \"abc123def\") \n\"123\"\n\n;; If you want to construct a regex pattern dynamically at run time,\n;; then you need to use re-pattern to convert a string to a pattern\n;; that can be used for matching.  But if your pattern is one you\n;; write into the source code, it is more convenient to use the\n;; #\"pattern\" syntax.  The previous example can be written as follows.\nuser=> (re-find #\"\\d+\" \"abc123def\") \n\"123\"\n\n;; Below are two examples that are equivalent in the patterns they\n;; use, but the #\"pattern\" syntax helps significantly, because it lets\n;; us avoid the requirement to escape every \\ character with another \\\n;; character.  See the example with embedded comments below for more\n;; detail on what the pattern matches.\nuser=> (re-find #\"\\\\\\d+\\s+\\S+\" \"\\\\ it sh0uld match in \\\\5 here somewhere.\")\n\"\\\\5 here\"\n\nuser=> (re-find (re-pattern \"\\\\\\\\\\\\d+\\\\s+\\\\S+\")\n                \"\\\\ it sh0uld match in \\\\5 here somewhere.\")\n\"\\\\5 here\"\n\n;; If you want to embed (ignored) whitespace and comments from #\n;; characters until end-of-line in your regex patterns, start the\n;; pattern with (?x)\nuser=> (re-find #\"(?x)  # allow embedded whitespace and comments\n                  \\\\    # backslash\n                  \\d+   # one or more digits\n                  \\s+   # whitespace\n                  \\S+   # non-whitespace\"\n                \"\\\\ it sh0uld match in \\\\5 here somewhere.\")\n\"\\\\5 here\""}],
   :id 5700,
   :name "re-pattern",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5700"},
  "incanter.distributions/Distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2936,
   :name "Distribution",
   :ns "incanter.distributions",
   :url "http://clojuredocs.org/v/2936"},
  "leiningen.compile/compilable-namespaces"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3510,
   :name "compilable-namespaces",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3510"},
  "clojure.core/make-hierarchy"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "isa?",
     :updated_at "2011-08-10 13:56:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:50.0",
     :added nil,
     :url "http://clojuredocs.org/v/1711",
     :line "4400",
     :arglists_comp "[child parent]|[h child parent]",
     :url_friendly_name "isa_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "derive",
     :updated_at "2011-08-10 13:56:34.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1595",
     :line "4462",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "derive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "underive",
     :updated_at "2011-08-21 14:30:37.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1964",
     :line "4498",
     :arglists_comp "[tag parent]|[h tag parent]",
     :url_friendly_name "underive",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "parents",
     :updated_at "2011-08-21 16:03:33.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/1834",
     :line "4421",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "parents",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "descendants",
     :updated_at "2011-08-21 16:07:53.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1641",
     :line "4450",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "descendants",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "ancestors",
     :updated_at "2011-08-21 16:22:26.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1968",
     :line "4434",
     :arglists_comp "[tag]|[h tag]",
     :url_friendly_name "ancestors",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-20 20:11:14.0",
     :function "make-hierarchy",
     :version 1,
     :created_at "2011-08-20 20:11:14.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; use make-hierarchy to build your own local hierarchy for derive, isa?, etc. \n;; instead of using the global hierarchy\n;; note that the first ancestors call returns a nil since that type does not \n;; exist in the global hierarchy\n\nuser=> (def h (make-hierarchy))\n#'user/h\nuser=> (def h (derive h ::rect ::shape))\n#'user/h\nuser=> (def h (derive h ::square ::rect))\n#'user/h\nuser=> h\n{:parents {:user/square #{:user/rect}, :user/rect #{:user/shape}}, :ancestors {:\nuser/square #{:user/shape :user/rect}, :user/rect #{:user/shape}}, :descendants\n{:user/rect #{:user/square}, :user/shape #{:user/square :user/rect}}}\nuser=> (ancestors ::square)\nnil\nuser=> (ancestors h ::square)\n#{:user/shape :user/rect}\nuser=>"}],
   :id 5599,
   :name "make-hierarchy",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5599"},
  "clojure.core/read"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 00:34:02.0",
     :user_id 41,
     :function "read",
     :version "1.2.0",
     :created_at "2010-10-05 00:34:02.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "This function is for reading clojure objects not a general input function."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "read-string",
     :updated_at "2012-08-20 22:21:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1707",
     :line "2894",
     :arglists_comp "[s]",
     :url_friendly_name "read-string",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "*read-eval*",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1648",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "*read-eval*",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-05 00:32:52.0",
     :function "read",
     :version 1,
     :created_at "2010-10-05 00:32:52.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (read)\n( + 1 1 ) ; <= User types this\n(+ 1 1)\nuser=> (eval (read))\n(+ 1 1)   ; <= User types this\n2\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-05 22:24:46.0",
     :function "read",
     :version 1,
     :created_at "2012-01-05 22:24:46.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "\n;; read wants *in* set to a java.io.PushbackReader.\n;; with-open sets *in* and closes it after it's done.\n;; *read-eval* specifies whether to evaluate #=() forms\n;; when reading.  This is a very good idea if you are\n;; reading forms from untrusted sources.\n(defn read-from-file-safely [filename]\n  (with-open\n    [r (java.io.PushbackReader.\n         (clojure.java.io/reader filename))]\n      (binding [*read-eval* false]\n        (read r))))\n\nuser=> (spit \"testfile.txt\" \"{:a 1 :b 2 :c 3}\")\nnil\nuser=> (read-from-file-safely \"testfile.txt\")\n{:a 1, :b 2, :c 3}\n"}],
   :id 5702,
   :name "read",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5702"},
  "clojure.contrib.monads/maybe-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 773,
   :name "maybe-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/773"},
  "circumspec.watch/source-ns->test-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3788,
   :name "source-ns->test-ns",
   :ns "circumspec.watch",
   :url "http://clojuredocs.org/v/3788"},
  "clojure.core/get-proxy-class"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5538,
   :name "get-proxy-class",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5538"},
  "clojure.contrib.generic.arithmetic/+"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 383,
   :name "+",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/383"},
  "clojure.contrib.pprint/pprint-simple-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 844,
   :name "pprint-simple-list",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/844"},
  "incanter.censored/censored-variance-upper"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2753,
   :name "censored-variance-upper",
   :ns "incanter.censored",
   :url "http://clojuredocs.org/v/2753"},
  "clojure.contrib.profile/summarize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1112,
   :name "summarize",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1112"},
  "incanter.processing/month"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3206,
   :name "month",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3206"},
  "clojure.string/trimr"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "trim",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/2469",
     :line "184",
     :arglists_comp "[s]",
     :url_friendly_name "trim",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "triml",
     :updated_at "2010-11-08 03:15:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2478",
     :line "190",
     :arglists_comp "[s]",
     :url_friendly_name "triml",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-11-08 03:13:55.0",
     :function "trimr",
     :version 1,
     :created_at "2010-11-08 03:13:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(use 'clojure.string)\n(trimr \"        my string         \")\n=> \"        my string\""}],
   :id 6010,
   :name "trimr",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6010"},
  "clj-swing.example/tree-example"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5217,
   :name "tree-example",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5217"},
  "clojure.contrib.datalog.util/preduce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 199,
   :name "preduce",
   :ns "clojure.contrib.datalog.util",
   :url "http://clojuredocs.org/v/199"},
  "clojure.contrib.def/defstruct-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 98,
   :name "defstruct-",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/98"},
  "clojure.contrib.dataflow/get-old-value"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 117,
   :name "get-old-value",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/117"},
  "swank.commands.contrib.swank-fuzzy/*fuzzy-completion-word-separators*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4185,
   :name "*fuzzy-completion-word-separators*",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4185"},
  "incanter.stats/cdf-neg-binomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3360,
   :name "cdf-neg-binomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3360"},
  "clojure.core/bit-set"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-28 10:45:31.0",
     :function "bit-set",
     :version 4,
     :created_at "2010-07-28 10:14:01.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (bit-set 2r1011 2) ; index is 0-based\r\n15 \r\n;; 15 = 2r1111\r\n</pre>\r\n\r\n<pre>;; the same in decimal\r\nuser=&gt; (bit-set 11 2) \r\n15 \r\n</pre>"}],
   :id 5386,
   :name "bit-set",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5386"},
  "clojure.core/*math-context*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5301,
   :name "*math-context*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5301"},
  "clojure.contrib.miglayout/miglayout"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 715,
   :name "miglayout",
   :ns "clojure.contrib.miglayout",
   :url "http://clojuredocs.org/v/715"},
  "swank.commands.completion/simple-completions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4124,
   :name "simple-completions",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4124"},
  "clojure.contrib.datalog.database/select"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 150,
   :name "select",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/150"},
  "incanter.charts/dynamic-xy-plot"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2840,
   :name "dynamic-xy-plot",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2840"},
  "lancet/ant-project"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3466,
   :name "ant-project",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3466"},
  "clojure.contrib.error-kit/throw-msg"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 274,
   :name "throw-msg",
   :ns "clojure.contrib.error-kit",
   :url "http://clojuredocs.org/v/274"},
  "clojure.contrib.sql.internal/print-sql-exception"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1228,
   :name "print-sql-exception",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1228"},
  "swank.core/*current-exception*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4118,
   :name "*current-exception*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4118"},
  "clojure.test/testing"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 0,
     :name "is",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2497",
     :line "533",
     :arglists_comp "[form]|[form msg]",
     :url_friendly_name "is",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 2,
     :name "deftest",
     :updated_at "2010-11-08 23:37:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2495",
     :line "593",
     :arglists_comp "[name & body]",
     :url_friendly_name "deftest",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 115,
     :ns "clojure.test",
     :updated_at "2010-11-08 23:19:34.0",
     :function "testing",
     :version 3,
     :created_at "2010-11-08 23:15:46.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(:use 'clojure.test)\n\n(testing \"Arithmetic\"\n  (testing \"with positive integers\"\n    (is (= 4 (+ 2 2)))\n    (is (= 7 (+ 3 4))))\n  (testing \"with negative integers\"\n    (is (= -4 (+ -2 -2)))\n    (is (= -1 (+ 3 -4)))))\n=> true\n\n\n---------------------------------------------------------------------------\n\n(testing \"Arithmetic\"\n  (testing \"with positive integers\"\n    (is (= 4 (+ 2 2)))\n    (is (= 7 (+ 3 4))))\n  (testing \"with negative integers\"\n    (is (= -5 (+ -2 -2)))                ;error here\n    (is (= -1 (+ 3 -4)))))\n\n=> FAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:641)\nArithmetic with negative integers        ;bread crumb trail\nexpected: (= -5 (+ -2 -2))\n  actual: (not (= -5 -4))\ntrue"}],
   :id 6043,
   :name "testing",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6043"},
  "net.licenser.sandbox.tester/run-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5106,
   :name "run-list",
   :ns "net.licenser.sandbox.tester",
   :url "http://clojuredocs.org/v/5106"},
  "clojure.core/format"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "printf",
     :updated_at "2011-03-08 10:56:58.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1918",
     :line "4577",
     :arglists_comp "[fmt & args]",
     :url_friendly_name "printf",
     :file "clojure/core.clj"}
    {:namespace_id 109,
     :weight 0,
     :name "cl-format",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2364",
     :line "27",
     :arglists_comp "[writer format-in & args]",
     :url_friendly_name "cl-format",
     :file "clojure/pprint/cl_format.clj"}
    {:namespace_id 340,
     :weight 2,
     :name "print-table",
     :updated_at "2012-02-21 21:43:47.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:14:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5943",
     :line "11",
     :arglists_comp "[ks rows]|[rows]",
     :url_friendly_name "print-table",
     :file "clojure/pprint/print_table.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-28 07:08:43.0",
     :function "format",
     :version 6,
     :created_at "2010-07-22 20:06:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; See http://download.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html\n;; for formatting options.\nuser=> (format \"Hello there, %s\" \"bob\")\n\"Hello there, bob\"\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-22 21:54:22.0",
     :function "format",
     :version 4,
     :created_at "2012-03-10 20:30:28.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (format \"%5d\" 3)\n\"    3\"\n\nuser=> (format \"Pad with leading zeros %07d\" 5432)\n\"Pad with leading zeros 0005432\"\n\nuser=> (format \"Left justified :%-7d:\" 5432)\n\"Left justified :5432   :\"\n\nuser=> (format \"Locale-specific group separators %,12d\" 1234567)\n\"Locale-specific group separators    1,234,567\"\n\nuser=> (format \"decimal %d  octal %o  hex %x  upper-case hex %X\" 63 63 63 63)\n\"decimal 63  octal 77  hex 3f  upper-case hex 3F\"\n\n;;    ====== Clojure format/printf and large integers =====\n\n;; This big number doesn't fit in a Long.  It is a\n;; clojure.lang.BigInt, which format cannot handle directly.\nuser=> (format \"%5d\" 12345678901234567890)\nIllegalFormatConversionException d != clojure.lang.BigInt  java.util.Formatter$FormatSpecifier.failConversion (Formatter.java:3999)\n\n;; You can convert it to a java.math.BigInteger, which format does handle.\nuser=> (format \"%5d\" (biginteger 12345678901234567890))\n\"12345678901234567890\"\n\n;; If you do this very often, you might want to use something like\n;; format-plus to avoid sprinkling your code with calls to biginteger.\n(defn coerce-unformattable-types [args]\n  (map (fn [x]\n         (cond (instance? clojure.lang.BigInt x) (biginteger x)\n               (instance? clojure.lang.Ratio x) (double x)\n               :else x))\n       args))\n\n(defn format-plus [fmt & args]\n  (apply format fmt (coerce-unformattable-types args)))\n\n;; Now this works:\nuser=> (format-plus \"%5d\" 12345678901234567890)\n\"12345678901234567890\""}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-22 21:38:56.0",
     :function "format",
     :version 2,
     :created_at "2012-03-10 20:38:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;  ==== Clojure format/printf and floating-point formats ====\nuser=> (format \"%.3f\" 2.0)\n\"2.000\"\n\n;; format doesn't handle integers or ratios with %e, %f, %g, or %a\nuser=> (format \"%.3f\" 2)\nIllegalFormatConversionException f != java.lang.Long  java.util.Formatter$FormatSpecifier.failConversion (Formatter.java:3999)\n\n;; In general, if you want to use floating-point formats %e, %f, %g,\n;; or %a with format or printf, and you don't know whether the values\n;; you want to format are floats or doubles, you should convert them:\nuser=> (format \"%.3f\" (double 2))\n\"2.000\"\n\nuser=> (format \"%.3f\" (double (/ 5 2)))\n\"2.500\"\n\n;; One could make a function that parses the format string to look for\n;; %f and other floating-point formats and automatically coerces the\n;; corresponding arguments to doubles, but such a function probably\n;; wouldn't fit into a short example.  You could also consider using\n;; cl-format which does handle these kinds of things for you.  The main\n;; disadvantage to doing so is that you have to learn a different syntax\n;; for format specifiers."}],
   :id 5524,
   :name "format",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5524"},
  "ring.adapter.httpcore/ring.adapter.httpcore.proxy$java.lang.Object$HttpRequestHandler$a05992c9"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2615,
   :name
   "ring.adapter.httpcore.proxy$java.lang.Object$HttpRequestHandler$a05992c9",
   :ns "ring.adapter.httpcore",
   :url "http://clojuredocs.org/v/2615"},
  "clojure.core/delay"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "delay?",
     :updated_at "2011-06-20 21:02:20.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:30.0",
     :added nil,
     :url "http://clojuredocs.org/v/2033",
     :line "628",
     :arglists_comp "[x]",
     :url_friendly_name "delay_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "force",
     :updated_at "2011-06-24 01:58:54.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1950",
     :line "633",
     :arglists_comp "[x]",
     :url_friendly_name "force",
     :file "clojure/core.clj"}
    {:namespace_id 330,
     :weight 1,
     :name "realized?",
     :updated_at "2012-02-21 10:05:39.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:09:44.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5705",
     :line "6502",
     :arglists_comp "[x]",
     :url_friendly_name "realized_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "memoize",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/1886",
     :line "5082",
     :arglists_comp "[f]",
     :url_friendly_name "memoize",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:13:08.0",
     :function "delay",
     :version 3,
     :created_at "2010-08-02 01:32:45.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; In this example you can see that the first time the delay is forced\n;; the println is executed however the second dereference shows just the\n;; precomputed value.\n\nuser=> (def my-delay (delay (println \"did some work\") 100))\n#'user/my-delay\n\nuser=> @my-delay\ndid some work\n100\n\nuser=> @my-delay\n100\n"}],
   :id 5460,
   :name "delay",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5460"},
  "net.cgrand.enlive-html/snippet"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3934,
   :name "snippet",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3934"},
  "clojure.main/repl-exception"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5915,
   :name "repl-exception",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5915"},
  "clojure.contrib.pprint/compiled-format959"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5238,
   :name "compiled-format959",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/5238"},
  "clojure.contrib.def/defmacro-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 9,
   :name "defmacro-",
   :ns "clojure.contrib.def",
   :url "http://clojuredocs.org/v/9"},
  "clj-swing.example/menu-example"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5189,
   :name "menu-example",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5189"},
  "incanter.processing/screen-z"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3179,
   :name "screen-z",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3179"},
  "clojure.contrib.datalog.softstrat/evaluate-soft-work-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 175,
   :name "evaluate-soft-work-set",
   :ns "clojure.contrib.datalog.softstrat",
   :url "http://clojuredocs.org/v/175"},
  "clojure.contrib.fnmap.PersistentFnMap/-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 326,
   :name "-seq",
   :ns "clojure.contrib.fnmap.PersistentFnMap",
   :url "http://clojuredocs.org/v/326"},
  "swank.commands.completion/potiential-classes-on-path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4149,
   :name "potiential-classes-on-path",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4149"},
  "incanter.processing/ADD"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3194,
   :name "ADD",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3194"},
  "clojure.core/prefers"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "prefer-method",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1896",
     :line "1370",
     :arglists_comp "[multifn dispatch-val-x dispatch-val-y]",
     :url_friendly_name "prefer-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "get-method",
     :updated_at "2011-08-21 03:34:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/2097",
     :line "1382",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "get-method",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5667,
   :name "prefers",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5667"},
  "swank.rpc/print-object"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4305,
   :name "print-object",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4305"},
  "circumspec.contrib-mocking/never"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3641,
   :name "never",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3641"},
  "clojure.contrib.datalog.database/relation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 153,
   :name "relation",
   :ns "clojure.contrib.datalog.database",
   :url "http://clojuredocs.org/v/153"},
  "circumspec.utils/java-props->sh-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3764,
   :name "java-props->sh-args",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3764"},
  "clojure.core/with-loading-context"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5844,
   :name "with-loading-context",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5844"},
  "clojure.contrib.base64/caught"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3792,
   :name "caught",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3792"},
  "incanter.stats/sum-of-square-devs-from-mean"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3286,
   :name "sum-of-square-devs-from-mean",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3286"},
  "midje.unprocessed/user-file-position"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4360,
   :name "user-file-position",
   :ns "midje.unprocessed",
   :url "http://clojuredocs.org/v/4360"},
  "clojure.contrib.mock.test-adapter/no-matching-function-signature"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 731,
   :name "no-matching-function-signature",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/731"},
  "incanter.stats/kendalls-tau-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3347,
   :name "kendalls-tau-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3347"},
  "clojure.contrib.logging/info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 634,
   :name "info",
   :ns "clojure.contrib.logging",
   :url "http://clojuredocs.org/v/634"},
  "clojure.stacktrace/e"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5991,
   :name "e",
   :ns "clojure.stacktrace",
   :url "http://clojuredocs.org/v/5991"},
  "swank.commands.inspector/inspector-range"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4235,
   :name "inspector-range",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4235"},
  "circumspec.for-all/string-of"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3667,
   :name "string-of",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3667"},
  "clojure.core/unchecked-dec"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unchecked-add",
     :updated_at "2010-11-08 03:25:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1700",
     :line "955",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-add",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-dec",
     :updated_at "2010-11-08 03:52:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1540",
     :line "941",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-dec",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-inc",
     :updated_at "2010-11-08 03:53:43.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/1632",
     :line "934",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-inc",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "unchecked-negate",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1645",
     :line "948",
     :arglists_comp "[x]",
     :url_friendly_name "unchecked-negate",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-divide",
     :updated_at "2011-08-20 23:49:42.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/2111",
     :line "976",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-divide",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-subtract",
     :updated_at "2010-11-08 03:42:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/1768",
     :line "962",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-subtract",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-multiply",
     :updated_at "2011-08-21 00:16:32.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1533",
     :line "969",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-multiply",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "unchecked-remainder",
     :updated_at "2010-11-08 03:47:39.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2023",
     :line "983",
     :arglists_comp "[x y]",
     :url_friendly_name "unchecked-remainder",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 17:58:44.0",
     :function "unchecked-dec",
     :version 2,
     :created_at "2010-11-08 03:52:22.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (unchecked-dec 4)\n3\n\nuser=> (unchecked-dec Integer/MIN_VALUE)\n2147483647\n\n"}],
   :id 5803,
   :name "unchecked-dec",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5803"},
  "clojure.contrib.accumulators/empty-maximum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5,
   :name "empty-maximum",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/5"},
  "swank.rpc/rpc-fn-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4310,
   :name "rpc-fn-map",
   :ns "swank.rpc",
   :url "http://clojuredocs.org/v/4310"},
  "clj-swing.panel/panel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5223,
   :name "panel",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5223"},
  "leiningen.pom/make-mailing-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3566,
   :name "make-mailing-list",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3566"},
  "leiningen.pom/disclaimer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3562,
   :name "disclaimer",
   :ns "leiningen.pom",
   :url "http://clojuredocs.org/v/3562"},
  "swank.core/local-non-functions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4116,
   :name "local-non-functions",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4116"},
  "clojure.contrib.mock/returns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5256,
   :name "returns",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5256"},
  "clojure.test.junit/failure-el"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6054,
   :name "failure-el",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6054"},
  "clojure.core/finally"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "try",
     :updated_at "2010-10-25 01:37:14.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5275",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "try",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "catch",
     :updated_at "2010-10-25 01:36:12.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/5281",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "catch",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-28 07:57:08.0",
     :function "finally",
     :version 2,
     :created_at "2010-10-28 03:10:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(try\n  (/ 1 0)\n  (catch ArithmeticException e (str \"caught exception: \" (.getMessage e)))\n  (finally (prn \"final exception.\")))\n\"final exception.\"\n\"caught exception: Divide by zero\""}],
   :id 6139,
   :name "finally",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6139"},
  "clojure.contrib.io/writer"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 498,
   :name "writer",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/498"},
  "clojure.core/gensym"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:08:09.0",
     :function "gensym",
     :version 3,
     :created_at "2010-08-02 12:19:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (gensym \"foo\")\nfoo2020\n\nuser=> (gensym \"foo\")\nfoo2027\n\nuser=> (gensym \"foo\")\n;; ...\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:08:35.0",
     :function "gensym",
     :version 3,
     :created_at "2010-08-02 12:21:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (gensym)\nG__2034\n\nuser=> (let [my-unique-sym (gensym)]\n         my-unique-sym)\nG__2075\n"}],
   :id 5534,
   :name "gensym",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5534"},
  "clojure.contrib.pprint.utilities/rtrim"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 898,
   :name "rtrim",
   :ns "clojure.contrib.pprint.utilities",
   :url "http://clojuredocs.org/v/898"},
  "clojure.contrib.pprint.pretty-writer/write-white-space"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 837,
   :name "write-white-space",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/837"},
  "swank.util/keep-bindings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4086,
   :name "keep-bindings",
   :ns "swank.util",
   :url "http://clojuredocs.org/v/4086"},
  "clj-ssh.ssh/session"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1461,
   :name "session",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1461"},
  "clojure.core/floats"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5516,
   :name "floats",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5516"},
  "clojure.zip/path"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6112,
   :name "path",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6112"},
  "clojure.string/trim-newline"
  {:comments [],
   :see-alsos
   [{:namespace_id 113,
     :weight 1,
     :name "trim",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:49.0",
     :added nil,
     :url "http://clojuredocs.org/v/2469",
     :line "184",
     :arglists_comp "[s]",
     :url_friendly_name "trim",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "triml",
     :updated_at "2010-11-08 03:15:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:55.0",
     :added nil,
     :url "http://clojuredocs.org/v/2478",
     :line "190",
     :arglists_comp "[s]",
     :url_friendly_name "triml",
     :file "clojure/string.clj"}
    {:namespace_id 113,
     :weight 1,
     :name "trimr",
     :updated_at "2010-11-08 03:13:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/2475",
     :line "201",
     :arglists_comp "[s]",
     :url_friendly_name "trimr",
     :file "clojure/string.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-08-02 01:25:09.0",
     :function "trim-newline",
     :version 2,
     :created_at "2010-08-02 01:25:09.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (clojure.string/trim-newline \"test\\n\\r\")\r\n\"test\"\r\n</pre>"}],
   :id 6008,
   :name "trim-newline",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6008"},
  "clojure.contrib.dataflow/build-source-cell"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 103,
   :name "build-source-cell",
   :ns "clojure.contrib.dataflow",
   :url "http://clojuredocs.org/v/103"},
  "incanter.processing/PI"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3115,
   :name "PI",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3115"},
  "circumspec.runner/error-result"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3740,
   :name "error-result",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3740"},
  "lancet/subant"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3412,
   :name "subant",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3412"},
  "clojure.core/bound-fn"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "bound-fn*",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1767",
     :line "1514",
     :arglists_comp "[f]",
     :url_friendly_name "bound-fn*",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-14 17:05:07.0",
     :function "bound-fn",
     :version 1,
     :created_at "2012-03-14 17:05:07.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(def ^:dynamic *some-var* nil)\n\n(defn f [] (println *some-var*))\n\n;; run f without a new binding\nuser=> (f)\nnil\nnil\n\n;; run f with a new binding\nuser=> (binding [*some-var* \"hello\"]\n         (f))\nhello\nnil\n\n;; run f in a thread with a new binding\nuser=> (binding [*some-var* \"goodbye\"]\n         (.start (Thread. f)))\nnil\nnil\n\n;; run a bound f in a thread with a new binding\nuser=> (binding [*some-var* \"goodbye\"]\n         (.start (Thread. (bound-fn [] (f)))))\ngoodbye\nnil\n"}],
   :id 5394,
   :name "bound-fn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5394"},
  "leiningen.compile/get-jvm-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3507,
   :name "get-jvm-args",
   :ns "leiningen.compile",
   :url "http://clojuredocs.org/v/3507"},
  "clojure.contrib.pprint/*print-pretty*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 993,
   :name "*print-pretty*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/993"},
  "swank.util.string/largest-common-prefix"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4095,
   :name "largest-common-prefix",
   :ns "swank.util.string",
   :url "http://clojuredocs.org/v/4095"},
  "clojure.core/add-watch"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "remove-watch",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1715",
     :line "1631",
     :arglists_comp "[reference key]",
     :url_friendly_name "remove-watch",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-12-28 18:46:07.0",
     :function "add-watch",
     :version 5,
     :created_at "2010-07-17 11:11:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Add useful context to watcher function:\n(defn watch-agent [_agent context]\n    (let [watch-fn (fn [_context _key _ref old-value new-value] ;...\n               )] \n        (add-watch _agent nil (partial watch-fn context))))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-22 07:41:51.0",
     :function "add-watch",
     :version 3,
     :created_at "2012-12-28 18:52:23.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; timing of agent actions and watches using nrepl (ymmv)\nuser> (def a (agent 0))\n#'user/a\nuser> a\n#<Agent@2bd9c3e7: 0>\nuser> (add-watch a :key (fn [k r os ns] (print k r os ns)))\n#<Agent@2bd9c3e7: 0>\nuser> (send a inc)\n:key #<Agent@2bd9c3e7: 1> 0 1\n#<Agent@2bd9c3e7: 1>\nuser> a\n:key #<Agent@2bd9c3e7: 2> 1 2\n#<Agent@2bd9c3e7: 2>\n"}],
   :id 5339,
   :name "add-watch",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5339"},
  "clojure.contrib.http.agent/request-uri"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 463,
   :name "request-uri",
   :ns "clojure.contrib.http.agent",
   :url "http://clojuredocs.org/v/463"},
  "swank.loader/swank-version"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4299,
   :name "swank-version",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4299"},
  "clojure.contrib.test-is/report"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1384,
   :name "report",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1384"},
  "clojure.contrib.find-namespaces/read-ns-decl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 307,
   :name "read-ns-decl",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/307"},
  "incanter.latex/latex"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2967,
   :name "latex",
   :ns "incanter.latex",
   :url "http://clojuredocs.org/v/2967"},
  "clojure.core/with-precision"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-07-16 18:25:49.0",
     :function "with-precision",
     :version 5,
     :created_at "2010-09-06 15:30:16.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The \"M\" suffix denotes a BigDecimal instance\n;; http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html\n\nuser=> (with-precision 10 (/ 1M 6))\n0.1666666667M\n\nuser=> (.floatValue 0.1666666667M)\n0.16666667\n"}],
   :id 5849,
   :name "with-precision",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5849"},
  "clojure.core/distinct?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-13 19:15:28.0",
     :function "distinct?",
     :version 2,
     :created_at "2010-07-13 19:15:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (distinct? 1 2 3)\r\ntrue\r\nuser=> (distinct? 1 2 3 3)\r\nfalse</pre>"}],
   :id 5473,
   :name "distinct?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5473"},
  "clojure.contrib.macro-utils/mexpand-all"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 661,
   :name "mexpand-all",
   :ns "clojure.contrib.macro-utils",
   :url "http://clojuredocs.org/v/661"},
  "incanter.stats/principal-components"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3266,
   :name "principal-components",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3266"},
  "incanter.processing/MAX_FLOAT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3193,
   :name "MAX_FLOAT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3193"},
  "clojure.test/is"
  {:comments [],
   :see-alsos
   [{:namespace_id 115,
     :weight 1,
     :name "are",
     :updated_at "2010-10-20 04:42:19.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:24.0",
     :added nil,
     :url "http://clojuredocs.org/v/2518",
     :line "551",
     :arglists_comp "[argv expr & args]",
     :url_friendly_name "are",
     :file "clojure/test.clj"}
    {:namespace_id 115,
     :weight 2,
     :name "deftest",
     :updated_at "2010-11-08 23:37:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:28:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/2495",
     :line "593",
     :arglists_comp "[name & body]",
     :url_friendly_name "deftest",
     :file "clojure/test.clj"}],
   :examples
   [{:namespace_id 347,
     :ns "clojure.test",
     :updated_at "2012-10-17 08:49:42.0",
     :function "is",
     :version 2,
     :created_at "2012-10-16 15:12:39.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(use '[clojure.test :only [is]])\n\nuser=> (is (true? true))\ntrue\n\n;; false assertions print a message and evaluate to false\n\nuser=> (is (true? false))\nFAIL in clojure.lang.PersistentList$EmptyList@1 (NO_SOURCE_FILE:1)\nexpected: (true? false)\n  actual: (not (true? false))\nfalse\n\n"}],
   :id 6033,
   :name "is",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6033"},
  "clojure.contrib.swing-utils/add-key-typed-listener"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1354,
   :name "add-key-typed-listener",
   :ns "clojure.contrib.swing-utils",
   :url "http://clojuredocs.org/v/1354"},
  "clojure.contrib.str-utils2/join"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1270,
   :name "join",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1270"},
  "incanter.core/view"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2785,
   :name "view",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2785"},
  "incanter.processing/ambient-light"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2991,
   :name "ambient-light",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2991"},
  "clojure.contrib.sql/create-table"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1246,
   :name "create-table",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1246"},
  "incanter.processing/P3D"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3063,
   :name "P3D",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3063"},
  "clojure.core/letfn"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-08 14:57:40.0",
     :user_id 379,
     :function "letfn",
     :version "1.2.0",
     :created_at "2011-09-08 14:57:40.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Using `letfn` allows you to create local functions that reference each other whereas `(let myfunc #(...)]...)` wouldn't because it executes its bindings serially."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "let",
     :updated_at "2011-08-10 01:35:26.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/1585",
     :line "3461",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "let",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-20 11:43:30.0",
     :function "letfn",
     :version 6,
     :created_at "2010-07-14 20:06:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (letfn [(twice [x]\n                 (* x 2))\n               (six-times [y]\n                 (* (twice y) 3))]\n         (println \"Twice 15 =\" (twice 15))\n         (println \"Six times 15 =\" (six-times 15)))\nTwice 15 = 30\nSix times 15 = 90\nnil\n\n;; Unable to resolve symbol: twice in this context\nuser=> (twice 4)\n; Evaluation aborted.\n\n;; Unable to resolve symbol: six-times in this context\nuser=> (six-times 100)\n; Evaluation aborted.\n"}],
   :id 5581,
   :name "letfn",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5581"},
  "clojure.core/->Vec"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5322,
   :name "->Vec",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5322"},
  "incanter.processing/create-input"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3248,
   :name "create-input",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3248"},
  "clojure.java.io/IOFactory"
  {:comments [],
   :see-alsos
   [{:namespace_id 104,
     :weight 1,
     :name "reader",
     :updated_at "2010-11-20 16:02:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/2147",
     :line "80",
     :arglists_comp "[x & opts]",
     :url_friendly_name "reader",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "writer",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/2142",
     :line "98",
     :arglists_comp "[x & opts]",
     :url_friendly_name "writer",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "input-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/2153",
     :line "115",
     :arglists_comp "[x & opts]",
     :url_friendly_name "input-stream",
     :file "clojure/java/io.clj"}
    {:namespace_id 104,
     :weight 0,
     :name "output-stream",
     :updated_at "2010-10-20 04:42:16.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/2137",
     :line "132",
     :arglists_comp "[x & opts]",
     :url_friendly_name "output-stream",
     :file "clojure/java/io.clj"}],
   :examples [],
   :id 5879,
   :name "IOFactory",
   :ns "clojure.java.io",
   :url "http://clojuredocs.org/v/5879"},
  "swank.swank/-main"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4318,
   :name "-main",
   :ns "swank.swank",
   :url "http://clojuredocs.org/v/4318"},
  "circumspec.for-all/generator"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3682,
   :name "generator",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3682"},
  "lancet/bzip2"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3435,
   :name "bzip2",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3435"},
  "clojure.contrib.classpath/classpath-jarfiles"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 41,
   :name "classpath-jarfiles",
   :ns "clojure.contrib.classpath",
   :url "http://clojuredocs.org/v/41"},
  "net.cgrand.enlive-html/whitespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3830,
   :name "whitespace",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3830"},
  "clojure.contrib.graph/recursive-component?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 438,
   :name "recursive-component?",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/438"},
  "lancet/parallel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3492,
   :name "parallel",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3492"},
  "circumspec.for-all/famous-string*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3675,
   :name "famous-string*",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3675"},
  "clojure.contrib.repl-ln/repl"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1146,
   :name "repl",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1146"},
  "clj-swing.label/label"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5184,
   :name "label",
   :ns "clj-swing.label",
   :url "http://clojuredocs.org/v/5184"},
  "clojure.contrib.trace/trace-indent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1411,
   :name "trace-indent",
   :ns "clojure.contrib.trace",
   :url "http://clojuredocs.org/v/1411"},
  "circumspec.runner/run-tests-and-exit"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3739,
   :name "run-tests-and-exit",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3739"},
  "clojure.contrib.pprint/*print-radix*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 862,
   :name "*print-radix*",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/862"},
  "lancet/has-run?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3461,
   :name "has-run?",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3461"},
  "clojure.contrib.accumulators/maximum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4,
   :name "maximum",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/4"},
  "clojure.core/load-file"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-15 18:42:11.0",
     :user_id 262,
     :function "load-file",
     :version "1.3.0",
     :created_at "2012-10-15 18:42:11.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "<p>Be aware that this function is intended to load code only. If your data structures or a string in them grow bigger than around 65,535 it crashes.</p>\n\n<p>Exception similar to:</p>\n<pre>java.lang.ClassFormatError: Unknown constant tag 49 in class file parse$eval13</pre>\n\n<p>Please use <a href=\"/clojure_core/clojure.core/read-string\">read-string</a> instead.</p>\n\nExample: <pre>(read-string (slurp \"data.clj\"))</pre>\n\nSource: <a href=\"http://groups.google.com/group/clojure/browse_thread/thread/e556434a382de814/f8183c88db8fa257?lnk=gst&q=string+size#f8183c88db8fa257\">Google Groups</a>"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "load",
     :updated_at "2011-06-12 20:39:31.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1857",
     :line "4887",
     :arglists_comp "[& paths]",
     :url_friendly_name "load",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "spit",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1555",
     :line "5380",
     :arglists_comp "[f content & options]",
     :url_friendly_name "spit",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-08-13 19:48:34.0",
     :function "load-file",
     :version 3,
     :created_at "2010-10-05 02:38:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Very useful from a REPL\n;; Paths are specified as strings using canonical file path notation \n;; (rather than clojure-style namespaces dependent on the JVM classpath).\n;; The working directory is set to wherever you invoked the JVM from, \n;; likely the project root.\n\n(load-file \"src/mylib/core.clj\")\n\n;; now you can go and evaluate vars defined in that file."}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-12 20:42:28.0",
     :function "load-file",
     :version 2,
     :created_at "2011-06-12 20:42:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; file located at src/address_book/core.clj\n;; current dir is src/..\n\n(load-file \"src/address_book/core.clj\")"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 16:43:00.0",
     :function "load-file",
     :version 1,
     :created_at "2011-08-21 16:43:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; create a clojure file on the fly using spit\n;; then load it into the REPL and use its function\n\nuser=> (spit \"mycode.clj\" \"(defn doub [x] (* x 2))\")\nnil\nuser=> (load-file \"mycode.clj\")\n#'user/doub\nuser=> (doub 23)\n46\nuser=>"}],
   :id 5587,
   :name "load-file",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5587"},
  "clojure.core/shorts"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "short-array",
     :updated_at "2011-08-20 23:37:22.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:03.0",
     :added nil,
     :url "http://clojuredocs.org/v/1559",
     :line "4168",
     :arglists_comp "[size-or-seq]|[size init-val-or-seq]",
     :url_friendly_name "short-array",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5755,
   :name "shorts",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5755"},
  "incanter.processing/text-size"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2995,
   :name "text-size",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/2995"},
  "clojure.core/unquote"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "unquote-splicing",
     :updated_at "2011-05-10 18:36:57.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:26.0",
     :added nil,
     :url "http://clojuredocs.org/v/1676",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "unquote-splicing",
     :file nil}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-10 18:31:05.0",
     :function "unquote",
     :version 2,
     :created_at "2011-05-10 18:29:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (let [x 2]\n         `(1 x 3))\n(1 user/x 3)\n\nuser=> (let [x 2]\n         `(1 ~x 3))\n(1 2 3)\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-10-21 04:32:09.0",
     :function "unquote",
     :version 1,
     :created_at "2011-10-21 04:32:09.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> `(1 (dec 3) 3)\n\n(1 (clojure.core/dec 3) 3)\n\nuser => `(1 ~(dec 3) 3)\n\n(1 2 3)"}],
   :id 5821,
   :name "unquote",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5821"},
  "clojure.core.protocols/internal-reduce"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5858,
   :name "internal-reduce",
   :ns "clojure.core.protocols",
   :url "http://clojuredocs.org/v/5858"},
  "clojure.inspector/list-provider"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5872,
   :name "list-provider",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5872"},
  "incanter.processing/no-cursor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3149,
   :name "no-cursor",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3149"},
  "circumspec.config/defconfig"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3626,
   :name "defconfig",
   :ns "circumspec.config",
   :url "http://clojuredocs.org/v/3626"},
  "incanter.processing/load-shape"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3107,
   :name "load-shape",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3107"},
  "clojure.string/join"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "split-at",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1724",
     :line "2218",
     :arglists_comp "[n coll]",
     :url_friendly_name "split-at",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "split-with",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:43.0",
     :added nil,
     :url "http://clojuredocs.org/v/1614",
     :line "2224",
     :arglists_comp "[pred coll]",
     :url_friendly_name "split-with",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "interpose",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:52.0",
     :added nil,
     :url "http://clojuredocs.org/v/1978",
     :line "4084",
     :arglists_comp "[sep coll]",
     :url_friendly_name "interpose",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-08-20 09:13:49.0",
     :function "join",
     :version 2,
     :created_at "2010-08-20 09:13:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (clojure.string/join \", \" [1 2 3])\r\n\"1, 2, 3\"\r\n</pre>"}
    {:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-10-03 07:11:54.0",
     :function "join",
     :version 4,
     :created_at "2010-10-03 03:59:07.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Splits a string on space character and joins \n;; the resulting collection with a line feed character\n\n(use '[clojure.string :only (join split)])\n\nuser=> (println\n         (join \"\\n\"\n           (split \"The Quick Brown Fox\" #\"\\s\")))\nThe\nQuick\nBrown\nFox\nnil"}],
   :id 6000,
   :name "join",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/6000"},
  "clojure.contrib.repl-ln/print-repl-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1137,
   :name "print-repl-info",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1137"},
  "clojure.contrib.generic.math-functions/tan"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 409,
   :name "tan",
   :ns "clojure.contrib.generic.math-functions",
   :url "http://clojuredocs.org/v/409"},
  "incanter.processing/light-specular"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3039,
   :name "light-specular",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3039"},
  "clojure.core/thread-bound?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "bound-fn",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:35.0",
     :added nil,
     :url "http://clojuredocs.org/v/1525",
     :line "1525",
     :arglists_comp "[& fntail]",
     :url_friendly_name "bound-fn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "bound-fn*",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1767",
     :line "1514",
     :arglists_comp "[f]",
     :url_friendly_name "bound-fn*",
     :file "clojure/core.clj"}],
   :examples [],
   :id 5790,
   :name "thread-bound?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5790"},
  "circumspec.runner/base-result"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3719,
   :name "base-result",
   :ns "circumspec.runner",
   :url "http://clojuredocs.org/v/3719"},
  "circumspec.should/default-error-message"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3710,
   :name "default-error-message",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3710"},
  "clojure.contrib.graph/component-graph"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 434,
   :name "component-graph",
   :ns "clojure.contrib.graph",
   :url "http://clojuredocs.org/v/434"},
  "clojure.repl/dir-fn"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 110,
     :ns "clojure.repl",
     :updated_at "2010-09-08 13:22:59.0",
     :function "dir-fn",
     :version 2,
     :created_at "2010-09-08 13:22:59.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=> (require 'clojure.repl 'clojure.string)\r\n\r\nuser=> (pprint (clojure.repl/dir-fn 'clojure.string))\r\n(blank?\r\n capitalize\r\n escape\r\n join\r\n lower-case\r\n replace\r\n replace-first\r\n reverse\r\n split\r\n split-lines\r\n trim\r\n trim-newline\r\n triml\r\n trimr\r\n upper-case)\r\nnil\r\n</pre>"}],
   :id 5969,
   :name "dir-fn",
   :ns "clojure.repl",
   :url "http://clojuredocs.org/v/5969"},
  "clojure.core/get-method"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "remove-method",
     :updated_at "2011-08-21 02:30:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1528",
     :line "1364",
     :arglists_comp "[multifn dispatch-val]",
     :url_friendly_name "remove-method",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "methods",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1930",
     :line "1377",
     :arglists_comp "[multifn]",
     :url_friendly_name "methods",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 03:34:43.0",
     :function "get-method",
     :version 1,
     :created_at "2011-08-21 03:34:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; define a multi-method, then demonstrate that you may use \n;; get-method in the same way you can call the method directly\n\nuser=> (defmulti tos :Ob)\n#'user/tos\nuser=> (defn line [p1 p2] {:Ob :line :p1 p1 :p2 p2})\n#'user/line\nuser=> (defn circle [cent rad] {:Ob :circle :cent cent :rad rad})\n#'user/circle\nuser=> (defmethod tos :line [l] (str \"Line:\" (l :p1) (l :p2)))\n#<MultiFn clojure.lang.MultiFn@a0b1cd0>\nuser=> (defmethod tos :circle [c] (str \"Circle:\" (c :cent) (c :rad)))\n#<MultiFn clojure.lang.MultiFn@a0b1cd0>\nuser=> (println (tos (circle [2 3] 3.3)))\nCircle:[2 3]3.3\nnil\nuser=> (println (tos (line [1 1][0 0])))\nLine:[1 1][0 0]\nnil\nuser=> (println ((get-method tos :line) (line [1 2][3 4]) ))\nLine:[1 2][3 4]\nnil\nuser=>"}],
   :id 5537,
   :name "get-method",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5537"},
  "swank.commands.basic/operator-arglist"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3972,
   :name "operator-arglist",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/3972"},
  "clojure.core/supers"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "type",
     :updated_at "2011-05-15 18:40:21.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:54.0",
     :added nil,
     :url "http://clojuredocs.org/v/2068",
     :line "2656",
     :arglists_comp "[x]",
     :url_friendly_name "type",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "instance?",
     :updated_at "2011-08-21 22:07:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/1519",
     :line "124",
     :arglists_comp "[c x]",
     :url_friendly_name "instance_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "bases",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:41.0",
     :added nil,
     :url "http://clojuredocs.org/v/1697",
     :line "4380",
     :arglists_comp "[c]",
     :url_friendly_name "bases",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-06-08 04:02:02.0",
     :function "supers",
     :version 1,
     :created_at "2011-06-08 04:02:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";;find superclasses and interfaces of Java objects...\nuser> (supers Object)\nnil\n\nuser> (supers String)\n#{java.lang.Comparable java.lang.CharSequence java.io.Serializable java.lang.Object}\n\n;;...or Java interfaces\nuser> (supers javax.naming.Name)\n#{java.lang.Cloneable java.lang.Comparable java.io.Serializable}\n\n;;Also with clojure types...\nuser> (defrecord MyThing [a b c])\nuser.MyThing\n\nuser> (supers MyThing)\n#{clojure.lang.Counted java.lang.Iterable clojure.lang.IKeywordLookup clojure.lang.IObj clojure.lang.IPersistentMap clojure.lang.Associative clojure.lang.Seqable java.util.Map clojure.lang.IMeta java.io.Serializable java.lang.Object clojure.lang.IPersistentCollection clojure.lang.ILookup}\n"}],
   :id 5779,
   :name "supers",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5779"},
  "clojure.core/min-key"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:31:11.0",
     :function "min-key",
     :version 3,
     :created_at "2010-07-24 15:08:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; we have a list of key colours\n;; We want to find the one closest to a supplied colour\n;; We're storing rgb values as [r g b]\n;; use min-key to find colour that minimizes \n;; the euclidean distance between the supplied colour \n;; and each key colour\n;; thanks to rhudson, raek and mfex on #clojure\n\n(defn distance-squared [c1 c2]\n  \"Euclidean distance between two collections considered as coordinates\"\n  (->> (map - c1 c2) (map #(* % %)) (reduce +)))\n\n(def key-colours\n     {[224 41 224] :purple\n      [24 180 46] :green\n      [12 129 245] :blue\n      [254 232 23] :yellow\n      [233 233 233] :white\n      [245 27 55] :red\n      [231 119 41] :orange\n      })\n\n(defn rgb-to-key-colour\n  \"Find colour in colour map closest to the supplied [r g b] triple\"\n  [rgb-triple colour-map]\n  (colour-map\n   (apply min-key (partial distance-squared rgb-triple) (keys colour-map))))\n\nuser=> (rgb-to-key-colour [255 0 0] key-colours)\n:red\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-01-31 02:40:03.0",
     :function "min-key",
     :version 2,
     :created_at "2011-07-24 08:53:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; \"min-key\"/\"max-key\" to \"min\"/\"max\" like \"sort-by\" to \"sort\"\n(min-key #(Math/abs %) -3 1 4)\n; 1\n\n(apply min-key #(Math/abs %) [-3 1 4])\n; 1\n"}],
   :id 5614,
   :name "min-key",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5614"},
  "clojure.contrib.accumulators/add"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1,
   :name "add",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/1"},
  "clojure.core/unchecked-add-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5800,
   :name "unchecked-add-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5800"},
  "swank.commands/defslimefn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3969,
   :name "defslimefn",
   :ns "swank.commands",
   :url "http://clojuredocs.org/v/3969"},
  "leiningen.install/make-local-repo"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3550,
   :name "make-local-repo",
   :ns "leiningen.install",
   :url "http://clojuredocs.org/v/3550"},
  "clojure.core/re-matcher"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "re-find",
     :updated_at "2011-08-03 05:05:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1773",
     :line "3799",
     :arglists_comp "[m]|[re s]",
     :url_friendly_name "re-find",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-28 07:14:37.0",
     :function "re-matcher",
     :version 3,
     :created_at "2010-07-30 20:28:05.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def *matcher* (re-matcher #\"\\d+\" \"abc12345def\"))\n#'user/*matcher*\n\nuser=> (re-find *matcher*)\n\"12345\""}],
   :id 5698,
   :name "re-matcher",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5698"},
  "midje.semi-sweet/expect*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4333,
   :name "expect*",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4333"},
  "clojure.contrib.repl-ln/repl-info"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1132,
   :name "repl-info",
   :ns "clojure.contrib.repl-ln",
   :url "http://clojuredocs.org/v/1132"},
  "clojure.contrib.pprint/pprint-let"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 930,
   :name "pprint-let",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/930"},
  "swank.core/dothread-swank"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4101,
   :name "dothread-swank",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4101"},
  "clojure.contrib.jar/jar-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 524,
   :name "jar-file?",
   :ns "clojure.contrib.jar",
   :url "http://clojuredocs.org/v/524"},
  "leiningen.uberjar/read-components"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3584,
   :name "read-components",
   :ns "leiningen.uberjar",
   :url "http://clojuredocs.org/v/3584"},
  "incanter.core/length"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2901,
   :name "length",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2901"},
  "clojure.contrib.cond/cond-let"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "cond",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/1553",
     :line "491",
     :arglists_comp "[& clauses]",
     :url_friendly_name "cond",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 8,
     :ns "clojure.contrib.cond",
     :updated_at "2011-09-15 23:10:51.0",
     :function "cond-let",
     :version 2,
     :created_at "2010-11-05 19:30:07.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(cond-let [[a b c]]\n  nil     (assert false)\n  [5 2 3] (+ a b c))\n;; => 10\n"}],
   :id 55,
   :name "cond-let",
   :ns "clojure.contrib.cond",
   :url "http://clojuredocs.org/v/55"},
  "clojure.contrib.pprint/reader-macros"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 857,
   :name "reader-macros",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/857"},
  "clojure.core/unchecked-divide"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 00:13:43.0",
     :function "unchecked-divide",
     :version 2,
     :created_at "2011-08-20 23:49:42.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; demonstrate that you can use the standard divide function \"/\" to \n;; calculate 1 trillion divided by 10 but that unchecked-divide throws an error\n\nuser=> (def thous 1000)\n#'user/thous\nuser=> (def trill (* thous thous thous thous))\n#'user/trill\nuser=> (unchecked-divide trill 10)\njava.lang.IllegalArgumentException: No matching method found: unchecked_divide (NO_SOURCE_FILE:0)\nuser=> (/ trill 10)\n100000000000\nuser=>"}],
   :id 2111,
   :name "unchecked-divide",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/2111"},
  "clojure.test.junit/*depth*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6050,
   :name "*depth*",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6050"},
  "clojure.contrib.json/write-json"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 588,
   :name "write-json",
   :ns "clojure.contrib.json",
   :url "http://clojuredocs.org/v/588"},
  "circumspec.utils/with-re-defn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3761,
   :name "with-re-defn",
   :ns "circumspec.utils",
   :url "http://clojuredocs.org/v/3761"},
  "clojure.walk/macroexpand-all"
  {:comments
   [{:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-10-24 06:52:51.0",
     :user_id 763,
     :function "macroexpand-all",
     :version "1.3.0",
     :created_at "2012-10-24 06:51:06.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "DO NOT USE THIS FUNCTION, it doesn't handle special forms at all, and, as such, does not in fact expand into the ultimate macroexpansion of the form.\n\nFor example,\n<pre>(require '[clojure.walk :as walk])\n(println (walk/macroexpand-all '(quote (let [a 1] a))))\n</pre>\nWill print\n<pre>(quote (let* [a 1] a))\n</pre>\nWhen the correct answer is\n<pre>(quote (let [a 1] a))\n</pre>\nShowing an utter unawareness of proper handling of special forms\n\nDO NOT USE THIS FUNCTION"}
    {:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-11-29 09:43:58.0",
     :user_id 790,
     :function "macroexpand-all",
     :version "1.3.0",
     :created_at "2012-11-29 09:43:58.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "@Sgeo - `let` is just a macro for `let*`:\n\n    (clojure.repl/source let) =>\n\n    (defmacro let\n    \"binding => binding-form init-expr\n\n     Evaluates the exprs in a lexical context in which the symbols in\n     the binding-forms are bound to their respective init-exprs or parts\n     therein.\"\n     {:added \"1.0\", :special-form true, :forms '[(let [bindings*] exprs*)]}\n     [bindings & body]\n     (assert-args let\n         (vector? bindings) \"a vector for its binding\"\n         (even? (count bindings)) \"an even number of forms in binding vector\")\n      `(let* ~(destructure bindings) ~@body))"}
    {:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-12-02 13:53:37.0",
     :user_id 763,
     :function "macroexpand-all",
     :version "1.3.0",
     :created_at "2012-12-02 13:41:39.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "(quote (let [a 1] a)) is '(let [a 1] a) which evaluates to a list containing the symbol let, a vector [a 1], and a symbol a. In this context, the (let [a 1] a) is not code, but mere data, and as such, should not be macroexpanded at all, anymore than a string like \"(-&gt; a b c)\" should be macroexpanded into \"(c (b a))\" (and yes, I know that's not the exact macroexpansion)."}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "macroexpand-1",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1808",
     :line "3091",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand-1",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "macroexpand",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1874",
     :line "3098",
     :arglists_comp "[form]",
     :url_friendly_name "macroexpand",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-06-09 06:31:38.0",
     :function "macroexpand-all",
     :version 1,
     :created_at "2012-06-09 06:31:38.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use 'clojure.walk)\nuser=> (macroexpand-all '(-> c (+ 3) (* 2)))\n(* (+ c 3) 2)"}
    {:namespace_id 350,
     :ns "clojure.walk",
     :updated_at "2012-12-10 15:16:32.0",
     :function "macroexpand-all",
     :version 1,
     :created_at "2012-12-10 15:16:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "user=> (use 'clojure.walk)\n\n; tryclj.com and lazybot on #clojure get the following wrong\nuser=> (let [-> inc] (-> 5)) \n6\n\n; Below macroexpansion is supposed to result in equivalent code to the above\nuser=> (macroexpand-all '(let [-> inc] (-> 5)))\n(let* [-> inc] 5)\nuser=> (let* [-> inc] 5)\n5\n\n; However, as is clear above, it does not"}],
   :id 6075,
   :name "macroexpand-all",
   :ns "clojure.walk",
   :url "http://clojuredocs.org/v/6075"},
  "incanter.symbolic/fn-list"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3387,
   :name "fn-list",
   :ns "incanter.symbolic",
   :url "http://clojuredocs.org/v/3387"},
  "net.cgrand.enlive-html/attr-has"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3897,
   :name "attr-has",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3897"},
  "incanter.core/to-dataset"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2856,
   :name "to-dataset",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2856"},
  "swank.clj-contrib.pprint/pretty-pr-code"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3967,
   :name "pretty-pr-code",
   :ns "swank.clj-contrib.pprint",
   :url "http://clojuredocs.org/v/3967"},
  "clojure.contrib.test-is/function?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1385,
   :name "function?",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1385"},
  "clojure.contrib.sql.internal/throw-rollback"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1250,
   :name "throw-rollback",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1250"},
  "clojure.contrib.jmx/attribute-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 575,
   :name "attribute-names",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/575"},
  "clojure.set/map-invert"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 111,
     :ns "clojure.set",
     :updated_at "2010-09-26 05:05:49.0",
     :function "map-invert",
     :version 3,
     :created_at "2010-07-12 21:27:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Despite being in clojure.set, this has nothing to do with sets. \n\nuser=> (map-invert {:a 1, :b 2})\n{2 :b, 1 :a}\n\n;; If there are duplicate keys, one is chosen:\n\nuser=> (map-invert {:a 1, :b 1})\n{1 :b}\n\n;; I suspect it'd be unwise to depend on which key survives the clash."}],
   :id 5983,
   :name "map-invert",
   :ns "clojure.set",
   :url "http://clojuredocs.org/v/5983"},
  "clojure.test.junit/start-element"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6063,
   :name "start-element",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6063"},
  "incanter.processing/SHIFT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3148,
   :name "SHIFT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3148"},
  "clojure.contrib.java-utils/as-url"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 537,
   :name "as-url",
   :ns "clojure.contrib.java-utils",
   :url "http://clojuredocs.org/v/537"},
  "incanter.core/acos"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2916,
   :name "acos",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2916"},
  "lancet/instantiate-task"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3453,
   :name "instantiate-task",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3453"},
  "circumspec.report.nested/join-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3715,
   :name "join-lines",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3715"},
  "clojure.contrib.monads/defmonadfn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 795,
   :name "defmonadfn",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/795"},
  "clojure.data/diff-similar"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5861,
   :name "diff-similar",
   :ns "clojure.data",
   :url "http://clojuredocs.org/v/5861"},
  "clojure.core/flush"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5517,
   :name "flush",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5517"},
  "clojure.core/munge"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-29 17:48:30.0",
     :function "munge",
     :version 1,
     :created_at "2010-12-29 17:48:30.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (defn foo [] (println \"foo\"))\n#'user/foo\n\nuser> foo\n#<user$foo user$foo@a0dc71>\n\nuser> (munge foo)\n\"user_DOLLARSIGN_foo_CIRCA_a0dc71\""}],
   :id 5616,
   :name "munge",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5616"},
  "clojure.core/symbol"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "var",
     :updated_at "2010-11-08 02:40:48.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5272",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "var",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "var?",
     :updated_at "2010-11-08 03:07:49.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:42.0",
     :added nil,
     :url "http://clojuredocs.org/v/1787",
     :line "3935",
     :arglists_comp "[v]",
     :url_friendly_name "var_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "symbol?",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:38.0",
     :added nil,
     :url "http://clojuredocs.org/v/1606",
     :line "466",
     :arglists_comp "[x]",
     :url_friendly_name "symbol_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "name",
     :updated_at "2010-10-20 04:42:08.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/1800",
     :line "1240",
     :arglists_comp "[x]",
     :url_friendly_name "name",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "namespace",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1858",
     :line "1247",
     :arglists_comp "[x]",
     :url_friendly_name "namespace",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "keyword",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/1995",
     :line "506",
     :arglists_comp "[name]|[ns name]",
     :url_friendly_name "keyword",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-13 06:41:35.0",
     :function "symbol",
     :version 3,
     :created_at "2010-07-30 20:22:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Returns a symbol with the given namespace and name.\n;;\n;; (symbol name): name can be a string or a symbol.\n;;\n;; (symbol ns name): ns and name must both be strings.\n;;\n;; A symbol string begins with a non-numeric character and can contain\n;; alphanumeric characters and *, +, !, -, _, and ?.  (see\n;; http://clojure.org/reader for details).\n;;\n;; symbol does not validate input strings for ns and name, and may return\n;; improper symbols with undefined behavior for non-conformant ns and\n;; name.\n\nuser=> (symbol 'foo)\nfoo\n\nuser=> (symbol \"foo\")\nfoo\n\nuser=> (symbol \"clojure.core\" \"foo\")\nclojure.core/foo\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-13 16:09:47.0",
     :function "symbol",
     :version 1,
     :created_at "2012-03-13 16:09:47.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; some gotchas to be aware of:\n\nuser=> (symbol \"user\" 'abc)\nClassCastException clojure.lang.Symbol cannot be cast to java.lang.String  clojure.core/symbol (core.clj:523)\nuser=> (symbol *ns* \"abc\")\nClassCastException clojure.lang.Namespace cannot be cast to java.lang.String  clojure.core/symbol (core.clj:523)\nuser=> (symbol 'user \"abc\")\nClassCastException clojure.lang.Symbol cannot be cast to java.lang.String  clojure.core/symbol (core.clj:523)\n\n\n;; Warning - the following generated symbols are non-conformant and may wreak\n;; serious havoc in the near/far future when least expected...\n\nuser=> (symbol \"abc def\")\nabc def\nuser=> (symbol \"123def\")\n123def\nuser=> (symbol \"/123/def/ghi\")\n/123/def/ghi\nuser=> (symbol \"/abc/def/ghi\")\n/abc/def/ghi\n"}],
   :id 5781,
   :name "symbol",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5781"},
  "clojure.contrib.fcase/fcase"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "case",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:56.0",
     :added nil,
     :url "http://clojuredocs.org/v/1893",
     :line "5278",
     :arglists_comp "[e & clauses]",
     :url_friendly_name "case",
     :file "clojure/core.clj"}],
   :examples [],
   :id 298,
   :name "fcase",
   :ns "clojure.contrib.fcase",
   :url "http://clojuredocs.org/v/298"},
  "clojure.contrib.sql/connection"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1236,
   :name "connection",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1236"},
  "clojure.contrib.stream-utils/stream-seq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1303,
   :name "stream-seq",
   :ns "clojure.contrib.stream-utils",
   :url "http://clojuredocs.org/v/1303"},
  "clojure.contrib.shell/with-sh-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1202,
   :name "with-sh-dir",
   :ns "clojure.contrib.shell",
   :url "http://clojuredocs.org/v/1202"},
  "clojure.contrib.combinatorics/permutations"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 327,
     :ns "clojure.contrib.combinatorics",
     :updated_at "2011-01-09 23:17:05.0",
     :function "permutations",
     :version 1,
     :created_at "2011-01-09 23:17:05.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "Clojure=> (permutations [1 2 3])\n((1 2 3) (1 3 2) (2 1 3) (2 3 1) (3 1 2) (3 2 1))\nClojure=> (permutations [1 1 2])\n((1 1 2) (1 2 1) (1 1 2) (1 2 1) (2 1 1) (2 1 1))\n"}],
   :id 5254,
   :name "permutations",
   :ns "clojure.contrib.combinatorics",
   :url "http://clojuredocs.org/v/5254"},
  "clojure.contrib.repl-utils/break-threads"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 362,
   :name "break-threads",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/362"},
  "clj-ssh.ssh/sftp-channel"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1466,
   :name "sftp-channel",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1466"},
  "circumspec.test/test-function-name"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3736,
   :name "test-function-name",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3736"},
  "clojure.core.protocols/emit-array-impls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5857,
   :name "emit-array-impls",
   :ns "clojure.core.protocols",
   :url "http://clojuredocs.org/v/5857"},
  "clojure.test.junit/package-class"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6061,
   :name "package-class",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6061"},
  "circumspec.should/string-or-regex?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3749,
   :name "string-or-regex?",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3749"},
  "clojure.core/flatten"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-04-22 17:41:56.0",
     :user_id 106,
     :function "flatten",
     :version "1.3.0",
     :created_at "2012-04-22 17:41:56.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "(flatten nil) actually returns an empty sequence, not nil.  The doc string is fixed in 1.4."}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-05-13 14:55:14.0",
     :user_id 106,
     :function "flatten",
     :version "1.3.0",
     :created_at "2012-04-22 17:47:57.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "As shown in the example, flatten will return an empty sequence when given any non-sequential thing.  That can sometimes hide a bug. \n\nHere's another version that doesn't have that problem, and is faster as well.\n\n\n    (defn flatten2\n      \"Like `clojure.core/flatten` but better, stronger, faster.\n      Takes any nested combination of sequential things (lists, vectors,\n      etc.) and returns their contents as a single, flat, lazy sequence.\n      If the argument is non-sequential (numbers, maps, strings, nil, \n      etc.), returns the original argument.\"\n      {:static true}\n      [x]\n      (letfn [(flat [coll] \n                      (lazy-seq \n                       (when-let [c (seq coll)] \n                         (let [x (first c)] \n                           (if (sequential? x) \n                             (concat (flat x) (flat (rest c))) \n                             (cons x (flat (rest c))))))))]\n        (if (sequential? x) (flat x) x)))\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-07-03 07:57:54.0",
     :user_id 655,
     :function "flatten",
     :version "1.3.0",
     :created_at "2012-07-03 07:57:54.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Actually, flatten on a vector returns list, not a collection:\n\n    user=> (flatten [1 [2 3]])\n    (1 2 3)\n"}],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-07-03 07:58:09.0",
     :function "flatten",
     :version 4,
     :created_at "2010-07-16 03:04:47.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (flatten [1 [2 3]])\n(1 2 3)\n\nuser=> (flatten '(1 2 3))\n(1 2 3)\n\nuser=> (flatten '(1 2 [3 (4 5)])) \n(1 2 3 4 5)\n\nuser=> (flatten nil)\n()\n\n; Attention with stuff which is not a sequence\n\nuser=> (flatten 5)\n()\n\nuser=> (flatten {:name \"Hubert\" :age 23})\n()\n\n; Workaround for maps\n\nuser=> (flatten (seq {:name \"Hubert\" :age 23}))\n(:name \"Hubert\" :age 23)"}],
   :id 5512,
   :name "flatten",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5512"},
  "clojure.contrib.str-utils2/blank?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1286,
   :name "blank?",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1286"},
  "clojure.contrib.shell/with-sh-env"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1203,
   :name "with-sh-env",
   :ns "clojure.contrib.shell",
   :url "http://clojuredocs.org/v/1203"},
  "incanter.processing/MIN_INT"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3093,
   :name "MIN_INT",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3093"},
  "circumspec.report/pending-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3700,
   :name "pending-string",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3700"},
  "circumspec.should/message-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3746,
   :name "message-map",
   :ns "circumspec.should",
   :url "http://clojuredocs.org/v/3746"},
  "clojure.contrib.mock/make-count-checker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5248,
   :name "make-count-checker",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5248"},
  "clojure.core/future-cancel"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "future",
     :updated_at "2011-08-03 05:43:23.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1677",
     :line "5407",
     :arglists_comp "[& body]",
     :url_friendly_name "future",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future?",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/1722",
     :line "5235",
     :arglists_comp "[x]",
     :url_friendly_name "future_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-cancelled?",
     :updated_at "2010-10-20 04:42:11.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/1931",
     :line "5421",
     :arglists_comp "[f]",
     :url_friendly_name "future-cancelled_q",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "future-done?",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1618",
     :line "5240",
     :arglists_comp "[f]",
     :url_friendly_name "future-done_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:31:07.0",
     :function "future-cancel",
     :version 1,
     :created_at "2012-06-09 07:31:07.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "\nuser=> (def f (future (Thread/sleep 5000) (inc 0)))\n#'user/f\n\nuser=> (future-cancel f)                           \ntrue\n\nuser=> (future-cancelled? f)                       \ntrue"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-09 07:31:53.0",
     :function "future-cancel",
     :version 1,
     :created_at "2012-06-09 07:31:53.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "\nuser=> (def f (future (inc 0)))\n#'user/f\n\nuser=> (future-cancel f)                           \nfalse\n\nuser=> (future-cancelled? f)                       \nfalse"}],
   :id 5528,
   :name "future-cancel",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5528"},
  "clojure.contrib.pprint.pretty-writer/emit-nl?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 911,
   :name "emit-nl?",
   :ns "clojure.contrib.pprint.pretty-writer",
   :url "http://clojuredocs.org/v/911"},
  "clojure.core/max"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "max-key",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:23.0",
     :added nil,
     :url "http://clojuredocs.org/v/1506",
     :line "3947",
     :arglists_comp "[k x]|[k x y]|[k x y & more]",
     :url_friendly_name "max-key",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-17 18:48:25.0",
     :function "max",
     :version 2,
     :created_at "2010-07-17 18:48:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (max 1 2 3 4 5)  \r\n5\r\nuser=&gt; (max 5 4 3 2 1)\r\n5\r\nuser=&gt; (max 100)\r\n100\r\n</pre>"}],
   :id 5604,
   :name "max",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5604"},
  "clojure.contrib.monads/cont-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 796,
   :name "cont-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/796"},
  "clojure.contrib.io/as-url"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 516,
   :name "as-url",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/516"},
  "clojure.contrib.jmx/jmx-url"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 563,
   :name "jmx-url",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/563"},
  "clojure.core/print-special-doc"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2079,
   :name "print-special-doc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/2079"},
  "incanter.processing/P2D"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3019,
   :name "P2D",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3019"},
  "clojure.core/*verbose-defrecords*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5313,
   :name "*verbose-defrecords*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5313"},
  "swank.commands.completion/potential-static"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4125,
   :name "potential-static",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4125"},
  "clojure.contrib.repl-utils/*local-javadocs*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 330,
   :name "*local-javadocs*",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/330"},
  "clojure.contrib.repl-utils/*feeling-lucky-url*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 348,
   :name "*feeling-lucky-url*",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/348"},
  "clojure.contrib.import-static/import-static"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 487,
   :name "import-static",
   :ns "clojure.contrib.import-static",
   :url "http://clojuredocs.org/v/487"},
  "swank.core/sldb-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3996,
   :name "sldb-loop",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/3996"},
  "clojure.contrib.mock/has-matching-signature?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5243,
   :name "has-matching-signature?",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5243"},
  "clojure.core/defn-"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "defn",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1833",
     :line "242",
     :arglists_comp
     "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
     :url_friendly_name "defn",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:31:12.0",
     :function "defn-",
     :version 3,
     :created_at "2010-07-14 19:49:43.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "\nuser=> (ns test)\nnil\n\ntest=> (defn- foo []\n         \"World!\")\n#'test/foo\n\ntest=> (defn bar []\n       (str \"Hello \" (foo)))\n#'test/bar\n\ntest=> (foo)\n\"World!\"\ntest=> (bar)\n\"Hello World!\"\ntest=> (ns playground)\nnil\nplayground=> (test/bar)\n\"Hello World!\"\n\n;; Error will be thrown\n;; var: #'test/foo is not public\nplayground=> (test/foo)\n"}],
   :id 5454,
   :name "defn-",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5454"},
  "net.cgrand.enlive-html/zip-select-nodes*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3879,
   :name "zip-select-nodes*",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3879"},
  "incanter.processing/RED_MASK"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3108,
   :name "RED_MASK",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3108"},
  "lancet/waitfor"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3446,
   :name "waitfor",
   :ns "lancet",
   :url "http://clojuredocs.org/v/3446"},
  "incanter.stats/lee-distance"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3300,
   :name "lee-distance",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3300"},
  "swank.core/*sldb-restarts*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4071,
   :name "*sldb-restarts*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4071"},
  "swank.commands.inspector/inspector-nth-part"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4226,
   :name "inspector-nth-part",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4226"},
  "clojure.contrib.properties/write-properties"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1121,
   :name "write-properties",
   :ns "clojure.contrib.properties",
   :url "http://clojuredocs.org/v/1121"},
  "swank.commands.basic/documentation-symbol"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4051,
   :name "documentation-symbol",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4051"},
  "clj-swing.list/clj_swing.list.proxy$java.lang.Object$ListModel$13bc26c3"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5185,
   :name "clj_swing.list.proxy$java.lang.Object$ListModel$13bc26c3",
   :ns "clj-swing.list",
   :url "http://clojuredocs.org/v/5185"},
  "circumspec.test/testing-fn"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3720,
   :name "testing-fn",
   :ns "circumspec.test",
   :url "http://clojuredocs.org/v/3720"},
  "incanter.processing/mask-image"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3244,
   :name "mask-image",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3244"},
  "clj-swing.panel/split-horizontal"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5204,
   :name "split-horizontal",
   :ns "clj-swing.panel",
   :url "http://clojuredocs.org/v/5204"},
  "incanter.processing/blue"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3160,
   :name "blue",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3160"},
  "incanter.processing/frustum"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3147,
   :name "frustum",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3147"},
  "swank.commands.inspector/assign-index"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4210,
   :name "assign-index",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4210"},
  "clojure.contrib.generic.arithmetic/-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 385,
   :name "-",
   :ns "clojure.contrib.generic.arithmetic",
   :url "http://clojuredocs.org/v/385"},
  "clojure.contrib.sql/transaction"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1237,
   :name "transaction",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1237"},
  "clojure.core/var?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 4,
     :name "def",
     :updated_at "2011-08-16 10:30:10.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5268",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "def",
     :file nil}
    {:namespace_id 99,
     :weight 1,
     :name "var",
     :updated_at "2010-11-08 02:40:48.0",
     :version "1.2.0",
     :created_at "2010-10-20 04:44:11.0",
     :added nil,
     :url "http://clojuredocs.org/v/5272",
     :line nil,
     :arglists_comp "",
     :url_friendly_name "var",
     :file nil}
    {:namespace_id 62,
     :weight 1,
     :name "vars",
     :updated_at "2010-11-08 02:59:27.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:54:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/728",
     :line "71",
     :arglists_comp "[nsname]",
     :url_friendly_name "vars",
     :file "clojure/contrib/ns_utils.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-08 03:07:49.0",
     :function "var?",
     :version 1,
     :created_at "2010-11-08 03:07:49.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(def my-symbol)\n(var? #'my-symbol)\n=> true\n\n(var? (var my-symbol))\n=> true\n\n(var? (def my-symbol2))\n=> true"}],
   :id 5830,
   :name "var?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5830"},
  "net.cgrand.enlive-html/attr-values"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3842,
   :name "attr-values",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3842"},
  "net.licenser.sandbox/thunk-timeout"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5133,
   :name "thunk-timeout",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5133"},
  "clojure.core/filter"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "remove",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:58.0",
     :added nil,
     :url "http://clojuredocs.org/v/2072",
     :line "2145",
     :arglists_comp "[pred coll]",
     :url_friendly_name "remove",
     :file "clojure/core.clj"}
    {:namespace_id 76,
     :weight 0,
     :name "separate",
     :updated_at "2010-10-20 04:41:41.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:28.0",
     :added nil,
     :url "http://clojuredocs.org/v/57",
     :line "45",
     :arglists_comp "[f s]",
     :url_friendly_name "separate",
     :file "clojure/contrib/seq.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 04:46:53.0",
     :function "filter",
     :version 3,
     :created_at "2010-07-13 17:05:21.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (filter even? (range 10))\n(0 2 4 6 8)\nuser=> (filter (fn [x]\n         (= (count x) 1))\n         [\"a\" \"aa\" \"b\" \"n\" \"f\" \"lisp\" \"clojure\" \"q\" \"\"])\n(\"a\" \"b\" \"n\" \"f\" \"q\")\n\nuser=> (filter #(= (count %) 1)\n         [\"a\" \"aa\" \"b\" \"n\" \"f\" \"lisp\" \"clojure\" \"q\" \"\"])\n(\"a\" \"b\" \"n\" \"f\" \"q\")\n\nuser=> (filter #(> (second %) 100)\n\t       {:a 1\n\t        :b 2\n\t        :c 101\n\t        :d 102\n\t        :e -1})\n([:c 101] [:d 102])\n\nuser=> (into {} *1)\n{:c 101, :d 102}\n"}],
   :id 5504,
   :name "filter",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5504"},
  "ring.middleware.params/wrap-params"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 131,
     :ns "ring.middleware.params",
     :updated_at "2010-09-26 05:26:16.0",
     :function "wrap-params",
     :version 5,
     :created_at "2010-07-10 12:56:51.0",
     :library "ring",
     :lib_version "0.2.3",
     :library_id 4,
     :body
     ";; This example adds support for parameters to a Ring handler:\n\n(use 'ring.middleware.params\n     'ring.adapter.jetty)\n\n(defn handler [{params :params}]\n  {:status  200\n   :headers {\"Content-Type\" \"text/plain\"}\n   :body    (str \"Hello \" (params \"name\"))})\n\n(def app\n  (wrap-params handler))\n\nuser=> (run-jetty app {:port 8080})\n\n\n;; If you run this, then visit  you will see a message saying \"Hello Bob\""}],
   :id 2688,
   :name "wrap-params",
   :ns "ring.middleware.params",
   :url "http://clojuredocs.org/v/2688"},
  "clojure.core/proxy-call-with-super"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5682,
   :name "proxy-call-with-super",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5682"},
  "clojure.contrib.profile/prof"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1114,
   :name "prof",
   :ns "clojure.contrib.profile",
   :url "http://clojuredocs.org/v/1114"},
  "net.cgrand.enlive-html/before"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3848,
   :name "before",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3848"},
  "circumspec.story/given"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3754,
   :name "given",
   :ns "circumspec.story",
   :url "http://clojuredocs.org/v/3754"},
  "clojure.contrib.sql/do-prepared"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1248,
   :name "do-prepared",
   :ns "clojure.contrib.sql",
   :url "http://clojuredocs.org/v/1248"},
  "circumspec.contrib-mocking/has-args"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3645,
   :name "has-args",
   :ns "circumspec.contrib-mocking",
   :url "http://clojuredocs.org/v/3645"},
  "clojure.contrib.repl-utils/start-handling-break"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 360,
   :name "start-handling-break",
   :ns "clojure.contrib.repl-utils",
   :url "http://clojuredocs.org/v/360"},
  "incanter.processing/green"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3215,
   :name "green",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3215"},
  "swank.commands.completion/potential-var-public"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4138,
   :name "potential-var-public",
   :ns "swank.commands.completion",
   :url "http://clojuredocs.org/v/4138"},
  "clojure.contrib.pprint/pprint-map"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 821,
   :name "pprint-map",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/821"},
  "circumspec.report/pending?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3697,
   :name "pending?",
   :ns "circumspec.report",
   :url "http://clojuredocs.org/v/3697"},
  "incanter.processing/string->text-in"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3218,
   :name "string->text-in",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3218"},
  "clojure.contrib.duck-streams/*append-to-writer*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 270,
   :name "*append-to-writer*",
   :ns "clojure.contrib.duck-streams",
   :url "http://clojuredocs.org/v/270"},
  "clojure.test.junit/indent"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6058,
   :name "indent",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6058"},
  "incanter.core/grid-apply"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2776,
   :name "grid-apply",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2776"},
  "incanter.stats/cdf-binomial"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3327,
   :name "cdf-binomial",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3327"},
  "clojure.contrib.shell-out/with-sh-env"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1214,
   :name "with-sh-env",
   :ns "clojure.contrib.shell-out",
   :url "http://clojuredocs.org/v/1214"},
  "net.cgrand.enlive-html/lockstep-transformation"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3946,
   :name "lockstep-transformation",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3946"},
  "incanter.processing/color"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3136,
   :name "color",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3136"},
  "clojure.contrib.pprint/pprint-cond"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 980,
   :name "pprint-cond",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/980"},
  "incanter.processing/WINDOWS"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3133,
   :name "WINDOWS",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3133"},
  "clojure.contrib.monadic-io-streams/write"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 759,
   :name "write",
   :ns "clojure.contrib.monadic-io-streams",
   :url "http://clojuredocs.org/v/759"},
  "clojure.contrib.mock/expect"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 328,
     :ns "clojure.contrib.mock",
     :updated_at "2011-02-12 16:54:27.0",
     :function "expect",
     :version 2,
     :created_at "2011-02-12 16:53:23.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(defn square [x] (* x x))\n\n(defn square-of-sum [x y] (square (+ x y)))\n\n(deftest test-square-of-sum\n  (expect [square (has-args [3] (times 1))]\n    (square-of-sum 2 1)))"}],
   :id 5241,
   :name "expect",
   :ns "clojure.contrib.mock",
   :url "http://clojuredocs.org/v/5241"},
  "clojure.contrib.monads/writer-m"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 793,
   :name "writer-m",
   :ns "clojure.contrib.monads",
   :url "http://clojuredocs.org/v/793"},
  "incanter.processing/delay-frame"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3010,
   :name "delay-frame",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3010"},
  "swank.core/*current-env*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4063,
   :name "*current-env*",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4063"},
  "clojure.core/disj!"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc!",
     :updated_at "2011-06-10 13:56:25.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1640",
     :line "2561",
     :arglists_comp "[coll key val]|[coll key val & kvs]",
     :url_friendly_name "assoc!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "dissoc!",
     :updated_at "2010-12-30 09:00:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:29.0",
     :added nil,
     :url "http://clojuredocs.org/v/1853",
     :line "2574",
     :arglists_comp "[map key]|[map key & ks]",
     :url_friendly_name "dissoc!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-02-22 20:15:25.0",
     :function "disj!",
     :version 3,
     :created_at "2011-06-10 14:01:33.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Note how we always use the return value of disj! and conj! in these examples\n;; for all future modifications, rather than (incorrectly) ignoring the return\n;; value and continuing to modify the original transient set.  See examples for\n;; assoc! and dissoc! for more discussion and examples of this.\n\nuser=> (def foo (transient #{'pore-pore 'slow 'yukkuri}))\n#'user/foo\nuser=> (count foo)\n3\nuser=> (def foo (disj! foo 'yukkuri))\n#'user/foo\nuser=> foo\n#<TransientHashSet clojure.lang.PersistentHashSet$TransientHashSet@3bd840d9>\nuser=> (count foo)\n2\nuser=> (def foo (conj! foo 'yukkuri))\n#'user/foo\nuser=> foo\n#<TransientHashSet clojure.lang.PersistentHashSet$TransientHashSet@3bd840d9>\nuser=> (count foo)\n3\nuser=> (def foo (persistent! foo))\n#'user/foo\nuser=> foo\n#{yukkuri slow pore-pore}\n"}],
   :id 5469,
   :name "disj!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5469"},
  "circumspec.report.nested/context-lines"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3711,
   :name "context-lines",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3711"},
  "clojure.core/ns-interns"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "ns-map",
     :updated_at "2010-10-25 23:35:55.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:05.0",
     :added nil,
     :url "http://clojuredocs.org/v/1997",
     :line "3216",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-map",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-publics",
     :updated_at "2011-02-24 06:02:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:04.0",
     :added nil,
     :url "http://clojuredocs.org/v/1561",
     :line "3232",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-publics",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "ns-aliases",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:25.0",
     :added nil,
     :url "http://clojuredocs.org/v/1508",
     :line "3308",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-aliases",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "ns-refers",
     :updated_at "2010-10-25 23:37:38.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:01.0",
     :added nil,
     :url "http://clojuredocs.org/v/1726",
     :line "3290",
     :arglists_comp "[ns]",
     :url_friendly_name "ns-refers",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-21 21:48:15.0",
     :function "ns-interns",
     :version 1,
     :created_at "2011-08-21 21:48:15.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (take 2 (ns-interns `clojure.core))\n([sorted-map #'clojure.core/sorted-map] [read-line #'clojure.core/read-line])\n\nuser=> (take 5 (sort (keys (ns-interns `clojure.java.io))))\n(Coercions IOFactory append? as-file as-relative-path)\n\nuser=> (count (ns-interns `clojure.core)) ; only 621 functions to learn :-)\n621\nuser=>"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-09-24 02:35:59.0",
     :function "ns-interns",
     :version 1,
     :created_at "2012-09-24 02:35:59.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; See also http://clojure.org/namespaces for information on namespaces in Clojure and how to inspect and manipulate them"}],
   :id 5634,
   :name "ns-interns",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5634"},
  "clojure.contrib.str-utils/chop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1260,
   :name "chop",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1260"},
  "clojure.core/re-matches"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 2,
     :name "re-find",
     :updated_at "2011-08-03 05:05:29.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1773",
     :line "3799",
     :arglists_comp "[m]|[re s]",
     :url_friendly_name "re-find",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-12-16 01:43:26.0",
     :function "re-matches",
     :version 3,
     :created_at "2011-01-07 02:05:17.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; The distinction is that re-find tries to find _any part_ of the string\n;; that matches the pattern, but re-matches only matches if the _entire_\n;; string matches the pattern.\nuser=> (re-matches #\"hello\" \"hello, world\")\nnil\n\nuser=> (re-matches #\"hello.*\" \"hello, world\")\n\"hello, world\"\n\nuser=> (re-matches #\"hello, (.*)\" \"hello, world\")\n[\"hello, world\" \"world\"]\n"}],
   :id 5699,
   :name "re-matches",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5699"},
  "clojure.core/split-with"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "split-at",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1724",
     :line "2218",
     :arglists_comp "[n coll]",
     :url_friendly_name "split-at",
     :file "clojure/core.clj"}
    {:namespace_id 113,
     :weight 2,
     :name "split",
     :updated_at "2010-10-20 04:42:18.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:51.0",
     :added nil,
     :url "http://clojuredocs.org/v/2471",
     :line "169",
     :arglists_comp "[s re]|[s re limit]",
     :url_friendly_name "split",
     :file "clojure/string.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "take-while",
     :updated_at "2010-10-20 04:42:12.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:40.0",
     :added nil,
     :url "http://clojuredocs.org/v/1958",
     :line "2162",
     :arglists_comp "[pred coll]",
     :url_friendly_name "take-while",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "drop-while",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/2075",
     :line "2199",
     :arglists_comp "[pred coll]",
     :url_friendly_name "drop-while",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-08-11 00:42:51.0",
     :function "split-with",
     :version 2,
     :created_at "2010-08-11 00:42:51.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> (split-with (partial >= 3) [1 2 3 4 5])\r\n[(1 2 3) (4 5)]\r\n</pre>"}],
   :id 5771,
   :name "split-with",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5771"},
  "clojure.contrib.base64/eval-with-locals"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3800,
   :name "eval-with-locals",
   :ns "clojure.contrib.base64",
   :url "http://clojuredocs.org/v/3800"},
  "clojure.contrib.math/expt"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 55,
     :ns "clojure.contrib.math",
     :updated_at "2011-07-28 07:29:31.0",
     :function "expt",
     :version 1,
     :created_at "2011-07-28 07:29:31.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(use '[clojure.contrib.math :only [expt]])\n\nuser=> (expt 2 100)\n1267650600228229401496703205376"}],
   :id 694,
   :name "expt",
   :ns "clojure.contrib.math",
   :url "http://clojuredocs.org/v/694"},
  "circumspec.for-all/lowercase-ascii"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3672,
   :name "lowercase-ascii",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3672"},
  "clojure.contrib.mock.test-adapter/less-than"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 746,
   :name "less-than",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/746"},
  "clojure.core/compare"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-24 00:09:56.0",
     :function "compare",
     :version 3,
     :created_at "2011-08-17 00:13:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; various examples\n;; comparing vectors of different sizes does not work as you may expect\n;; the longer vector is always \"greater\" regardless of contents \n\nuser=> (compare [0 1 2] [0 1 2])\n0\nuser=> (compare [1 2 3] [0 1 2 3])\n-1\nuser=> (compare [0 1 2] [3 4])\n1\nuser=> (compare nil [1 2 3])\n-1\nuser=> (compare [1 2 3] nil)\n1\nuser=> (compare \"abc\" \"def\")\n-3\nuser=> (compare \"abc\" \"abd\")\n-1"}],
   :id 5426,
   :name "compare",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5426"},
  "clojure.core/even?"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "odd?",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:37.0",
     :added nil,
     :url "http://clojuredocs.org/v/1605",
     :line "1093",
     :arglists_comp "[n]",
     :url_friendly_name "odd_q",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:43:08.0",
     :function "even?",
     :version 3,
     :created_at "2010-07-13 19:17:04.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (even? 2)\ntrue\nuser=> (even? 1)\nfalse"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-28 08:42:55.0",
     :function "even?",
     :version 2,
     :created_at "2011-11-15 03:21:12.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body "user=> (filter even? (range 10))\n(0 2 4 6 8)"}],
   :id 5493,
   :name "even?",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5493"},
  "clojure.contrib.complex-numbers/real"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 54,
   :name "real",
   :ns "clojure.contrib.complex-numbers",
   :url "http://clojuredocs.org/v/54"},
  "incanter.excel/save-xls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2956,
   :name "save-xls",
   :ns "incanter.excel",
   :url "http://clojuredocs.org/v/2956"},
  "clojure.core/def"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 3,
     :name "defn",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:12.0",
     :added nil,
     :url "http://clojuredocs.org/v/1833",
     :line "242",
     :arglists_comp
     "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
     :url_friendly_name "defn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "fn",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:00.0",
     :added nil,
     :url "http://clojuredocs.org/v/1557",
     :line "3491",
     :arglists_comp "[& sigs]",
     :url_friendly_name "fn",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "defmacro",
     :updated_at "2010-10-20 04:42:10.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:53.0",
     :added nil,
     :url "http://clojuredocs.org/v/1890",
     :line "370",
     :arglists_comp
     "[name doc-string? attr-map? [params*] body]|[name doc-string? attr-map? ([params*] body) + attr-map?]",
     :url_friendly_name "defmacro",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "defmulti",
     :updated_at "2011-08-12 18:02:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:24:59.0",
     :added nil,
     :url "http://clojuredocs.org/v/1989",
     :line "1310",
     :arglists_comp
     "[name docstring? attr-map? dispatch-fn & options]",
     :url_friendly_name "defmulti",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:40:27.0",
     :function "def",
     :version 1,
     :created_at "2010-11-06 03:40:27.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "user=> (def my-val 5)\n#'user/my-val\nuser=> my-val\n5"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-06 03:41:50.0",
     :function "def",
     :version 1,
     :created_at "2010-11-06 03:41:50.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def my-function (fn [x] (* x x x)))\n#'user/my-function\nuser=> (my-function 4)\n64"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2012-10-13 03:56:50.0",
     :function "def",
     :version 4,
     :created_at "2011-03-22 14:46:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; This is an example of setting a docstring during a def.\n;; (Note that the clojure.repl namespace which contains the\n;;  doc function is not loaded by default in Emacs' SLIME mode.)\n\nuser> (def ted-nugent \"the nuge rocks\" 123)\n#'user/ted-nugent\nuser> (doc ted-nugent)\n-------------------------\nuser/ted-nugent\n  The nuge rocks\nuser> ted-nugent\n123\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-08-16 10:31:28.0",
     :function "def",
     :version 2,
     :created_at "2011-08-16 10:30:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; give function another name\nuser=> (def sys-map map)\n;; give macro another name\nuser=> (def #^{:macro true} sys-loop #'loop)"}],
   :id 6125,
   :name "def",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6125"},
  "clojure.contrib.sql.internal/transaction*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1243,
   :name "transaction*",
   :ns "clojure.contrib.sql.internal",
   :url "http://clojuredocs.org/v/1243"},
  "clojure.test.junit/error-el"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6053,
   :name "error-el",
   :ns "clojure.test.junit",
   :url "http://clojuredocs.org/v/6053"},
  "swank.commands.basic/debugger-info-for-emacs"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4079,
   :name "debugger-info-for-emacs",
   :ns "swank.commands.basic",
   :url "http://clojuredocs.org/v/4079"},
  "clojure.core/error-handler"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5490,
   :name "error-handler",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5490"},
  "clojure.contrib.str-utils/re-sub"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1257,
   :name "re-sub",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1257"},
  "incanter.processing/text-mode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3086,
   :name "text-mode",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3086"},
  "clojure.core/monitor-enter"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6134,
   :name "monitor-enter",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/6134"},
  "clojure.core/deliver"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "promise",
     :updated_at "2010-10-20 04:42:04.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:27.0",
     :added nil,
     :url "http://clojuredocs.org/v/1591",
     :line "5501",
     :arglists_comp "[]",
     :url_friendly_name "promise",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 03:12:27.0",
     :function "deliver",
     :version 3,
     :created_at "2010-08-02 04:33:02.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (def x (promise))\n#'user/x\n;; Trying to deref at this point will make your repl wait forever\n\n\nuser=> (deliver x 100)\n#&lt;core$promise$reify__5534@4369a50b: 100&gt;\n\n;; the promise has been delivered, deref x will return immediately\nuser=> @x\n100\n"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-12-26 21:11:39.0",
     :function "deliver",
     :version 1,
     :created_at "2011-12-26 21:11:39.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Create a promise\nuser> (def p (promise))\n#'user/p ; p is our promise\n\n;; Check if was delivered/realized\nuser> (realized? p)\nfalse ; No yet\n\n;; Delivering the promise\nuser> (deliver p 42)\n#<core$promise$reify__5727@47122d: 42>\n\n;; Check again if it was delivered\nuser> (realized? p)\ntrue ; Yes!\n\n;; Deref to see what has been delivered\nuser> @p\n42\n\n;; Note that @ is shorthand for deref\nuser> (deref p)\n42"}],
   :id 5462,
   :name "deliver",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5462"},
  "swank.core/read-loop"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4031,
   :name "read-loop",
   :ns "swank.core",
   :url "http://clojuredocs.org/v/4031"},
  "clojure.core/alter-meta!"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5348,
   :name "alter-meta!",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5348"},
  "swank.util.concurrent.thread/dothread-keeping-clj"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3999,
   :name "dothread-keeping-clj",
   :ns "swank.util.concurrent.thread",
   :url "http://clojuredocs.org/v/3999"},
  "net.licenser.sandbox.matcher/combine-matchers"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5110,
   :name "combine-matchers",
   :ns "net.licenser.sandbox.matcher",
   :url "http://clojuredocs.org/v/5110"},
  "incanter.stats/pdf-chisq"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3338,
   :name "pdf-chisq",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/3338"},
  "clj-swing.example/grid-bag-example"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5220,
   :name "grid-bag-example",
   :ns "clj-swing.example",
   :url "http://clojuredocs.org/v/5220"},
  "clojure.core/require"
  {:comments
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-12-06 01:43:49.0",
     :user_id 41,
     :function "require",
     :version "1.2.0",
     :created_at "2010-12-06 01:43:49.0",
     :library "Clojure Core",
     :library_id 3,
     :body
     "Good description of use/require/import here:\n\nhttp://blog.8thlight.com/articles/2010/12/6/clojure-libs-and-namespaces-require-use-import-and-ns"}],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "remove-ns",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:33.0",
     :added nil,
     :url "http://clojuredocs.org/v/1687",
     :line "3189",
     :arglists_comp "[sym]",
     :url_friendly_name "remove-ns",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 2,
     :name "import",
     :updated_at "2011-01-02 17:43:44.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:20:48.0",
     :added nil,
     :url "http://clojuredocs.org/v/1621",
     :line "2617",
     :arglists_comp "[& import-symbols-or-lists]",
     :url_friendly_name "import",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 3,
     :name "use",
     :updated_at "2010-11-29 01:07:00.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/2057",
     :line "4871",
     :arglists_comp "[& args]",
     :url_friendly_name "use",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 7,
     :name "ns",
     :updated_at "2011-02-13 23:57:47.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/1794",
     :line "4594",
     :arglists_comp "[name docstring? attr-map? references*]",
     :url_friendly_name "ns",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-09-26 00:53:50.0",
     :function "require",
     :version 4,
     :created_at "2010-07-14 19:17:25.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Require clojure.java.io and call its file function:\n\nuser=> (require '(clojure.java io))\nuser=> (clojure.java.io/file \"filename\")\n#&lt;File filename&gt;"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-11 23:00:42.0",
     :function "require",
     :version 6,
     :created_at "2010-09-07 22:29:28.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; alias clojure.java.io as io\nuser=> (require '[clojure.java.io :as io])\nnil\n\nuser=> (io/file \"Filename\")\n#<File Filename>\n\n;; alias clojure.java.io as io using prefixes\nuser=> (require '(clojure.java [io :as io2])\nnil\n\nuser=> (io2/file \"Filename\")\n#<File Filename>"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-11-10 01:43:55.0",
     :function "require",
     :version 1,
     :created_at "2010-11-10 01:43:55.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "(ns rosettacode.24game\n  (:require [clojure.string :as str]))\n\n(defn parse-infix-data\n  \"input '1+2+3+4'\n   output (1 + 2 + 3 + 4)\n   where the numbers are clojure numbers, and the symbols are clojure operators\"\n  [string] (map read-string (next (str/split string #\"\"))))"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-02 12:18:13.0",
     :function "require",
     :version 1,
     :created_at "2011-09-02 12:18:13.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "(require '(clojure.contrib [sql :as sql]))"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2013-01-19 20:26:08.0",
     :function "require",
     :version 1,
     :created_at "2013-01-19 20:26:08.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     "(ns myproject.core\n  (:use [clojure.core] :reload)\n  (:require [clojure.string :as str :only [replace]] :reload-all))\n\n(str/replace \"foo\" #\"o\" \"e\")\n\"fee\""}],
   :id 5727,
   :name "require",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5727"},
  "swank.util.class-browse/clojure-fn-file?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4134,
   :name "clojure-fn-file?",
   :ns "swank.util.class-browse",
   :url "http://clojuredocs.org/v/4134"},
  "swank.core.threadmap/*thread-map*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4252,
   :name "*thread-map*",
   :ns "swank.core.threadmap",
   :url "http://clojuredocs.org/v/4252"},
  "net.licenser.sandbox/add-reader-to-sandbox"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5129,
   :name "add-reader-to-sandbox",
   :ns "net.licenser.sandbox",
   :url "http://clojuredocs.org/v/5129"},
  "clojure.core/agent"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 0,
     :name "set-error-handler!",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:57.0",
     :added nil,
     :url "http://clojuredocs.org/v/2071",
     :line "1660",
     :arglists_comp "[a handler-fn]",
     :url_friendly_name "set-error-handler!",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "send",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1842",
     :line "1583",
     :arglists_comp "[a f & args]",
     :url_friendly_name "send",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "send-off",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1663",
     :line "1593",
     :arglists_comp "[a f & args]",
     :url_friendly_name "send-off",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "release-pending-sends",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:08.0",
     :added nil,
     :url "http://clojuredocs.org/v/2002",
     :line "1603",
     :arglists_comp "[]",
     :url_friendly_name "release-pending-sends",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "agent-error",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1671",
     :line "1638",
     :arglists_comp "[a]",
     :url_friendly_name "agent-error",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "restart-agent",
     :updated_at "2010-10-20 04:42:07.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:22:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1754",
     :line "1645",
     :arglists_comp "[a new-state & options]",
     :url_friendly_name "restart-agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "add-watch",
     :updated_at "2010-10-20 04:42:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:46.0",
     :added nil,
     :url "http://clojuredocs.org/v/1539",
     :line "1613",
     :arglists_comp "[reference key fn]",
     :url_friendly_name "add-watch",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "set-error-mode!",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:06.0",
     :added nil,
     :url "http://clojuredocs.org/v/1998",
     :line "1676",
     :arglists_comp "[a mode-keyword]",
     :url_friendly_name "set-error-mode!",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-09-19 18:00:49.0",
     :function "agent",
     :version 4,
     :created_at "2010-07-09 17:06:23.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "; Agents provide shared access to mutable state. They allow non-blocking (asynchronous as opposed to synchronous atoms) and independent change of individual locations (unlike coordinated change of multiple locations through refs).\n\n; agent creates one:\n\nuser=> (def counter (agent 0))\n#'user/counter\n\n; send changes its value:\nuser=> (send counter inc)\n\n; @ or deref provides a snapshot of the current state:\nuser=> @counter\n1\n\n; agents can reference any data structure:\n\nuser=> (def pulp-fiction (agent {}))\n#'user/pulp-fiction\nuser=> (send pulp-fiction assoc :act-one \"PROLOGUE\")\nuser=> @pulp-fiction\n{:act-one \"PROLOGUE\"}\nuser=> (send pulp-fiction assoc :act-two \"VINCENT VEGA & MARSELLUS WALLACE'S WIFE\")\nuser=> @pulp-fiction\n{:act-two \"VINCENT VEGA & MARSELLUS WALLACE'S WIFE\", :act-one \"PROLOGUE\"}\n\n; From http://clojure-examples.appspot.com/clojure.core/agent with permission."}],
   :id 5340,
   :name "agent",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5340"},
  "clojure.core/*unchecked-math*"
  {:comments
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-06-08 02:18:44.0",
     :user_id 627,
     :function "*unchecked-math*",
     :version "1.3.0",
     :created_at "2012-06-08 02:18:44.0",
     :library "Clojure Core",
     :library_id 15,
     :body
     "Note that, even if `*unchecked-math*` is true when compiling, the unchecked operations are used only when both operands are primitive; if either operand is boxed, normal Clojure arithmetic is used (see [this message](http://groups.google.com/group/clojure/msg/532b32950db75f56) from Stuart Sierra on the Clojure Google group). This can be worked around by adding type hints (e.g. `^long`) where necessary."}],
   :see-alsos [],
   :examples [],
   :id 5311,
   :name "*unchecked-math*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5311"},
  "clj-ssh.ssh/add-identity-with-keychain"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1463,
   :name "add-identity-with-keychain",
   :ns "clj-ssh.ssh",
   :url "http://clojuredocs.org/v/1463"},
  "clojure.zip/left"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6106,
   :name "left",
   :ns "clojure.zip",
   :url "http://clojuredocs.org/v/6106"},
  "clojure.contrib.reflect/call-method"
  {:comments [],
   :see-alsos
   [{:namespace_id 73,
     :weight 0,
     :name "get-field",
     :updated_at "2010-10-20 04:41:56.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:58:02.0",
     :added nil,
     :url "http://clojuredocs.org/v/1130",
     :line "27",
     :arglists_comp "[klass field-name obj]",
     :url_friendly_name "get-field",
     :file "clojure/contrib/reflect.clj"}],
   :examples [],
   :id 1131,
   :name "call-method",
   :ns "clojure.contrib.reflect",
   :url "http://clojuredocs.org/v/1131"},
  "swank.commands.inspector/ns-refers-by-ns"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4225,
   :name "ns-refers-by-ns",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4225"},
  "clojure.contrib.seq-utils/positions"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1183,
   :name "positions",
   :ns "clojure.contrib.seq-utils",
   :url "http://clojuredocs.org/v/1183"},
  "clojure.contrib.find-namespaces/find-ns-decls-in-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 316,
   :name "find-ns-decls-in-dir",
   :ns "clojure.contrib.find-namespaces",
   :url "http://clojuredocs.org/v/316"},
  "clojure.contrib.accumulators/empty-set"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 22,
   :name "empty-set",
   :ns "clojure.contrib.accumulators",
   :url "http://clojuredocs.org/v/22"},
  "incanter.processing/tint"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3103,
   :name "tint",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3103"},
  "clojure.contrib.str-utils2/capitalize"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1283,
   :name "capitalize",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1283"},
  "clojure.inspector/is-leaf"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5870,
   :name "is-leaf",
   :ns "clojure.inspector",
   :url "http://clojuredocs.org/v/5870"},
  "incanter.processing/ERODE"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3077,
   :name "ERODE",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3077"},
  "net.cgrand.xml/xml-zip"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3956,
   :name "xml-zip",
   :ns "net.cgrand.xml",
   :url "http://clojuredocs.org/v/3956"},
  "midje.semi-sweet/arg-matcher-maker"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4340,
   :name "arg-matcher-maker",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4340"},
  "clojure.core/->VecNode"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5323,
   :name "->VecNode",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5323"},
  "clojure.contrib.mock.test-adapter/calls"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 747,
   :name "calls",
   :ns "clojure.contrib.mock.test-adapter",
   :url "http://clojuredocs.org/v/747"},
  "swank.commands.contrib.swank-fuzzy/fuzzy-matching"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4179,
   :name "fuzzy-matching",
   :ns "swank.commands.contrib.swank-fuzzy",
   :url "http://clojuredocs.org/v/4179"},
  "clojure.core/dissoc"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "assoc",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:44.0",
     :added nil,
     :url "http://clojuredocs.org/v/1702",
     :line "161",
     :arglists_comp "[map key val]|[map key val & kvs]",
     :url_friendly_name "assoc",
     :file "clojure/core.clj"}
    {:namespace_id 11,
     :weight 1,
     :name "dissoc-in",
     :updated_at "2011-09-02 11:27:03.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:46:47.0",
     :added nil,
     :url "http://clojuredocs.org/v/99",
     :line "57",
     :arglists_comp "[m [k & ks :as keys]]",
     :url_friendly_name "dissoc-in",
     :file "clojure/contrib/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "disj",
     :updated_at "2010-10-20 04:42:14.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:31.0",
     :added nil,
     :url "http://clojuredocs.org/v/2035",
     :line "1177",
     :arglists_comp "[set]|[set key]|[set key & ks]",
     :url_friendly_name "disj",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-28 11:10:10.0",
     :function "dissoc",
     :version 2,
     :created_at "2010-07-28 11:10:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (dissoc {:a 1 :b 2 :c 3}) ; dissoc nothing \r\n{:a 1, :b 2, :c 3} \r\n\r\nuser=&gt; (dissoc {:a 1 :b 2 :c 3} :b) ; dissoc key :b\r\n{:a 1, :c 3} \r\n\r\nuser=&gt; (dissoc {:a 1 :b 2 :c 3} :d) ; dissoc not existed key\r\n{:a 1, :b 2, :c 3} \r\n\r\nuser=&gt; (dissoc {:a 1 :b 2 :c 3} :c :b) ; several keys at once\r\n{:a 1} \r\n</pre>\r\n"}],
   :id 5470,
   :name "dissoc",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5470"},
  "clojure.contrib.properties/get-system-property"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1122,
   :name "get-system-property",
   :ns "clojure.contrib.properties",
   :url "http://clojuredocs.org/v/1122"},
  "clj-swing.document/clj_swing.document.proxy$java.lang.Object$DocumentListener$77a83d2b"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5176,
   :name
   "clj_swing.document.proxy$java.lang.Object$DocumentListener$77a83d2b",
   :ns "clj-swing.document",
   :url "http://clojuredocs.org/v/5176"},
  "clojure.contrib.pprint/pprint-reader-macro"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1041,
   :name "pprint-reader-macro",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/1041"},
  "clojure.contrib.str-utils/str-join"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1258,
   :name "str-join",
   :ns "clojure.contrib.str-utils",
   :url "http://clojuredocs.org/v/1258"},
  "clojure.test/test-var"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 6042,
   :name "test-var",
   :ns "clojure.test",
   :url "http://clojuredocs.org/v/6042"},
  "swank.commands.inspector/content-range"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4240,
   :name "content-range",
   :ns "swank.commands.inspector",
   :url "http://clojuredocs.org/v/4240"},
  "clojure.core/binding"
  {:comments [],
   :see-alsos
   [{:namespace_id 330,
     :weight 3,
     :name "with-redefs",
     :updated_at "2012-11-09 06:25:12.0",
     :version "1.3.0",
     :created_at "2011-09-26 06:12:39.0",
     :added "1.3",
     :url "http://clojuredocs.org/v/5850",
     :line "6487",
     :arglists_comp "[bindings & body]",
     :url_friendly_name "with-redefs",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-10-20 19:41:14.0",
     :function "binding",
     :version 4,
     :created_at "2010-08-11 10:15:00.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     ";; Here are the definitions.\n(defn mymax [x y]\n  (min x y))\n\n(defn find-max [x y]\n  (max x y))\n\nuser=> (let [max mymax]\n         (find-max 10 20))\n\n20 ;let is ineffective outside current lexical scope\n\n\nuser=> (binding [max mymax]\n         (find-max 10 20))\n\n10 ;because max is now acting as min"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2011-11-18 13:44:34.0",
     :function "binding",
     :version 1,
     :created_at "2011-11-18 13:44:34.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; As of Clojure 1.3, vars need to be explicitly marked as ^:dynamic in order for\n;; them to be dynamically rebindable:\n\nuser=> (def ^:dynamic x 1)\nuser=> (def ^:dynamic y 1)\nuser=> (+ x y)\n2\n\n;; Within the scope of the binding, x = 2 and y = 3\n\nuser=> (binding [x 2 y 3]\n         (+ x y))\n5\n\n;; But once you leave the binding's scope, x and y maintain their original\n;; bindings:\n\nuser=> (+ x y)\n2"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-01-11 17:01:37.0",
     :function "binding",
     :version 2,
     :created_at "2012-01-11 17:00:32.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";;Use t like a \"template\"\n\n(declare ^:dynamic t)\n\n(defn addt [] \n  (+ t 10))\n\n(binding [t 1]\n  (addt))\n=> 11"}],
   :id 5379,
   :name "binding",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5379"},
  "incanter.processing/UP"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3033,
   :name "UP",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3033"},
  "clojure.reflect/flag-descriptors"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5958,
   :name "flag-descriptors",
   :ns "clojure.reflect",
   :url "http://clojuredocs.org/v/5958"},
  "net.cgrand.enlive-html/deftemplate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3851,
   :name "deftemplate",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3851"},
  "clojure.contrib.probabilities.finite-distributions/make-distribution"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1089,
   :name "make-distribution",
   :ns "clojure.contrib.probabilities.finite-distributions",
   :url "http://clojuredocs.org/v/1089"},
  "incanter.core/dataset?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2884,
   :name "dataset?",
   :ns "incanter.core",
   :url "http://clojuredocs.org/v/2884"},
  "net.cgrand.enlive-html/first-child"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3899,
   :name "first-child",
   :ns "net.cgrand.enlive-html",
   :url "http://clojuredocs.org/v/3899"},
  "incanter.optimize/hessian"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2975,
   :name "hessian",
   :ns "incanter.optimize",
   :url "http://clojuredocs.org/v/2975"},
  "clojure.core/*clojure-version*"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "clojure-version",
     :updated_at "2010-10-20 04:42:13.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:25:20.0",
     :added nil,
     :url "http://clojuredocs.org/v/2019",
     :line "5486",
     :arglists_comp "[]",
     :url_friendly_name "clojure-version",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-28 06:12:40.0",
     :function "*clojure-version*",
     :version 2,
     :created_at "2010-07-28 06:12:40.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>\r\nuser=> *clojure-version*\r\n{:interim true, :major 1, :minor 2, :incremental 0, :qualifier \"master\"}\r\n</pre>"}],
   :id 5291,
   :name "*clojure-version*",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5291"},
  "swank.loader/swank-ns?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4288,
   :name "swank-ns?",
   :ns "swank.loader",
   :url "http://clojuredocs.org/v/4288"},
  "clojure.contrib.jmx/mbean-names"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 556,
   :name "mbean-names",
   :ns "clojure.contrib.jmx",
   :url "http://clojuredocs.org/v/556"},
  "clojure.contrib.io/copy"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 491,
   :name "copy",
   :ns "clojure.contrib.io",
   :url "http://clojuredocs.org/v/491"},
  "circumspec.report.nested/result-string"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3707,
   :name "result-string",
   :ns "circumspec.report.nested",
   :url "http://clojuredocs.org/v/3707"},
  "clojure.core/select-keys"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-17 13:12:46.0",
     :function "select-keys",
     :version 4,
     :created_at "2010-07-10 21:42:10.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (select-keys {:a 1 :b 2} [:a])\r\n{:a 1}\r\nuser=&gt; (select-keys {:a 1 :b 2} [:a :c])\r\n{:a 1}\r\n</pre>"}],
   :id 5740,
   :name "select-keys",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5740"},
  "clojure.contrib.generic.comparison/neg?"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 399,
   :name "neg?",
   :ns "clojure.contrib.generic.comparison",
   :url "http://clojuredocs.org/v/399"},
  "incanter.processing/rotate"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3155,
   :name "rotate",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3155"},
  "leiningen.deps/make-repository"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3534,
   :name "make-repository",
   :ns "leiningen.deps",
   :url "http://clojuredocs.org/v/3534"},
  "clojure.contrib.str-utils2/dochars"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 86,
     :ns "clojure.contrib.str-utils2",
     :updated_at "2010-11-12 14:49:37.0",
     :function "dochars",
     :version 1,
     :created_at "2010-11-12 14:49:37.0",
     :library "Clojure Contrib",
     :lib_version "1.2.0",
     :library_id 1,
     :body
     "(require '[clojure.contrib.str-utils2 :as s])\n\nuser=> (s/dochars [c \"ABC\"] (println c))\nA\nB\nC\nnil"}],
   :id 1280,
   :name "dochars",
   :ns "clojure.contrib.str-utils2",
   :url "http://clojuredocs.org/v/1280"},
  "clojure.string/blank?"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 113,
     :ns "clojure.string",
     :updated_at "2010-12-29 17:30:06.0",
     :function "blank?",
     :version 1,
     :created_at "2010-12-29 17:30:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user> (clojure.string/blank? nil)\ntrue\n\nuser> (clojure.string/blank? false)\ntrue\n\nuser> (clojure.string/blank? \"   \")\ntrue\n\nuser> (clojure.string/blank? \" a \")\nfalse"}],
   :id 5997,
   :name "blank?",
   :ns "clojure.string",
   :url "http://clojuredocs.org/v/5997"},
  "clojure.core/unchecked-dec-int"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5804,
   :name "unchecked-dec-int",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5804"},
  "clojure.core/find"
  {:comments [],
   :see-alsos [],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2010-07-28 12:36:32.0",
     :function "find",
     :version 2,
     :created_at "2010-07-28 12:36:32.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "<pre>user=&gt; (find {:b 2 :a 1 :c 3} :d)\r\nnil \r\n\r\nuser=&gt; (find {:b 2 :a 1 :c 3} :a)\r\n[:a 1] \r\n</pre>\r\n"}
    {:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-05-16 18:10:06.0",
     :function "find",
     :version 1,
     :created_at "2011-05-16 18:10:06.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body
     "user=> (find [:a :b :c :d] 2)\n[2 :c]\n\nuser=> (find [:a :b :c :d] 5)\nnil"}],
   :id 5505,
   :name "find",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5505"},
  "clojure.core/shutdown-agents"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "send",
     :updated_at "2010-10-20 04:42:09.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:23:19.0",
     :added nil,
     :url "http://clojuredocs.org/v/1842",
     :line "1583",
     :arglists_comp "[a f & args]",
     :url_friendly_name "send",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "send-off",
     :updated_at "2010-10-20 04:42:05.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:16.0",
     :added nil,
     :url "http://clojuredocs.org/v/1663",
     :line "1593",
     :arglists_comp "[a f & args]",
     :url_friendly_name "send-off",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 1,
     :name "agent",
     :updated_at "2010-10-20 04:42:15.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:26:13.0",
     :added nil,
     :url "http://clojuredocs.org/v/2098",
     :line "1550",
     :arglists_comp "[state & options]",
     :url_friendly_name "agent",
     :file "clojure/core.clj"}
    {:namespace_id 99,
     :weight 0,
     :name "agent-error",
     :updated_at "2010-10-20 04:42:06.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:21:22.0",
     :added nil,
     :url "http://clojuredocs.org/v/1671",
     :line "1638",
     :arglists_comp "[a]",
     :url_friendly_name "agent-error",
     :file "clojure/core.clj"}],
   :examples
   [{:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-07 04:01:36.0",
     :function "shutdown-agents",
     :version 1,
     :created_at "2012-10-07 04:01:36.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Creating an agent\nuser> (def a (agent 1))\n#'user/a\n\n;; Create a function that can handle an agent\n\nuser> (defn agent-action [a]\n\t33)\n#'user/agent-action\n\n;; The agent will become 33\nuser> (send-off a agent-action)\n#<Agent@dde4f2: 33>\n\nuser> @a\n33\n;; Create another agent before shutdown\nuser> (def c (agent 3))\n#'user/c\n\n;; Shutdown agents is called\nuser> (shutdown-agents)\nnil\n\n;; Attempt to turn c into 33\nuser> (send c agent-action)\n#<Agent@b162fa: 3>\n\n;; The result is that it is still the same value it was initialized with\nuser> @c\n3\n\n;; Agent created after shutdown\nuser> (def d (agent 4))\n#'user/d\n\n;; Try sending it\nuser> (send d agent-action)\n#<Agent@356519: 4>\n\n;; Same thing, there are no threads to process the agents\nuser> @d\n4"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-10-07 04:09:22.0",
     :function "shutdown-agents",
     :version 1,
     :created_at "2012-10-07 04:09:22.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Create the agent that we will be using\nuser=> (def a (agent 0))\n#'user/a\n\n;; Dereference the agent to show the value is 0\nuser=> @a\n0\n\n;; Create a function that can increment the agent\n;; This will continually update the value of the agent\nuser=> (defn agent-inc [a]\n        (send-off *agent* agent-inc)\n        (inc a))\n#'user/agent-inc\n\n;; Send the agent to the agent-inc function\n;; The value is 188 because by the time the repl has sent off the\n;; agent to the function, the function has already been called recursively\nuser=> (send a agent-inc)\n#<Agent@6b850d: 188>\n\n;; Dereference of the value a second or so later\nuser=> @a\n716889\n\n;; Another dereference in another couple of seconds\nuser=> @a\n1455264\n\n;; Shutdown the threads for the agents\nuser=> (shutdown-agents)\nnil\n\n;; Dereference the agent to see what value it is\nuser=> @a\n3522353\n\n;; Dereference the agent again in a few seconds\n;; It's the same value, because the agent pool of threads are no longer\n;; active\nuser=> @a\n3522353\n"}],
   :id 5757,
   :name "shutdown-agents",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5757"},
  "clojure.core/printf"
  {:comments [],
   :see-alsos
   [{:namespace_id 99,
     :weight 1,
     :name "format",
     :updated_at "2010-10-20 04:42:02.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:19:32.0",
     :added nil,
     :url "http://clojuredocs.org/v/1521",
     :line "4569",
     :arglists_comp "[fmt & args]",
     :url_friendly_name "format",
     :file "clojure/core.clj"}
    {:namespace_id 109,
     :weight 0,
     :name "cl-format",
     :updated_at "2010-10-20 04:42:17.0",
     :version "1.2.0",
     :created_at "2010-07-14 20:27:18.0",
     :added nil,
     :url "http://clojuredocs.org/v/2364",
     :line "27",
     :arglists_comp "[writer format-in & args]",
     :url_friendly_name "cl-format",
     :file "clojure/pprint/cl_format.clj"}],
   :examples
   [{:namespace_id 99,
     :ns "clojure.core",
     :updated_at "2011-03-08 10:56:58.0",
     :function "printf",
     :version 1,
     :created_at "2011-03-08 10:56:58.0",
     :library "Clojure Core",
     :lib_version "1.2.0",
     :library_id 3,
     :body "(printf \"1 + 2 is %s\\n\" 3)"}
    {:namespace_id 330,
     :ns "clojure.core",
     :updated_at "2012-03-22 21:41:52.0",
     :function "printf",
     :version 3,
     :created_at "2012-03-10 20:39:24.0",
     :library "Clojure Core",
     :lib_version "1.3.0",
     :library_id 15,
     :body
     ";; Click the link to clojure.core/format under See also for\n;; more extensive examples.  printf and format take the same\n;; arguments -- the difference is that format returns a formatted\n;; string, whereas printf sends the formatted string to *out*."}],
   :id 5675,
   :name "printf",
   :ns "clojure.core",
   :url "http://clojuredocs.org/v/5675"},
  "clj-swing.tree/pPathed"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5197,
   :name "pPathed",
   :ns "clj-swing.tree",
   :url "http://clojuredocs.org/v/5197"},
  "midje.semi-sweet/one-failure-per-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 4334,
   :name "one-failure-per-test",
   :ns "midje.semi-sweet",
   :url "http://clojuredocs.org/v/4334"},
  "incanter.processing/load-strings"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3031,
   :name "load-strings",
   :ns "incanter.processing",
   :url "http://clojuredocs.org/v/3031"},
  "clojure.contrib.pprint/pprint-hold-first"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 984,
   :name "pprint-hold-first",
   :ns "clojure.contrib.pprint",
   :url "http://clojuredocs.org/v/984"},
  "incanter.stats/sample-dirichlet"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2736,
   :name "sample-dirichlet",
   :ns "incanter.stats",
   :url "http://clojuredocs.org/v/2736"},
  "incanter.charts/xy-plot*"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 2832,
   :name "xy-plot*",
   :ns "incanter.charts",
   :url "http://clojuredocs.org/v/2832"},
  "clojure.main/skip-whitespace"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 5920,
   :name "skip-whitespace",
   :ns "clojure.main",
   :url "http://clojuredocs.org/v/5920"},
  "clojure.contrib.fcase/in-case-test"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 300,
   :name "in-case-test",
   :ns "clojure.contrib.fcase",
   :url "http://clojuredocs.org/v/300"},
  "circumspec.for-all/data-name-for-generator-coll"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 3671,
   :name "data-name-for-generator-coll",
   :ns "circumspec.for-all",
   :url "http://clojuredocs.org/v/3671"},
  "clojure.contrib.test-is/deftest-"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1362,
   :name "deftest-",
   :ns "clojure.contrib.test-is",
   :url "http://clojuredocs.org/v/1362"},
  "clojure.contrib.shell-out/with-sh-dir"
  {:comments [],
   :see-alsos [],
   :examples [],
   :id 1213,
   :name "with-sh-dir",
   :ns "clojure.contrib.shell-out",
   :url "http://clojuredocs.org/v/1213"}}}
